!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=12)}([function(t,e,i){"use strict";const s=2.3283064365386963e-10;class r{constructor(){this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}getSeed(){return this._seed}setSeed(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*s,t=69069*t+1>>>0,this._s1=t*s,t=69069*t+1>>>0,this._s2=t*s,this._c=1,this}getUniform(){let t=2091639*this._s0+this._c*s;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}getUniformInt(t,e){let i=Math.max(t,e),s=Math.min(t,e);return Math.floor(this.getUniform()*(i-s+1))+s}getNormal(t=0,e=1){let i,s,r;do{r=(i=2*this.getUniform()-1)*i+(s=2*this.getUniform()-1)*s}while(r>1||0==r);return t+i*Math.sqrt(-2*Math.log(r)/r)*e}getPercentage(){return 1+Math.floor(100*this.getUniform())}getItem(t){return t.length?t[Math.floor(this.getUniform()*t.length)]:null}shuffle(t){let e=[],i=t.slice();for(;i.length;){let t=i.indexOf(this.getItem(i));e.push(i.splice(t,1)[0])}return e}getWeightedValue(t){let e=0;for(let i in t)e+=t[i];let i,s=this.getUniform()*e,r=0;for(i in t)if(s<(r+=t[i]))return i;return i}getState(){return[this._s0,this._s1,this._s2,this._c]}setState(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this}clone(){return(new r).setState(this.getState())}}e.a=(new r).setSeed(Date.now())},function(t,e,i){"use strict";function s(t,e){return(t%e+e)%e}function r(t,e=0,i=1){return t<e?e:t>i?i:t}function o(t){return t.charAt(0).toUpperCase()+t.substring(1)}function n(t,...e){let i=n.map;return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,(function(s,r,n,h){if("%"==t.charAt(h-1))return s.substring(1);if(!e.length)return s;let a=e[0],l=(r||n).split(","),c=l.shift()||"",u=i[c.toLowerCase()];if(!u)return s;let d=(a=e.shift())[u].apply(a,l),_=c.charAt(0);return _!=_.toLowerCase()&&(d=o(d)),d}))}i.r(e),i.d(e,"mod",(function(){return s})),i.d(e,"clamp",(function(){return r})),i.d(e,"capitalize",(function(){return o})),i.d(e,"format",(function(){return n})),n.map={s:"toString"}},function(t,e,i){"use strict";i.r(e),i.d(e,"fromString",(function(){return o})),i.d(e,"add",(function(){return n})),i.d(e,"add_",(function(){return h})),i.d(e,"multiply",(function(){return a})),i.d(e,"multiply_",(function(){return l})),i.d(e,"interpolate",(function(){return c})),i.d(e,"lerp",(function(){return u})),i.d(e,"interpolateHSL",(function(){return d})),i.d(e,"lerpHSL",(function(){return _})),i.d(e,"randomize",(function(){return f})),i.d(e,"rgb2hsl",(function(){return p})),i.d(e,"hsl2rgb",(function(){return m})),i.d(e,"toRGB",(function(){return b})),i.d(e,"toHex",(function(){return w}));var s=i(1),r=i(0);function o(t){let e,i;if(t in y)e=y[t];else{if("#"==t.charAt(0)){let i=(t.match(/[0-9a-f]/gi)||[]).map(t=>parseInt(t,16));if(3==i.length)e=i.map(t=>17*t);else{for(let t=0;t<3;t++)i[t+1]+=16*i[t],i.splice(t,1);e=i}}else e=(i=t.match(/rgb\(([0-9, ]+)\)/i))?i[1].split(/\s*,\s*/).map(t=>parseInt(t)):[0,0,0];y[t]=e}return e.slice()}function n(t,...e){let i=t.slice();for(let t=0;t<3;t++)for(let s=0;s<e.length;s++)i[t]+=e[s][t];return i}function h(t,...e){for(let i=0;i<3;i++)for(let s=0;s<e.length;s++)t[i]+=e[s][i];return t}function a(t,...e){let i=t.slice();for(let t=0;t<3;t++){for(let s=0;s<e.length;s++)i[t]*=e[s][t]/255;i[t]=Math.round(i[t])}return i}function l(t,...e){for(let i=0;i<3;i++){for(let s=0;s<e.length;s++)t[i]*=e[s][i]/255;t[i]=Math.round(t[i])}return t}function c(t,e,i=.5){let s=t.slice();for(let r=0;r<3;r++)s[r]=Math.round(s[r]+i*(e[r]-t[r]));return s}const u=c;function d(t,e,i=.5){let s=p(t),r=p(e);for(let t=0;t<3;t++)s[t]+=i*(r[t]-s[t]);return m(s)}const _=d;function f(t,e){e instanceof Array||(e=Math.round(r.a.getNormal(0,e)));let i=t.slice();for(let t=0;t<3;t++)i[t]+=e instanceof Array?Math.round(r.a.getNormal(0,e[t])):e;return i}function p(t){let e,i=t[0]/255,s=t[1]/255,r=t[2]/255,o=Math.max(i,s,r),n=Math.min(i,s,r),h=0,a=(o+n)/2;if(o==n)e=0;else{let t=o-n;switch(e=a>.5?t/(2-o-n):t/(o+n),o){case i:h=(s-r)/t+(s<r?6:0);break;case s:h=(r-i)/t+2;break;case r:h=(i-s)/t+4}h/=6}return[h,e,a]}function g(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}function m(t){let e=t[2];if(0==t[1])return[e=Math.round(255*e),e,e];{let i=t[1],s=e<.5?e*(1+i):e+i-e*i,r=2*e-s,o=g(r,s,t[0]+1/3),n=g(r,s,t[0]),h=g(r,s,t[0]-1/3);return[Math.round(255*o),Math.round(255*n),Math.round(255*h)]}}function b(t){return`rgb(${t.map(t=>Object(s.clamp)(t,0,255)).join(",")})`}function w(t){return`#${t.map(t=>Object(s.clamp)(t,0,255).toString(16).padStart(2,"0")).join("")}`}const y={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t,e){this.y=t,this.x=e}id(t){return this.y*t+this.x}pos(t){return[this.y*t,this.x*t]}distanceToExit(t=0,e,i){switch(t%360){case 0:return this.y;case 90:return i-this.x-1;case 180:return e-this.y-1;case 270:return this.x;default:throw new Error("Something went wrong with directions...")}}get top(){return new s(this.y,this.x-1)}get bottom(){return new s(this.y,this.x+1)}get left(){return new s(this.y-1,this.x)}get right(){return new s(this.y+1,this.x)}get adjacent(){return[this.top,this.right,this.bottom,this.left]}get array(){return[this.y,this.x]}isAdjacent(t){return t.isIncludedIn(this.adjacent)}equal(t){return this.x===t.x&&this.y===t.y}isIncludedIn(t){return t.filter(t=>this.equal(t)).length>0}toString(){return`[Y:${this.y}, X:${this.x}]`}exportJSON(){return{y:this.y,x:this.x}}static importJSON(t){return new s(t.y,t.x)}static fromArray(t){return new s(t[0],t[1])}static fromId(t,e){const i=t%e,r=Math.floor(t/e);return new s(i,r)}}e.default=s},function(t,e,i){"use strict";i.d(e,"a",(function(){return s}));class s{getContainer(){return null}setOptions(t){this._options=t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(15);class r{constructor(t,e,i=[" "," "," "," "," "," "," "," "],s="",r="",o="",n=!1,h="tilemap.png",a=0,l=0,c="white",u="black",d=[[0,0],[0,0]]){this.id=t,this.name=e,this.ascii=i,this.group=s,this.description=r,this.link=o,this.active=n,this.tiles=h,this.absorption=a,this.phase=l,this.foregroundColor=c,this.backgroundColor=u,this.matrix=d}get rotationAngle(){return 360/this.ascii.length}toString(){return`${this.name} (Phase: ${this.phase}, Absorption: ${100*this.absorption}%)`}exportJSON(){return{id:this.id,name:this.name,ascii:this.ascii,group:this.group,description:this.description,link:this.link,active:this.active,tiles:this.tiles,absorption:this.absorption,phase:this.phase,foregroundColor:this.foregroundColor,backgroundColor:this.backgroundColor,matrix:this.matrix}}static fromName(t,e=2){if(2===e){const e=s.jsonElements.find(e=>e.name===t);return new r(e.id,e.name,e.ascii,e.group,e.description,e.link,e.active,e.tiles,e.absorption,e.phase,e.foregroundColor,e.backgroundColor,e.matrix)}{const e=s.jsonElements.find(e=>e.namev1===t);return new r(e.id,e.name,e.ascii,e.group,e.description,e.link,e.active,e.tiles,e.absorption,e.phase,e.foregroundColor,e.backgroundColor,e.matrix)}}}e.default=r},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(3));class o extends r.default{constructor(t,e,i=1,s=0,r=[t]){super(t.y,t.x),this.coord=t,this.direction=e,this.intensity=i,this.phase=s,this.path=r}get alive(){return this.intensity>0}get clone(){return new o(this.coord,this.direction,this.intensity,this.phase,this.path)}on(t){return this.coord.equal(t.coord)}next(t=1){for(let e=0;e<t;e++){switch(this.direction%360){case 0:this.coord=this.coord.top;break;case 90:this.coord=this.coord.right;break;case 180:this.coord=this.coord.bottom;break;case 270:this.coord=this.coord.left;break;default:throw Error("Something went wrong with pointers and direction.")}this.path.push(this.coord)}return this}laserPath(t,e=50){let i=[this.clone];const s=[];for(let r=0;r<e;r++)i.forEach(e=>{e.next(),t.includes(e.coord)||(e.intensity=0),t.absorbers.forEach(t=>{e.on(t)&&(e.intensity-=e.intensity*t.element.absorption)}),t.mirrors.forEach(t=>{e.on(t)&&(e.direction=(2*t.rotation-e.direction+360)%360)}),t.beamsplitters.forEach(t=>{if(e.on(t)){e.intensity/=2;const s=(2*t.rotation-e.direction+360)%360;i.push(new o(e.coord,s,e.intensity))}}),t.phaseshifters.forEach(t=>{e.on(t)&&(e.phase=(e.phase+t.element.phase)%1)})}),i.forEach(t=>{t.alive||s.push(t)}),i=i.filter(t=>t.alive);const r=[];return(i=s.concat(i)).forEach(t=>{r.push(t.path)}),[...new Set(r.flat())]}toString(){return`#Pointer @ ${this.coord.toString()} moving ${this.direction}° with ${this.intensity} intensity and ${this.phase} phase shift. PATH: ${this.path.map(t=>t.toString())}`}exportJSON(){const t=this.path.map(t=>t.exportJSON());return{x:this.coord.x,y:this.coord.y,direction:this.direction,intensity:this.intensity,phase:this.phase,path:t}}static importJSON(t){const e=t.path.map(t=>r.default.importJSON(t)),i=new r.default(t.y,t.x);return new o(i,t.direction,t.intensity,t.phase,e)}static manyToString(t){let e=`${t.length} active particles...\n`;return t.forEach(t=>{e+=`- ${t.toString()}\n`}),e}static manyToCoords(t){const e=[];return t.map(t=>{e.push(t.coord)}),e}}e.default=o},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return n}));var s=i(4),r=i(2);function o(t){let e=r.fromString(t);return 36*Math.floor(e[0]*(6/256))+6*Math.floor(e[1]*(6/256))+1*Math.floor(e[2]*(6/256))+16}class n extends s.a{constructor(){super(),this._offset=[0,0],this._cursor=[-1,-1],this._lastColor=""}schedule(t){setTimeout(t,1e3/60)}setOptions(t){super.setOptions(t);let e=[t.width,t.height],i=this.computeSize();this._offset=i.map((t,i)=>Math.floor((t-e[i])/2))}clear(){t.stdout.write(`[0;48;5;${o(this._options.bg)}m[2J`)}draw(e,i){let[s,r,n,h,a]=e,l=this._offset[0]+s,c=this._offset[1]+r,u=this.computeSize();if(l<0||l>=u[0])return;if(c<0||c>=u[1])return;if(l===this._cursor[0]&&c===this._cursor[1]||(t.stdout.write(function(t,e){return`[${e+1};${t+1}H`}(l,c)),this._cursor[0]=l,this._cursor[1]=c),i&&(n||(n=" ")),!n)return;let d=function(t,e){return`[0;38;5;${o(t)};48;5;${o(e)}m`}(h,a);d!==this._lastColor&&(t.stdout.write(d),this._lastColor=d);let _=[].concat(n);t.stdout.write(_[0]),this._cursor[0]++,this._cursor[0]>=u[0]&&(this._cursor[0]=0,this._cursor[1]++)}computeFontSize(){throw new Error("Terminal backend has no notion of font size")}eventToPosition(t,e){return[t,e]}computeSize(){return[t.stdout.columns,t.stdout.rows]}}}).call(this,i(18))},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(3)),o=s(i(5)),n=s(i(6));class h extends r.default{constructor(t,e,i=0,s=!1){super(t.x,t.y),this.coord=t,this.element=e,this.rotation=i,this.frozen=s}get ascii(){return this.element.ascii[this.rotation/this.element.rotationAngle]}get foregroundColor(){return this.element.foregroundColor}get backgroundColor(){return this.element.backgroundColor}rotate(t=this.element.rotationAngle){if(this.frozen)console.log("This cell is frozen, you can't rotate it.");else{if(Math.abs(t)%this.element.rotationAngle!=0)throw new Error("Error in the supplied angle compared to the element rotation angle.");this.rotation=((this.rotation+t)%360+360)%360}}toggleFreeze(){this.frozen=!this.frozen}fire(){if("laser"===this.element.name)return new n.default(this.coord,this.rotation,1,0);throw new Error("Only lasers can fire a particle.")}draw(t){t.draw(this)}toString(){return`Cell @ ${this.coord.toString()} is ${this.frozen?"frozen":"unfrozen"} ${this.element.toString()} rotated ${this.rotation}°`}exportCellJSON(){return{x:this.coord.x,y:this.coord.y,element:this.element.name,rotation:this.rotation,frozen:this.frozen}}static importJSON(t){const e=new r.default(t.y,t.x),i=o.default.fromName(t.element);return new h(e,i,t.rotation,t.frozen)}}e.default=h},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(3));e.default=class extends r.default{constructor(t,e,i=0){super(t.y,t.x),this.coord=t,this.threshold=e,this.value=i}get completed(){return this.value>=this.threshold}get percentage(){return this.value/this.threshold*100}toString(){return`{#Goal ${this.completed?"completed ":" "}@ ${this.coord.toString()} is ${this.value} / ${this.threshold}} (${this.percentage}%)`}static manyToString(t){let e=`${t.length} active goals...\n`;return t.forEach(t=>{e+=`- ${t.toString()}\n`}),e}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{static waitForInput(t){return new Promise(e=>{void 0!==s.processInputCallback&&s.stopProcessing(),s.resolve=e,s.processInputCallback=e=>s.processInput(e,t),window.addEventListener("keydown",s.processInputCallback)})}static processInput(t,e){e(t)&&s.stopProcessing()}static stopProcessing(){window.removeEventListener("keydown",s.processInputCallback),s.processInputCallback=()=>{},s.resolve()}}e.default=s},function(t,e,i){"use strict";i.r(e);var s={};i.r(s),i.d(s,"TYPE_TEXT",(function(){return y})),i.d(s,"TYPE_NEWLINE",(function(){return v})),i.d(s,"TYPE_FG",(function(){return x})),i.d(s,"TYPE_BG",(function(){return S})),i.d(s,"measure",(function(){return E})),i.d(s,"tokenize",(function(){return k}));var r=i(0),o=i(4);class n extends o.a{constructor(){super(),this._ctx=document.createElement("canvas").getContext("2d")}schedule(t){requestAnimationFrame(t)}getContainer(){return this._ctx.canvas}setOptions(t){super.setOptions(t);const e=`${t.fontStyle?`${t.fontStyle} `:""} ${t.fontSize}px ${t.fontFamily}`;this._ctx.font=e,this._updateSize(),this._ctx.font=e,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}clear(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}eventToPosition(t,e){let i=this._ctx.canvas,s=i.getBoundingClientRect();return t-=s.left,e-=s.top,t*=i.width/s.width,e*=i.height/s.height,t<0||e<0||t>=i.width||e>=i.height?[-1,-1]:this._normalizedEventToPosition(t,e)}}var h=i(1);class a extends n{constructor(){super(),this._spacingX=0,this._spacingY=0,this._hexSize=0}draw(t,e){let[i,s,r,o,n]=t,h=[(i+1)*this._spacingX,s*this._spacingY+this._hexSize];if(this._options.transpose&&h.reverse(),e&&(this._ctx.fillStyle=n,this._fill(h[0],h[1])),!r)return;this._ctx.fillStyle=o;let a=[].concat(r);for(let t=0;t<a.length;t++)this._ctx.fillText(a[t],h[0],Math.ceil(h[1]))}computeSize(t,e){return this._options.transpose&&(t+=e,t-=e=t-e),[Math.floor(t/this._spacingX)-1,Math.floor((e-2*this._hexSize)/this._spacingY+1)]}computeFontSize(t,e){this._options.transpose&&(t+=e,t-=e=t-e);let i=2*t/((this._options.width+1)*Math.sqrt(3))-1,s=e/(2+1.5*(this._options.height-1)),r=Math.min(i,s),o=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let n=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=o;let h=n/100,a=2*(r=Math.floor(r)+1)/(this._options.spacing*(1+h/Math.sqrt(3)));return Math.ceil(a)-1}_normalizedEventToPosition(t,e){let i;this._options.transpose?(t+=e,t-=e=t-e,i=this._ctx.canvas.width):i=this._ctx.canvas.height;let s=i/this._options.height;return e=Math.floor(e/s),Object(h.mod)(e,2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]}_fill(t,e){let i=this._hexSize,s=this._options.border;const r=this._ctx;r.beginPath(),this._options.transpose?(r.moveTo(t-i+s,e),r.lineTo(t-i/2+s,e+this._spacingX-s),r.lineTo(t+i/2-s,e+this._spacingX-s),r.lineTo(t+i-s,e),r.lineTo(t+i/2-s,e-this._spacingX+s),r.lineTo(t-i/2+s,e-this._spacingX+s),r.lineTo(t-i+s,e)):(r.moveTo(t,e-i+s),r.lineTo(t+this._spacingX-s,e-i/2+s),r.lineTo(t+this._spacingX-s,e+i/2-s),r.lineTo(t,e+i-s),r.lineTo(t-this._spacingX+s,e+i/2-s),r.lineTo(t-this._spacingX+s,e-i/2+s),r.lineTo(t,e-i+s)),r.fill()}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);let i,s;this._hexSize=Math.floor(t.spacing*(t.fontSize+e/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,t.transpose?(i="height",s="width"):(i="width",s="height"),this._ctx.canvas[i]=Math.ceil((t.width+1)*this._spacingX),this._ctx.canvas[s]=Math.ceil((t.height-1)*this._spacingY+2*this._hexSize)}}class l extends n{constructor(){super(),this._spacingX=0,this._spacingY=0,this._canvasCache={}}setOptions(t){super.setOptions(t),this._canvasCache={}}draw(t,e){l.cache?this._drawWithCache(t):this._drawNoCache(t,e)}_drawWithCache(t){let e,[i,s,r,o,n]=t,h=""+r+o+n;if(h in this._canvasCache)e=this._canvasCache[h];else{let t=this._options.border,i=(e=document.createElement("canvas")).getContext("2d");if(e.width=this._spacingX,e.height=this._spacingY,i.fillStyle=n,i.fillRect(t,t,e.width-t,e.height-t),r){i.fillStyle=o,i.font=this._ctx.font,i.textAlign="center",i.textBaseline="middle";let t=[].concat(r);for(let e=0;e<t.length;e++)i.fillText(t[e],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[h]=e}this._ctx.drawImage(e,i*this._spacingX,s*this._spacingY)}_drawNoCache(t,e){let[i,s,r,o,n]=t;if(e){let t=this._options.border;this._ctx.fillStyle=n,this._ctx.fillRect(i*this._spacingX+t,s*this._spacingY+t,this._spacingX-t,this._spacingY-t)}if(!r)return;this._ctx.fillStyle=o;let h=[].concat(r);for(let t=0;t<h.length;t++)this._ctx.fillText(h[t],(i+.5)*this._spacingX,Math.ceil((s+.5)*this._spacingY))}computeSize(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}computeFontSize(t,e){let i=Math.floor(t/this._options.width),s=Math.floor(e/this._options.height),r=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=r;let n=o/100*s/i;return n>1&&(s=Math.floor(s/n)),Math.floor(s/this._options.spacing)}_normalizedEventToPosition(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),t.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=t.width*this._spacingX,this._ctx.canvas.height=t.height*this._spacingY}}l.cache=!1;class c extends n{constructor(){super(),this._colorCanvas=document.createElement("canvas")}draw(t,e){let[i,s,r,o,n]=t,h=this._options.tileWidth,a=this._options.tileHeight;if(e&&(this._options.tileColorize?this._ctx.clearRect(i*h,s*a,h,a):(this._ctx.fillStyle=n,this._ctx.fillRect(i*h,s*a,h,a))),!r)return;let l=[].concat(r),c=[].concat(o),u=[].concat(n);for(let t=0;t<l.length;t++){let e=this._options.tileMap[l[t]];if(!e)throw new Error(`Char "${l[t]}" not found in tileMap`);if(this._options.tileColorize){let r=this._colorCanvas,o=r.getContext("2d");o.globalCompositeOperation="source-over",o.clearRect(0,0,h,a);let n=c[t],l=u[t];o.drawImage(this._options.tileSet,e[0],e[1],h,a,0,0,h,a),"transparent"!=n&&(o.fillStyle=n,o.globalCompositeOperation="source-atop",o.fillRect(0,0,h,a)),"transparent"!=l&&(o.fillStyle=l,o.globalCompositeOperation="destination-over",o.fillRect(0,0,h,a)),this._ctx.drawImage(r,i*h,s*a,h,a)}else this._ctx.drawImage(this._options.tileSet,e[0],e[1],h,a,i*h,s*a,h,a)}}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._options;this._ctx.canvas.width=t.width*t.tileWidth,this._ctx.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight}}var u=i(2);class d extends o.a{static isSupported(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}constructor(){super(),this._uniforms={};try{this._gl=this._initWebGL()}catch(t){alert(t.message)}}schedule(t){requestAnimationFrame(t)}getContainer(){return this._gl.canvas}setOptions(t){super.setOptions(t),this._updateSize();let e=this._options.tileSet;e&&"complete"in e&&!e.complete?e.addEventListener("load",()=>this._updateTexture(e)):this._updateTexture(e)}draw(t,e){const i=this._gl,s=this._options;let[r,o,n,h,a]=t,l=i.canvas.height-(o+1)*s.tileHeight;if(i.scissor(r*s.tileWidth,l,s.tileWidth,s.tileHeight),e&&(s.tileColorize?i.clearColor(0,0,0,0):i.clearColor(...m(a)),i.clear(i.COLOR_BUFFER_BIT)),!n)return;let c=[].concat(n),u=[].concat(a),d=[].concat(h);i.uniform2fv(this._uniforms.targetPosRel,[r,o]);for(let t=0;t<c.length;t++){let e=this._options.tileMap[c[t]];if(!e)throw new Error(`Char "${c[t]}" not found in tileMap`);i.uniform1f(this._uniforms.colorize,s.tileColorize?1:0),i.uniform2fv(this._uniforms.tilesetPosAbs,e),s.tileColorize&&(i.uniform4fv(this._uniforms.tint,m(d[t])),i.uniform4fv(this._uniforms.bg,m(u[t]))),i.drawArrays(i.TRIANGLE_STRIP,0,4)}}clear(){const t=this._gl;t.clearColor(...m(this._options.bg)),t.scissor(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT)}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}eventToPosition(t,e){let i=this._gl.canvas,s=i.getBoundingClientRect();return t-=s.left,e-=s.top,t*=i.width/s.width,e*=i.height/s.height,t<0||e<0||t>=i.width||e>=i.height?[-1,-1]:this._normalizedEventToPosition(t,e)}_initWebGL(){let t=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=t;let e=function(t,e,i){const s=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(s,e),t.compileShader(s),!t.getShaderParameter(s,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(s)||"");const r=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"");const o=t.createProgram();if(t.attachShader(o,s),t.attachShader(o,r),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(o)||"");return o}(t,f,p);return t.useProgram(e),function(t){const e=new Float32Array([0,0,1,0,0,1,1,1]),i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0)}(t),_.forEach(i=>this._uniforms[i]=t.getUniformLocation(e,i)),this._program=e,t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),t.enable(t.SCISSOR_TEST),t}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._gl,e=this._options,i=[e.width*e.tileWidth,e.height*e.tileHeight];t.canvas.width=i[0],t.canvas.height=i[1],t.viewport(0,0,i[0],i[1]),t.uniform2fv(this._uniforms.tileSize,[e.tileWidth,e.tileHeight]),t.uniform2fv(this._uniforms.targetSize,i)}_updateTexture(t){!function(t,e){let i=t.createTexture();t.bindTexture(t.TEXTURE_2D,i),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,0),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e)}(this._gl,t)}}const _=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],f="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),p="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();let g={};function m(t){if(!(t in g)){let e;if("transparent"==t)e=[0,0,0,0];else if(t.indexOf("rgba")>-1){e=(t.match(/[\d.]+/g)||[]).map(Number);for(let t=0;t<3;t++)e[t]=e[t]/255}else(e=u.fromString(t).map(t=>t/255)).push(1);g[t]=e}return g[t]}var b=i(7);const w=/%([bc]){([^}]*)}/g,y=0,v=1,x=2,S=3;function E(t,e){let i={width:0,height:1},s=k(t,e),r=0;for(let t=0;t<s.length;t++){let e=s[t];switch(e.type){case y:r+=e.value.length;break;case v:i.height++,i.width=Math.max(i.width,r),r=0}}return i.width=Math.max(i.width,r),i}function k(t,e){let i=[],s=0;t.replace(w,(function(e,r,o,n){let h=t.substring(s,n);return h.length&&i.push({type:y,value:h}),i.push({type:"c"==r?x:S,value:o.trim()}),s=n+e.length,""}));let r=t.substring(s);return r.length&&i.push({type:y,value:r}),function(t,e){e||(e=1/0);let i=0,s=0,r=-1;for(;i<t.length;){let o=t[i];if(o.type==v&&(s=0,r=-1),o.type!=y){i++;continue}for(;0==s&&" "==o.value.charAt(0);)o.value=o.value.substring(1);let n=o.value.indexOf("\n");if(-1!=n){o.value=C(t,i,n,!0);let e=o.value.split("");for(;e.length&&" "==e[e.length-1];)e.pop();o.value=e.join("")}if(o.value.length){if(s+o.value.length>e){let n=-1;for(;;){let t=o.value.indexOf(" ",n+1);if(-1==t)break;if(s+t>e)break;n=t}if(-1!=n)o.value=C(t,i,n,!0);else if(-1!=r){let e=t[r],s=e.value.lastIndexOf(" ");e.value=C(t,r,s,!0),i=r}else o.value=C(t,i,e-s,!1)}else s+=o.value.length,-1!=o.value.indexOf(" ")&&(r=i);i++}else t.splice(i,1)}t.push({type:v});let o=null;for(let e=0;e<t.length;e++){let i=t[e];switch(i.type){case y:o=i;break;case v:if(o){let t=o.value.split("");for(;t.length&&" "==t[t.length-1];)t.pop();o.value=t.join("")}o=null}}return t.pop(),t}(i,e)}function C(t,e,i,s){let r={type:v},o={type:y,value:t[e].value.substring(i+(s?1:0))};return t.splice(e+1,0,r,o),t[e].value.substring(0,i)}let M=80,T=25;const K={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},V={VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95},O={hex:a,rect:l,tile:c,"tile-gl":d,term:b.a},P={width:M,height:T,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1};class A{constructor(t={}){this._data={},this._dirty=!1,this._options={},t=Object.assign({},P,t),this.setOptions(t),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}DEBUG(t,e,i){let s=[this._options.bg,this._options.fg];this.draw(t,e,null,null,s[i%s.length])}clear(){this._data={},this._dirty=!0}setOptions(t){if(Object.assign(this._options,t),t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){if(t.layout){let e=O[t.layout];this._backend=new e}this._backend.setOptions(this._options),this._dirty=!0}return this}getOptions(){return this._options}getContainer(){return this._backend.getContainer()}computeSize(t,e){return this._backend.computeSize(t,e)}computeFontSize(t,e){return this._backend.computeFontSize(t,e)}computeTileSize(t,e){return[Math.floor(t/this._options.width),Math.floor(e/this._options.height)]}eventToPosition(t){let e,i;return"touches"in t?(e=t.touches[0].clientX,i=t.touches[0].clientY):(e=t.clientX,i=t.clientY),this._backend.eventToPosition(e,i)}draw(t,e,i,s,r){s||(s=this._options.fg),r||(r=this._options.bg);let o=`${t},${e}`;this._data[o]=[t,e,i,s,r],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[o]=!0)}drawText(t,e,i,s){let r=null,o=null,n=t,h=e,a=1;s||(s=this._options.width-t);let l=k(i,s);for(;l.length;){let e=l.shift();switch(e.type){case y:let i=!1,s=!1,l=!1,c=!1;for(let t=0;t<e.value.length;t++){let a=e.value.charCodeAt(t),u=e.value.charAt(t);l=a>65280&&a<65377||a>65500&&a<65512||a>65518,i=32==u.charCodeAt(0)||12288==u.charCodeAt(0),!c||l||i||n++,l&&!s&&n++,this.draw(n++,h,u,r,o),s=i,c=l}break;case x:r=e.value||null;break;case S:o=e.value||null;break;case v:n=t,h++,a++}}return a}_tick(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty){this._backend.clear();for(let t in this._data)this._draw(t,!1)}else for(let t in this._dirty)this._draw(t,!0);this._dirty=!1}}_draw(t,e){let i=this._data[t];i[4]!=this._options.bg&&(e=!0),this._backend.draw(i,e)}}A.Rect=l,A.Hex=a,A.Tile=c,A.TileGL=d,A.Term=b.a;class R{constructor(t){this._options={words:!1,order:3,prior:.001},Object.assign(this._options,t),this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(let t=0;t<this._options.order;t++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}}clear(){this._data={},this._priorValues={}}generate(){let t=[this._sample(this._prefix)];for(;t[t.length-1]!=this._boundary;)t.push(this._sample(t));return this._join(t.slice(0,-1))}observe(t){let e=this._split(t);for(let t=0;t<e.length;t++)this._priorValues[e[t]]=this._options.prior;e=this._prefix.concat(e).concat(this._suffix);for(let t=this._options.order;t<e.length;t++){let i=e.slice(t-this._options.order,t),s=e[t];for(let t=0;t<i.length;t++){let e=i.slice(t);this._observeEvent(e,s)}}}getStats(){let t=[],e=Object.keys(this._priorValues).length;e--,t.push("distinct samples: "+e);let i=Object.keys(this._data).length,s=0;for(let t in this._data)s+=Object.keys(this._data[t]).length;return t.push("dictionary size (contexts): "+i),t.push("dictionary size (events): "+s),t.join(", ")}_split(t){return t.split(this._options.words?/\s+/:"")}_join(t){return t.join(this._options.words?" ":"")}_observeEvent(t,e){let i=this._join(t);i in this._data||(this._data[i]={});let s=this._data[i];e in s||(s[e]=0),s[e]++}_sample(t){t=this._backoff(t);let e=this._join(t),i=this._data[e],s={};if(this._options.prior){for(let t in this._priorValues)s[t]=this._priorValues[t];for(let t in i)s[t]+=i[t]}else s=i;return r.a.getWeightedValue(s)}_backoff(t){for(t.length>this._options.order?t=t.slice(-this._options.order):t.length<this._options.order&&(t=this._prefix.slice(0,this._options.order-t.length).concat(t));!(this._join(t)in this._data)&&t.length>0;)t=t.slice(1);return t}}class L{constructor(){this._time=0,this._events=[],this._eventTimes=[]}getTime(){return this._time}clear(){return this._events=[],this._eventTimes=[],this}add(t,e){let i=this._events.length;for(let t=0;t<this._eventTimes.length;t++)if(this._eventTimes[t]>e){i=t;break}this._events.splice(i,0,t),this._eventTimes.splice(i,0,e)}get(){if(!this._events.length)return null;let t=this._eventTimes.splice(0,1)[0];if(t>0){this._time+=t;for(let e=0;e<this._eventTimes.length;e++)this._eventTimes[e]-=t}return this._events.splice(0,1)[0]}getEventTime(t){let e=this._events.indexOf(t);if(-1!=e)return this._eventTimes[e]}remove(t){let e=this._events.indexOf(t);return-1!=e&&(this._remove(e),!0)}_remove(t){this._events.splice(t,1),this._eventTimes.splice(t,1)}}class I{constructor(){this._queue=new L,this._repeat=[],this._current=null}getTime(){return this._queue.getTime()}add(t,e){return e&&this._repeat.push(t),this}getTimeOf(t){return this._queue.getEventTime(t)}clear(){return this._queue.clear(),this._repeat=[],this._current=null,this}remove(t){let e=this._queue.remove(t),i=this._repeat.indexOf(t);return-1!=i&&this._repeat.splice(i,1),this._current==t&&(this._current=null),e}next(){return this._current=this._queue.get(),this._current}}var N={Simple:class extends I{add(t,e){return this._queue.add(t,0),super.add(t,e)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,0),super.next()}},Speed:class extends I{add(t,e,i){return this._queue.add(t,void 0!==i?i:1/t.getSpeed()),super.add(t,e)}next(){return this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,1/this._current.getSpeed()),super.next()}},Action:class extends I{constructor(){super(),this._defaultDuration=1,this._duration=this._defaultDuration}add(t,e,i){return this._queue.add(t,i||this._defaultDuration),super.add(t,e)}clear(){return this._duration=this._defaultDuration,super.clear()}remove(t){return t==this._current&&(this._duration=this._defaultDuration),super.remove(t)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),super.next()}setDuration(t){return this._current&&(this._duration=t),this}}};class z{constructor(t,e={}){this._lightPasses=t,this._options=Object.assign({topology:8},e)}_getCircle(t,e,i){let s,r,o,n=[];switch(this._options.topology){case 4:r=1,o=[0,1],s=[K[8][7],K[8][1],K[8][3],K[8][5]];break;case 6:s=K[6],r=1,o=[-1,1];break;case 8:s=K[4],r=2,o=[-1,1];break;default:throw new Error("Incorrect topology for FOV computation")}let h=t+o[0]*i,a=e+o[1]*i;for(let t=0;t<s.length;t++)for(let e=0;e<i*r;e++)n.push([h,a]),h+=s[t][0],a+=s[t][1];return n}}const U=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]];var D={DiscreteShadowcasting:class extends z{compute(t,e,i,s){if(s(t,e,0,1),!this._lightPasses(t,e))return;let r,o,n,h,a,l=[];for(let c=1;c<=i;c++){let i=this._getCircle(t,e,c),u=360/i.length;for(let t=0;t<i.length;t++)if(n=i[t][0],h=i[t][1],o=(r=u*(t-.5))+u,a=!this._lightPasses(n,h),this._visibleCoords(Math.floor(r),Math.ceil(o),a,l)&&s(n,h,c,1),2==l.length&&0==l[0]&&360==l[1])return}}_visibleCoords(t,e,i,s){if(t<0){let r=this._visibleCoords(0,e,i,s),o=this._visibleCoords(360+t,360,i,s);return r||o}let r=0;for(;r<s.length&&s[r]<t;)r++;if(r==s.length)return i&&s.push(t,e),!0;let o=0;if(r%2){for(;r<s.length&&s[r]<e;)r++,o++;return 0!=o&&(i&&(o%2?s.splice(r-o,o,e):s.splice(r-o,o)),!0)}for(;r<s.length&&s[r]<e;)r++,o++;return(t!=s[r-o]||1!=o)&&(i&&(o%2?s.splice(r-o,o,t):s.splice(r-o,o,t,e)),!0)}},PreciseShadowcasting:class extends z{compute(t,e,i,s){if(s(t,e,0,1),!this._lightPasses(t,e))return;let r,o,n,h,a,l,c=[];for(let u=1;u<=i;u++){let i=this._getCircle(t,e,u),d=i.length;for(let t=0;t<d;t++)if(r=i[t][0],o=i[t][1],h=[t?2*t-1:2*d-1,2*d],a=[2*t+1,2*d],n=!this._lightPasses(r,o),(l=this._checkVisibility(h,a,n,c))&&s(r,o,u,l),2==c.length&&0==c[0][0]&&c[1][0]==c[1][1])return}}_checkVisibility(t,e,i,s){if(t[0]>e[0]){return(this._checkVisibility(t,[t[1],t[1]],i,s)+this._checkVisibility([0,1],e,i,s))/2}let r=0,o=!1;for(;r<s.length;){let e=s[r],i=e[0]*t[1]-t[0]*e[1];if(i>=0){0!=i||r%2||(o=!0);break}r++}let n=s.length,h=!1;for(;n--;){let t=s[n],i=e[0]*t[1]-t[0]*e[1];if(i>=0){0==i&&n%2&&(h=!0);break}}let a,l=!0;if(r==n&&(o||h)?l=!1:o&&h&&r+1==n&&n%2?l=!1:r>n&&r%2&&(l=!1),!l)return 0;let c=n-r+1;if(c%2)if(r%2){let t=s[r];a=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),i&&s.splice(r,c,e)}else{let e=s[n];a=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),i&&s.splice(r,c,t)}else{if(!(r%2))return i&&s.splice(r,c,t,e),1;{let t=s[r],e=s[n];a=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),i&&s.splice(r,c)}}return a/((e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]))}},RecursiveShadowcasting:class extends z{compute(t,e,i,s){s(t,e,0,1);for(let r=0;r<U.length;r++)this._renderOctant(t,e,U[r],i,s)}compute180(t,e,i,s,r){r(t,e,0,1);let o=(s-1+8)%8,n=(s-2+8)%8,h=(s+1+8)%8;this._renderOctant(t,e,U[n],i,r),this._renderOctant(t,e,U[o],i,r),this._renderOctant(t,e,U[s],i,r),this._renderOctant(t,e,U[h],i,r)}compute90(t,e,i,s,r){r(t,e,0,1);let o=(s-1+8)%8;this._renderOctant(t,e,U[s],i,r),this._renderOctant(t,e,U[o],i,r)}_renderOctant(t,e,i,s,r){this._castVisibility(t,e,1,1,0,s+1,i[0],i[1],i[2],i[3],r)}_castVisibility(t,e,i,s,r,o,n,h,a,l,c){if(!(s<r))for(let u=i;u<=o;u++){let i=-u-1,d=-u,_=!1,f=0;for(;i<=0;){let p=t+(i+=1)*n+d*h,g=e+i*a+d*l,m=(i-.5)/(d+.5),b=(i+.5)/(d-.5);if(!(b>s)){if(m<r)break;if(i*i+d*d<o*o&&c(p,g,u,1),_){if(!this._lightPasses(p,g)){f=b;continue}_=!1,s=f}else!this._lightPasses(p,g)&&u<o&&(_=!0,this._castVisibility(t,e,u+1,s,m,o,n,h,a,l,c),f=b)}}if(_)break}}}};class W{constructor(t=M,e=T){this._width=t,this._height=e}_fillMap(t){let e=[];for(let i=0;i<this._width;i++){e.push([]);for(let s=0;s<this._height;s++)e[i].push(t)}return e}}class F extends W{constructor(t,e){super(t,e),this._rooms=[],this._corridors=[]}getRooms(){return this._rooms}getCorridors(){return this._corridors}}class Y{}class j extends Y{constructor(t,e,i,s,r,o){super(),this._x1=t,this._y1=e,this._x2=i,this._y2=s,this._doors={},void 0!==r&&void 0!==o&&this.addDoor(r,o)}static createRandomAt(t,e,i,s,o){let n=o.roomWidth[0],h=o.roomWidth[1],a=r.a.getUniformInt(n,h);n=o.roomHeight[0],h=o.roomHeight[1];let l=r.a.getUniformInt(n,h);if(1==i){let i=e-Math.floor(r.a.getUniform()*l);return new this(t+1,i,t+a,i+l-1,t,e)}if(-1==i){let i=e-Math.floor(r.a.getUniform()*l);return new this(t-a,i,t-1,i+l-1,t,e)}if(1==s){let i=t-Math.floor(r.a.getUniform()*a);return new this(i,e+1,i+a-1,e+l,t,e)}if(-1==s){let i=t-Math.floor(r.a.getUniform()*a);return new this(i,e-l,i+a-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")}static createRandomCenter(t,e,i){let s=i.roomWidth[0],o=i.roomWidth[1],n=r.a.getUniformInt(s,o);s=i.roomHeight[0],o=i.roomHeight[1];let h=r.a.getUniformInt(s,o),a=t-Math.floor(r.a.getUniform()*n),l=e-Math.floor(r.a.getUniform()*h);return new this(a,l,a+n-1,l+h-1)}static createRandom(t,e,i){let s=i.roomWidth[0],o=i.roomWidth[1],n=r.a.getUniformInt(s,o);s=i.roomHeight[0],o=i.roomHeight[1];let h=r.a.getUniformInt(s,o),a=t-n-1,l=e-h-1,c=1+Math.floor(r.a.getUniform()*a),u=1+Math.floor(r.a.getUniform()*l);return new this(c,u,c+n-1,u+h-1)}addDoor(t,e){return this._doors[t+","+e]=1,this}getDoors(t){for(let e in this._doors){let i=e.split(",");t(parseInt(i[0]),parseInt(i[1]))}return this}clearDoors(){return this._doors={},this}addDoors(t){let e=this._x1-1,i=this._x2+1,s=this._y1-1,r=this._y2+1;for(let o=e;o<=i;o++)for(let n=s;n<=r;n++)o!=e&&o!=i&&n!=s&&n!=r||t(o,n)||this.addDoor(o,n);return this}debug(){console.log("room",this._x1,this._y1,this._x2,this._y2)}isValid(t,e){let i=this._x1-1,s=this._x2+1,r=this._y1-1,o=this._y2+1;for(let n=i;n<=s;n++)for(let h=r;h<=o;h++)if(n==i||n==s||h==r||h==o){if(!t(n,h))return!1}else if(!e(n,h))return!1;return!0}create(t){let e=this._x1-1,i=this._x2+1,s=this._y1-1,r=this._y2+1,o=0;for(let n=e;n<=i;n++)for(let h=s;h<=r;h++)t(n,h,o=n+","+h in this._doors?2:n==e||n==i||h==s||h==r?1:0)}getCenter(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}getLeft(){return this._x1}getRight(){return this._x2}getTop(){return this._y1}getBottom(){return this._y2}}class X extends Y{constructor(t,e,i,s){super(),this._startX=t,this._startY=e,this._endX=i,this._endY=s,this._endsWithAWall=!0}static createRandomAt(t,e,i,s,o){let n=o.corridorLength[0],h=o.corridorLength[1],a=r.a.getUniformInt(n,h);return new this(t,e,t+i*a,e+s*a)}debug(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}isValid(t,e){let i=this._startX,s=this._startY,r=this._endX-i,o=this._endY-s,n=1+Math.max(Math.abs(r),Math.abs(o));r&&(r/=Math.abs(r)),o&&(o/=Math.abs(o));let h=o,a=-r,l=!0;for(let c=0;c<n;c++){let u=i+c*r,d=s+c*o;if(e(u,d)||(l=!1),t(u+h,d+a)||(l=!1),t(u-h,d-a)||(l=!1),!l){n=c,this._endX=u-r,this._endY=d-o;break}}if(0==n)return!1;if(1==n&&t(this._endX+r,this._endY+o))return!1;let c=!t(this._endX+r+h,this._endY+o+a),u=!t(this._endX+r-h,this._endY+o-a);return this._endsWithAWall=t(this._endX+r,this._endY+o),!c&&!u||!this._endsWithAWall}create(t){let e=this._startX,i=this._startY,s=this._endX-e,r=this._endY-i,o=1+Math.max(Math.abs(s),Math.abs(r));s&&(s/=Math.abs(s)),r&&(r/=Math.abs(r));for(let n=0;n<o;n++){t(e+n*s,i+n*r,0)}return!0}createPriorityWalls(t){if(!this._endsWithAWall)return;let e=this._startX,i=this._startY,s=this._endX-e,r=this._endY-i;s&&(s/=Math.abs(s)),r&&(r/=Math.abs(r));let o=r,n=-s;t(this._endX+s,this._endY+r),t(this._endX+o,this._endY+n),t(this._endX-o,this._endY-n)}}const H={room:j,corridor:X};function B(t,e,i){i[e[t+1]]=i[t],e[i[t]]=e[t+1],i[t]=t+1,e[t+1]=t}function $(t,e,i){i[e[t]]=i[t],e[i[t]]=e[t],i[t]=t,e[t]=t}var G={Arena:class extends W{create(t){let e=this._width-1,i=this._height-1;for(let s=0;s<=e;s++)for(let r=0;r<=i;r++){t(s,r,s&&r&&s<e&&r<i?0:1)}return this}},Uniform:class extends F{constructor(t,e,i){super(t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(this._options,i),this._map=[],this._dug=0,this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)}create(t){let e=Date.now();for(;;){if(Date.now()-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,this._map[e][i]);return this}_generateRooms(){let t,e=this._width-2,i=this._height-2;do{if(t=this._generateRoom(),this._dug/(e*i)>this._options.roomDugPercentage)break}while(t)}_generateRoom(){let t=0;for(;t<this._roomAttempts;){t++;let e=j.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null}_generateCorridors(){let t=0;for(;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(let t=0;t<this._rooms.length;t++){let e=this._rooms[t];e.clearDoors(),e.create(this._digCallback)}for(this._unconnected=r.a.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){let t=r.a.getItem(this._connected);if(!t)break;let e=this._closestRoom(this._unconnected,t);if(!e)break;let i=this._closestRoom(this._connected,e);if(!i)break;if(!this._connectRooms(e,i))break;if(!this._unconnected.length)return!0}}return!1}_closestRoom(t,e){let i=1/0,s=e.getCenter(),r=null;for(let e=0;e<t.length;e++){let o=t[e],n=o.getCenter(),h=n[0]-s[0],a=n[1]-s[1],l=h*h+a*a;l<i&&(i=l,r=o)}return r}_connectRooms(t,e){let i,s,r,o,n,h,a,l=t.getCenter(),c=e.getCenter(),u=c[0]-l[0],d=c[1]-l[1];if(Math.abs(u)<Math.abs(d)?(o=((r=d>0?2:0)+2)%4,n=e.getLeft(),h=e.getRight(),a=0):(o=((r=u>0?1:3)+2)%4,n=e.getTop(),h=e.getBottom(),a=1),!(i=this._placeInWall(t,r)))return!1;if(i[a]>=n&&i[a]<=h){s=i.slice();let t=0;switch(o){case 0:t=e.getTop()-1;break;case 1:t=e.getRight()+1;break;case 2:t=e.getBottom()+1;break;case 3:t=e.getLeft()-1}s[(a+1)%2]=t,this._digLine([i,s])}else if(i[a]<n-1||i[a]>h+1){let t=i[a]-c[a],r=0;switch(o){case 0:case 1:r=t<0?3:1;break;case 2:case 3:r=t<0?1:3}if(o=(o+r)%4,!(s=this._placeInWall(e,o)))return!1;let n=[0,0];n[a]=i[a];let h=(a+1)%2;n[h]=s[h],this._digLine([i,n,s])}else{let t=(a+1)%2;if(!(s=this._placeInWall(e,o)))return!1;let r=Math.round((s[t]+i[t])/2),n=[0,0],h=[0,0];n[a]=i[a],n[t]=r,h[a]=s[a],h[t]=r,this._digLine([i,n,h,s])}return t.addDoor(i[0],i[1]),e.addDoor(s[0],s[1]),-1!=(a=this._unconnected.indexOf(t))&&(this._unconnected.splice(a,1),this._connected.push(t)),-1!=(a=this._unconnected.indexOf(e))&&(this._unconnected.splice(a,1),this._connected.push(e)),!0}_placeInWall(t,e){let i=[0,0],s=[0,0],o=0;switch(e){case 0:s=[1,0],i=[t.getLeft(),t.getTop()-1],o=t.getRight()-t.getLeft()+1;break;case 1:s=[0,1],i=[t.getRight()+1,t.getTop()],o=t.getBottom()-t.getTop()+1;break;case 2:s=[1,0],i=[t.getLeft(),t.getBottom()+1],o=t.getRight()-t.getLeft()+1;break;case 3:s=[0,1],i=[t.getLeft()-1,t.getTop()],o=t.getBottom()-t.getTop()+1}let n=[],h=-2;for(let t=0;t<o;t++){let e=i[0]+t*s[0],r=i[1]+t*s[1];n.push(null),1==this._map[e][r]?h!=t-1&&(n[t]=[e,r]):(h=t,t&&(n[t-1]=null))}for(let t=n.length-1;t>=0;t--)n[t]||n.splice(t,1);return n.length?r.a.getItem(n):null}_digLine(t){for(let e=1;e<t.length;e++){let i=t[e-1],s=t[e],r=new X(i[0],i[1],s[0],s[1]);r.create(this._digCallback),this._corridors.push(r)}}_digCallback(t,e,i){this._map[t][e]=i,0==i&&this._dug++}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}},Cellular:class extends W{constructor(t,e,i={}){super(t,e),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},this.setOptions(i),this._dirs=K[this._options.topology],this._map=this._fillMap(0)}randomize(t){for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)this._map[e][i]=r.a.getUniform()<t?1:0;return this}setOptions(t){Object.assign(this._options,t)}set(t,e,i){this._map[t][e]=i}create(t){let e=this._fillMap(0),i=this._options.born,s=this._options.survive;for(let t=0;t<this._height;t++){let r=1,o=0;6==this._options.topology&&(r=2,o=t%2);for(let n=o;n<this._width;n+=r){let r=this._map[n][t],o=this._getNeighbors(n,t);r&&-1!=s.indexOf(o)?e[n][t]=1:r||-1==i.indexOf(o)||(e[n][t]=1)}}this._map=e,t&&this._serviceCallback(t)}_serviceCallback(t){for(let e=0;e<this._height;e++){let i=1,s=0;6==this._options.topology&&(i=2,s=e%2);for(let r=s;r<this._width;r+=i)t(r,e,this._map[r][e])}}_getNeighbors(t,e){let i=0;for(let s=0;s<this._dirs.length;s++){let r=this._dirs[s],o=t+r[0],n=e+r[1];o<0||o>=this._width||n<0||n>=this._height||(i+=1==this._map[o][n]?1:0)}return i}connect(t,e,i){e||(e=0);let s=[],o={},n=1,h=[0,0];6==this._options.topology&&(n=2,h=[0,1]);for(let t=0;t<this._height;t++)for(let i=h[t%2];i<this._width;i+=n)if(this._freeSpace(i,t,e)){let e=[i,t];o[this._pointKey(e)]=e,s.push([i,t])}let a=s[r.a.getUniformInt(0,s.length-1)],l=this._pointKey(a),c={};for(c[l]=a,delete o[l],this._findConnected(c,o,[a],!1,e);Object.keys(o).length>0;){let t=this._getFromTo(c,o),s=t[0],r=t[1],n={};n[this._pointKey(s)]=s,this._findConnected(n,o,[s],!0,e),(6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected).call(this,r,s,c,o,e,i);for(let t in n){let i=n[t];this._map[i[0]][i[1]]=e,c[t]=i,delete o[t]}}t&&this._serviceCallback(t)}_getFromTo(t,e){let i,s=[0,0],o=[0,0],n=Object.keys(t),h=Object.keys(e);for(let a=0;a<5;a++){if(n.length<h.length){let i=n;o=t[i[r.a.getUniformInt(0,i.length-1)]],s=this._getClosest(o,e)}else{let i=h;s=e[i[r.a.getUniformInt(0,i.length-1)]],o=this._getClosest(s,t)}if((i=(s[0]-o[0])*(s[0]-o[0])+(s[1]-o[1])*(s[1]-o[1]))<64)break}return[s,o]}_getClosest(t,e){let i=null,s=null;for(let r in e){let o=e[r],n=(o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1]);(null==s||n<s)&&(s=n,i=o)}return i}_findConnected(t,e,i,s,r){for(;i.length>0;){let o,n=i.splice(0,1)[0];o=6==this._options.topology?[[n[0]+2,n[1]],[n[0]+1,n[1]-1],[n[0]-1,n[1]-1],[n[0]-2,n[1]],[n[0]-1,n[1]+1],[n[0]+1,n[1]+1]]:[[n[0]+1,n[1]],[n[0]-1,n[1]],[n[0],n[1]+1],[n[0],n[1]-1]];for(let n=0;n<o.length;n++){let h=this._pointKey(o[n]);null==t[h]&&this._freeSpace(o[n][0],o[n][1],r)&&(t[h]=o[n],s||delete e[h],i.push(o[n]))}}}_tunnelToConnected(t,e,i,s,r,o){let n,h;e[0]<t[0]?(n=e,h=t):(n=t,h=e);for(let t=n[0];t<=h[0];t++){this._map[t][n[1]]=r;let e=[t,n[1]],o=this._pointKey(e);i[o]=e,delete s[o]}o&&n[0]<h[0]&&o(n,[h[0],n[1]]);let a=h[0];e[1]<t[1]?(n=e,h=t):(n=t,h=e);for(let t=n[1];t<h[1];t++){this._map[a][t]=r;let e=[a,t],o=this._pointKey(e);i[o]=e,delete s[o]}o&&n[1]<h[1]&&o([h[0],n[1]],[h[0],h[1]])}_tunnelToConnected6(t,e,i,s,r,o){let n,h;e[0]<t[0]?(n=e,h=t):(n=t,h=e);let a=n[0],l=n[1];for(;a!=h[0]||l!=h[1];){let t=2;l<h[1]?(l++,t=1):l>h[1]&&(l--,t=1),a<h[0]?a+=t:a>h[0]?a-=t:h[1]%2?a-=t:a+=t,this._map[a][l]=r;let e=[a,l],o=this._pointKey(e);i[o]=e,delete s[o]}o&&o(e,t)}_freeSpace(t,e,i){return t>=0&&t<this._width&&e>=0&&e<this._height&&this._map[t][e]==i}_pointKey(t){return t[0]+"."+t[1]}},Digger:class extends F{constructor(t,e,i={}){super(t,e),this._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},i),this._features={room:4,corridor:4},this._map=[],this._featureAttempts=20,this._walls={},this._dug=0,this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)}create(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;let e=(this._width-2)*(this._height-2);this._firstRoom();let i,s=Date.now();do{if(i=0,Date.now()-s>this._options.timeLimit)break;let t=this._findWall();if(!t)break;let e=t.split(","),r=parseInt(e[0]),o=parseInt(e[1]),n=this._getDiggingDirection(r,o);if(!n)continue;let h=0;do{if(h++,this._tryFeature(r,o,n[0],n[1])){this._removeSurroundingWalls(r,o),this._removeSurroundingWalls(r-n[0],o-n[1]);break}}while(h<this._featureAttempts);for(let t in this._walls)this._walls[t]>1&&i++}while(this._dug/e<this._options.dugPercentage||i);if(this._addDoors(),t)for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,this._map[e][i]);return this._walls={},this._map=[],this}_digCallback(t,e,i){0==i||2==i?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}_priorityWallCallback(t,e){this._walls[t+","+e]=2}_firstRoom(){let t=Math.floor(this._width/2),e=Math.floor(this._height/2),i=j.createRandomCenter(t,e,this._options);this._rooms.push(i),i.create(this._digCallback)}_findWall(){let t=[],e=[];for(let i in this._walls){2==this._walls[i]?e.push(i):t.push(i)}let i=e.length?e:t;if(!i.length)return null;let s=r.a.getItem(i.sort());return delete this._walls[s],s}_tryFeature(t,e,i,s){let o=r.a.getWeightedValue(this._features),n=H[o].createRandomAt(t,e,i,s,this._options);return!!n.isValid(this._isWallCallback,this._canBeDugCallback)&&(n.create(this._digCallback),n instanceof j&&this._rooms.push(n),n instanceof X&&(n.createPriorityWalls(this._priorityWallCallback),this._corridors.push(n)),!0)}_removeSurroundingWalls(t,e){let i=K[4];for(let s=0;s<i.length;s++){let r=i[s],o=t+r[0],n=e+r[1];delete this._walls[o+","+n],o=t+2*r[0],n=e+2*r[1],delete this._walls[o+","+n]}}_getDiggingDirection(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;let i=null,s=K[4];for(let r=0;r<s.length;r++){let o=s[r],n=t+o[0],h=e+o[1];if(!this._map[n][h]){if(i)return null;i=o}}return i?[-i[0],-i[1]]:null}_addDoors(){let t=this._map;function e(e,i){return 1==t[e][i]}for(let t=0;t<this._rooms.length;t++){let i=this._rooms[t];i.clearDoors(),i.addDoors(e)}}},EllerMaze:class extends W{create(t){let e,i=this._fillMap(1),s=Math.ceil((this._width-2)/2),o=[],n=[];for(let t=0;t<s;t++)o.push(t),n.push(t);for(o.push(s-1),e=1;e+3<this._height;e+=2)for(let t=0;t<s;t++){let s=2*t+1,h=e;i[s][h]=0,t!=o[t+1]&&r.a.getUniform()>.375&&(B(t,o,n),i[s+1][h]=0),t!=o[t]&&r.a.getUniform()>.375?$(t,o,n):i[s][h+1]=0}for(let t=0;t<s;t++){let s=2*t+1,h=e;i[s][h]=0,t!=o[t+1]&&(t==o[t]||r.a.getUniform()>.375)&&(B(t,o,n),i[s+1][h]=0),$(t,o,n)}for(let e=0;e<this._width;e++)for(let s=0;s<this._height;s++)t(e,s,i[e][s]);return this}},DividedMaze:class extends W{constructor(){super(...arguments),this._stack=[],this._map=[]}create(t){let e=this._width,i=this._height;this._map=[];for(let t=0;t<e;t++){this._map.push([]);for(let s=0;s<i;s++){let r=0==t||0==s||t+1==e||s+1==i;this._map[t].push(r?1:0)}}this._stack=[[1,1,e-2,i-2]],this._process();for(let s=0;s<e;s++)for(let e=0;e<i;e++)t(s,e,this._map[s][e]);return this._map=[],this}_process(){for(;this._stack.length;){let t=this._stack.shift();this._partitionRoom(t)}}_partitionRoom(t){let e=[],i=[];for(let i=t[0]+1;i<t[2];i++){let s=this._map[i][t[1]-1],r=this._map[i][t[3]+1];!s||!r||i%2||e.push(i)}for(let e=t[1]+1;e<t[3];e++){let s=this._map[t[0]-1][e],r=this._map[t[2]+1][e];!s||!r||e%2||i.push(e)}if(!e.length||!i.length)return;let s=r.a.getItem(e),o=r.a.getItem(i);this._map[s][o]=1;let n=[],h=[];n.push(h);for(let e=t[0];e<s;e++)this._map[e][o]=1,h.push([e,o]);h=[],n.push(h);for(let e=s+1;e<=t[2];e++)this._map[e][o]=1,h.push([e,o]);h=[],n.push(h);for(let e=t[1];e<o;e++)this._map[s][e]=1,h.push([s,e]);h=[],n.push(h);for(let e=o+1;e<=t[3];e++)this._map[s][e]=1,h.push([s,e]);let a=r.a.getItem(n);for(let t=0;t<n.length;t++){let e=n[t];if(e==a)continue;let i=r.a.getItem(e);this._map[i[0]][i[1]]=0}this._stack.push([t[0],t[1],s-1,o-1]),this._stack.push([s+1,t[1],t[2],o-1]),this._stack.push([t[0],o+1,s-1,t[3]]),this._stack.push([s+1,o+1,t[2],t[3]])}},IceyMaze:class extends W{constructor(t,e,i=0){super(t,e),this._regularity=i,this._map=[]}create(t){let e=this._width,i=this._height,s=this._fillMap(1);e-=e%2?1:2,i-=i%2?1:2;let o=0,n=0,h=0,a=0,l=0,c=!1,u=[[0,0],[0,0],[0,0],[0,0]];do{if(o=1+2*Math.floor(r.a.getUniform()*(e-1)/2),n=1+2*Math.floor(r.a.getUniform()*(i-1)/2),l||(s[o][n]=0),!s[o][n]){this._randomize(u);do{0==Math.floor(r.a.getUniform()*(this._regularity+1))&&this._randomize(u),c=!0;for(let t=0;t<4;t++)if(h=o+2*u[t][0],a=n+2*u[t][1],this._isFree(s,h,a,e,i)){s[h][a]=0,s[o+u[t][0]][n+u[t][1]]=0,o=h,n=a,c=!1,l++;break}}while(!c)}}while(l+1<e*i/4);for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,s[e][i]);return this._map=[],this}_randomize(t){for(let e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*r.a.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}}_isFree(t,e,i,s,r){return!(e<1||i<1||e>=s||i>=r)&&t[e][i]}},Rogue:class extends W{constructor(t,e,i){super(t,e),this.map=[],this.rooms=[],this.connectedCells=[],(i=Object.assign({cellWidth:3,cellHeight:3},i)).hasOwnProperty("roomWidth")||(i.roomWidth=this._calculateRoomSize(this._width,i.cellWidth)),i.hasOwnProperty("roomHeight")||(i.roomHeight=this._calculateRoomSize(this._height,i.cellHeight)),this._options=i}create(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,this.map[e][i]);return this}_calculateRoomSize(t,e){let i=Math.floor(t/e*.8),s=Math.floor(t/e*.25);return s<2&&(s=2),i<2&&(i=2),[s,i]}_initRooms(){for(let t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(let e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}}_connectRooms(){let t,e,i,s,o,n,h=r.a.getUniformInt(0,this._options.cellWidth-1),a=r.a.getUniformInt(0,this._options.cellHeight-1),l=!1;do{n=[0,2,4,6],n=r.a.shuffle(n);do{if(l=!1,t=n.pop(),e=h+K[8][t][0],i=a+K[8][t][1],!(e<0||e>=this._options.cellWidth||i<0||i>=this._options.cellHeight)){if((s=this.rooms[h][a]).connections.length>0&&s.connections[0][0]==e&&s.connections[0][1]==i)break;0==(o=this.rooms[e][i]).connections.length&&(o.connections.push([h,a]),this.connectedCells.push([e,i]),h=e,a=i,l=!0)}}while(n.length>0&&0==l)}while(n.length>0)}_connectUnconnectedRooms(){let t,e,i,s=this._options.cellWidth,o=this._options.cellHeight;this.connectedCells=r.a.shuffle(this.connectedCells);for(let n=0;n<this._options.cellWidth;n++)for(let h=0;h<this._options.cellHeight;h++)if(0==(t=this.rooms[n][h]).connections.length){let a=[0,2,4,6];a=r.a.shuffle(a),i=!1;do{let t=a.pop(),r=n+K[8][t][0],l=h+K[8][t][1];if(!(r<0||r>=s||l<0||l>=o)){if(i=!0,0==(e=this.rooms[r][l]).connections.length)break;for(let t=0;t<e.connections.length;t++)if(e.connections[t][0]==n&&e.connections[t][1]==h){i=!1;break}if(i)break}}while(a.length);i?t.connections.push([e.cellx,e.celly]):console.log("-- Unable to connect room.")}}_createRandomRoomConnections(){}_createRooms(){let t,e,i,s,o,n=this._width,h=this._height,a=this._options.cellWidth,l=this._options.cellHeight,c=Math.floor(this._width/a),u=Math.floor(this._height/l),d=this._options.roomWidth,_=this._options.roomHeight;for(let f=0;f<a;f++)for(let a=0;a<l;a++){if(0==(i=c*f)&&(i=1),0==(s=u*a)&&(s=1),t=r.a.getUniformInt(d[0],d[1]),e=r.a.getUniformInt(_[0],_[1]),a>0)for(o=this.rooms[f][a-1];s-(o.y+o.height)<3;)s++;if(f>0)for(o=this.rooms[f-1][a];i-(o.x+o.width)<3;)i++;let l=Math.round(r.a.getUniformInt(0,c-t)/2),p=Math.round(r.a.getUniformInt(0,u-e)/2);for(;i+l+t>=n;)l?l--:t--;for(;s+p+e>=h;)p?p--:e--;i+=l,s+=p,this.rooms[f][a].x=i,this.rooms[f][a].y=s,this.rooms[f][a].width=t,this.rooms[f][a].height=e;for(let r=i;r<i+t;r++)for(let t=s;t<s+e;t++)this.map[r][t]=0}}_getWallPosition(t,e){let i,s,o;return 1==e||3==e?(i=r.a.getUniformInt(t.x+1,t.x+t.width-2),o=1==e?(s=t.y-2)+1:(s=t.y+t.height+1)-1,this.map[i][o]=0):(s=r.a.getUniformInt(t.y+1,t.y+t.height-2),o=2==e?(i=t.x+t.width+1)-1:(i=t.x-2)+1,this.map[o][s]=0),[i,s]}_drawCorridor(t,e){let i,s,o,n,h=e[0]-t[0],a=e[1]-t[1],l=t[0],c=t[1],u=[],d=Math.abs(h),_=Math.abs(a),f=r.a.getUniform(),p=f,g=1-f;for(s=h>0?2:6,o=a>0?4:0,d<_?(i=Math.ceil(_*p),u.push([o,i]),u.push([s,d]),i=Math.floor(_*g),u.push([o,i])):(i=Math.ceil(d*p),u.push([s,i]),u.push([o,_]),i=Math.floor(d*g),u.push([s,i])),this.map[l][c]=0;u.length>0;)for(n=u.pop();n[1]>0;)l+=K[8][n[0]][0],c+=K[8][n[0]][1],this.map[l][c]=0,n[1]=n[1]-1}_createCorridors(){let t,e,i,s,r,o=this._options.cellWidth,n=this._options.cellHeight;for(let h=0;h<o;h++)for(let o=0;o<n;o++){t=this.rooms[h][o];for(let o=0;o<t.connections.length;o++)e=t.connections[o],(i=this.rooms[e[0]][e[1]]).cellx>t.cellx?(s=2,r=4):i.cellx<t.cellx?(s=4,r=2):i.celly>t.celly?(s=3,r=1):(s=1,r=3),this._drawCorridor(this._getWallPosition(t,s),this._getWallPosition(i,r))}}}};class q{}const J=.5*(Math.sqrt(3)-1),Q=(3-Math.sqrt(3))/6;var Z={Simplex:class extends q{constructor(t=256){super(),this._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];let e=[];for(let i=0;i<t;i++)e.push(i);e=r.a.shuffle(e),this._perms=[],this._indexes=[];for(let i=0;i<2*t;i++)this._perms.push(e[i%t]),this._indexes.push(this._perms[i]%this._gradients.length)}get(t,e){let i,s,r,o=this._perms,n=this._indexes,a=o.length/2,l=0,c=0,u=0,d=(t+e)*J,_=Math.floor(t+d),f=Math.floor(e+d),p=(_+f)*Q,g=t-(_-p),m=e-(f-p);g>m?(s=1,r=0):(s=0,r=1);let b=g-s+Q,w=m-r+Q,y=g-1+2*Q,v=m-1+2*Q,x=Object(h.mod)(_,a),S=Object(h.mod)(f,a),E=.5-g*g-m*m;if(E>=0){E*=E,i=n[x+o[S]];let t=this._gradients[i];l=E*E*(t[0]*g+t[1]*m)}let k=.5-b*b-w*w;if(k>=0){k*=k,i=n[x+s+o[S+r]];let t=this._gradients[i];c=k*k*(t[0]*b+t[1]*w)}let C=.5-y*y-v*v;if(C>=0){C*=C,i=n[x+1+o[S+1]];let t=this._gradients[i];u=C*C*(t[0]*y+t[1]*v)}return 70*(l+c+u)}}};class tt{constructor(t,e,i,s={}){this._toX=t,this._toY=e,this._passableCallback=i,this._options=Object.assign({topology:8},s),this._dirs=K[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}_getNeighbors(t,e){let i=[];for(let s=0;s<this._dirs.length;s++){let r=this._dirs[s],o=t+r[0],n=e+r[1];this._passableCallback(o,n)&&i.push([o,n])}return i}}var et={Dijkstra:class extends tt{constructor(t,e,i,s){super(t,e,i,s),this._computed={},this._todo=[],this._add(t,e,null)}compute(t,e,i){let s=t+","+e;if(s in this._computed||this._compute(t,e),!(s in this._computed))return;let r=this._computed[s];for(;r;)i(r.x,r.y),r=r.prev}_compute(t,e){for(;this._todo.length;){let i=this._todo.shift();if(i.x==t&&i.y==e)return;let s=this._getNeighbors(i.x,i.y);for(let t=0;t<s.length;t++){let e=s[t],r=e[0],o=e[1];r+","+o in this._computed||this._add(r,o,i)}}}_add(t,e,i){let s={x:t,y:e,prev:i};this._computed[t+","+e]=s,this._todo.push(s)}},AStar:class extends tt{constructor(t,e,i,s={}){super(t,e,i,s),this._todo=[],this._done={}}compute(t,e,i){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){let i=this._todo.shift(),s=i.x+","+i.y;if(s in this._done)continue;if(this._done[s]=i,i.x==t&&i.y==e)break;let r=this._getNeighbors(i.x,i.y);for(let t=0;t<r.length;t++){let e=r[t],s=e[0],o=e[1];s+","+o in this._done||this._add(s,o,i)}}let s=this._done[t+","+e];if(s)for(;s;)i(s.x,s.y),s=s.prev}_add(t,e,i){let s=this._distance(t,e),r={x:t,y:e,prev:i,g:i?i.g+1:0,h:s},o=r.g+r.h;for(let t=0;t<this._todo.length;t++){let e=this._todo[t],i=e.g+e.h;if(o<i||o==i&&s<e.h)return void this._todo.splice(t,0,r)}this._todo.push(r)}_distance(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:let i=Math.abs(t-this._fromX),s=Math.abs(e-this._fromY);return s+Math.max(0,(i-s)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}}}};class it{constructor(t){this._scheduler=t,this._lock=1}start(){return this.unlock()}lock(){return this._lock++,this}unlock(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){let t=this._scheduler.next();if(!t)return this.lock();let e=t.act();e&&e.then&&(this.lock(),e.then(this.unlock.bind(this)))}return this}}class st{constructor(t,e={}){this._reflectivityCallback=t,this._options={},e=Object.assign({passes:1,emissionThreshold:100,range:10},e),this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(e)}setOptions(t){return Object.assign(this._options,t),t&&t.range&&this.reset(),this}setFOV(t){return this._fov=t,this._fovCache={},this}setLight(t,e,i){let s=t+","+e;return i?this._lights[s]="string"==typeof i?u.fromString(i):i:delete this._lights[s],this}clearLights(){this._lights={}}reset(){return this._reflectivityCache={},this._fovCache={},this}compute(t){let e={},i={},s={};for(let t in this._lights){let e=this._lights[t];i[t]=[0,0,0],u.add_(i[t],e)}for(let t=0;t<this._options.passes;t++)this._emitLight(i,s,e),t+1!=this._options.passes&&(i=this._computeEmitters(s,e));for(let e in s){let i=e.split(",");t(parseInt(i[0]),parseInt(i[1]),s[e])}return this}_emitLight(t,e,i){for(let s in t){let r=s.split(","),o=parseInt(r[0]),n=parseInt(r[1]);this._emitLightFromCell(o,n,t[s],e),i[s]=1}return this}_computeEmitters(t,e){let i={};for(let s in t){if(s in e)continue;let r,o=t[s];if(s in this._reflectivityCache)r=this._reflectivityCache[s];else{let t=s.split(","),e=parseInt(t[0]),i=parseInt(t[1]);r=this._reflectivityCallback(e,i),this._reflectivityCache[s]=r}if(0==r)continue;let n=[0,0,0],h=0;for(let t=0;t<3;t++){let e=Math.round(o[t]*r);n[t]=e,h+=e}h>this._options.emissionThreshold&&(i[s]=n)}return i}_emitLightFromCell(t,e,i,s){let r,o=t+","+e;r=o in this._fovCache?this._fovCache[o]:this._updateFOV(t,e);for(let t in r){let e,o=r[t];t in s?e=s[t]:(e=[0,0,0],s[t]=e);for(let t=0;t<3;t++)e[t]+=Math.round(i[t]*o)}return this}_updateFOV(t,e){let i=t+","+e,s={};this._fovCache[i]=s;let r=this._options.range;return this._fov.compute(t,e,r,function(t,e,i,o){let n=o*(1-i/r);0!=n&&(s[t+","+e]=n)}.bind(this)),s}}i.d(e,"Util",(function(){return rt})),i.d(e,"Color",(function(){return ot})),i.d(e,"Text",(function(){return nt})),i.d(e,"RNG",(function(){return r.a})),i.d(e,"Display",(function(){return A})),i.d(e,"StringGenerator",(function(){return R})),i.d(e,"EventQueue",(function(){return L})),i.d(e,"Scheduler",(function(){return N})),i.d(e,"FOV",(function(){return D})),i.d(e,"Map",(function(){return G})),i.d(e,"Noise",(function(){return Z})),i.d(e,"Path",(function(){return et})),i.d(e,"Engine",(function(){return it})),i.d(e,"Lighting",(function(){return st})),i.d(e,"DEFAULT_WIDTH",(function(){return M})),i.d(e,"DEFAULT_HEIGHT",(function(){return T})),i.d(e,"DIRS",(function(){return K})),i.d(e,"KEYS",(function(){return V}));const rt=h,ot=u,nt=s},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(13)),o=s(i(14)),n=s(i(17));document.body.onload=()=>{const t=o.default.importJSON(r.default);new n.default(t)}},function(t){t.exports=JSON.parse('{"id":0,"name":"Divide and conquer!","group":"Game","description":"Divide, ..., then conquer!","completed":false,"cols":12,"rows":10,"cells":[{"x":6,"y":11,"element":"laser","rotation":270,"frozen":true},{"x":6,"y":7,"element":"beamsplitter","rotation":135,"frozen":false},{"x":6,"y":5,"element":"beamsplitter","rotation":45,"frozen":false},{"x":4,"y":7,"element":"beamsplitter","rotation":45,"frozen":false},{"x":4,"y":9,"element":"beamsplitter","rotation":45,"frozen":false},{"x":6,"y":3,"element":"detector","rotation":0,"frozen":false},{"x":8,"y":5,"element":"detector","rotation":270,"frozen":true},{"x":2,"y":7,"element":"detector","rotation":90,"frozen":true},{"x":2,"y":9,"element":"detector","rotation":90,"frozen":true},{"x":4,"y":11,"element":"detector","rotation":0,"frozen":true},{"x":5,"y":9,"element":"rock","rotation":0,"frozen":true}],"goals":[{"x":0,"y":0,"threshold":50}],"hints":[{"x":0,"y":0,"message":"give each detector some chance of catching a photon"}]}')},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(3)),o=s(i(8)),n=s(i(5)),h=s(i(16)),a=s(i(9));class l{constructor(t,e,i,s,r=new h.default(8,8),o,n,a){this.id=t,this.group=i,this.name=e,this.description=s,this.grid=r,this.goals=o,this.hints=n,this.completed=a}toString(){return`LEVEL: ${this.name} [${this.grid.cols}x${this.grid.rows}]\nDESC: ${this.description}\nGROUP: ${this.group}\n${this.grid.asciiRender()}\nGOALS: ${this.goals.map(t=>t.toString())}\nGOALS: ${this.completed?"COMPLETE":"IN PROGRESS"}\nHINTS: ${this.hints.map(t=>t.toString())}\n\nTOOLBOX: ${JSON.stringify(this.toolbox)}\n\n`}exportJSON(){return{id:this.id,name:this.name,group:this.group,description:this.description,cols:this.grid.cols,rows:this.grid.rows,cells:this.grid.cells.flatMap(t=>JSON.stringify(t)),hints:this.hints.flatMap(t=>JSON.stringify(t)),goals:this.goals.flatMap(t=>JSON.stringify(t))}}static importJSON(t){const e=new h.default(t.cols,t.rows);e.importJSON(t.cells);return new l(t.id,t.name,t.group,t.description,e,[],[],!1)}static importV1JSON(t){const e=new h.default(t.width,t.height),i=[];t.tiles.forEach(t=>{const e=new r.default(t.i,t.j),s=n.default.fromName(t.name,1),h=s.rotationAngle*t.rotation;i.push(new o.default(e,s,h,t.frozen))}),e.setMany(...i);const s=[];e.detectors.forEach(t=>{s.push(new a.default(t.coord,1))});return new l(0,t.name,t.group,"V1 level imported",e,s,[],!1)}}e.default=l},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.jsonElements=[{id:0,name:"void",namev1:"Void",ascii:[" "],group:"Basic",description:"The void...",link:"./elements/void",active:!1,tiles:"",absorption:0,phase:0,foregroundColor:"white",backgroundColor:"#2e006a",matrix:[]},{id:1,name:"laser",namev1:"Source",ascii:["^",">","v","<"],group:"Emitter",description:"A one-photon laser source",link:"./elements/laser",active:!0,tiles:"",absorption:0,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:2,name:"mirror",namev1:"ThinMirror",ascii:["|","/","-","\\","|","/","-","\\"],group:"Direction",description:"A simple reflecting mirror",link:"./elements/mirror",active:!1,tiles:"",absorption:0,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:3,name:"detector",namev1:"Detector",ascii:["⇑","⇒","⇓","⇐"],group:"Absorber",description:"A one-photon detector",link:"./elements/detector",active:!1,tiles:"",absorption:1,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:4,name:"rock",namev1:"Rock",ascii:["#"],group:"Absorber",description:"An absorbing pet rock",link:"./elements/rock",active:!1,tiles:"",absorption:1,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:5,name:"mine",namev1:"Mine",ascii:["!"],group:"Absorber",description:"An explosive mine (disarm Jean)",link:"./elements/mine",active:!1,tiles:"",absorption:1,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:6,name:"beamsplitter",namev1:"ThinSplitter",ascii:["↑","↗","→","↘","↓","↙","←","↖"],group:"Direction",description:"A beamsplitter",link:"./elements/beamsplitter",active:!1,tiles:"",absorption:0,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:7,name:"filter",namev1:"Absorber",ascii:["-"],group:"Absorber",description:"A neutral density filter",link:"./elements/absorber",active:!1,tiles:"",absorption:.5,phase:0,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:8,name:"phaseinc",namev1:"VacuumJar",ascii:["↝"],group:"Phase",description:"A glass slab that increases phase.",link:"./elements/phaseinc",active:!1,tiles:"",absorption:0,phase:.25,foregroundColor:"white",backgroundColor:"black",matrix:[]},{id:9,name:"phasedec",namev1:"Glass",ascii:["↜"],group:"Phase",description:"Void that decreases phase.",link:"./elements/phasedec",active:!1,tiles:"",absorption:0,phase:-.25,foregroundColor:"white",backgroundColor:"black",matrix:[]}]},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(8)),o=s(i(3)),n=s(i(5)),h=s(i(6));e.default=class{constructor(t,e,i){if(this.rows=t,this.cols=e,this.clusters=[],i)this.matrix=i;else{this.matrix=new Array(this.rows).fill(0).map(()=>new Array(this.cols).fill(0));for(let i=0;i<t;i++)for(let t=0;t<e;t++)this.set(new r.default(new o.default(i,t),n.default.fromName("void")))}}get center(){return new o.default(Math.floor(this.cols/2),Math.floor(this.rows/2))}get cells(){return this.matrix.reduce((t,e)=>t.concat(e),[])}get coords(){return this.cells.flatMap(t=>t.coord)}get void(){return this.filteredBy("void")}get lasers(){return this.filteredBy("laser")}get mirrors(){return this.filteredBy("mirror")}get beamsplitters(){return this.filteredBy("beamsplitter")}get reflectors(){return this.mirrors.concat(this.beamsplitters)}get mines(){return this.filteredBy("mine")}get detectors(){return this.filteredBy("detector")}get rocks(){return this.filteredBy("rock")}get filters(){return this.filteredBy("filter")}get absorbers(){return this.mines.concat(this.detectors,this.rocks,this.filters)}get phaseincs(){return this.filteredBy("phaseinc")}get phasedecs(){return this.filteredBy("phasedec")}get phaseshifters(){return this.phasedecs.concat(this.phaseincs)}filteredBy(t){return this.cells.filter(e=>e.element.name===t)}includes(t){return t.y>=0&&t.y<this.rows&&t.x>=0&&t.x<this.cols}set(t){return!!this.includes(t.coord)&&(this.matrix[t.coord.y][t.coord.x]=t,!0)}get(t){return this.matrix[t.y][t.x]}setMany(...t){let e=!0;return t.forEach(t=>{this.includes(t.coord)||(e=!1)}),t.forEach(t=>{this.set(t)}),e}getMany(...t){return t.map(t=>this.get(t))}move(t,e){const i=this.get(t),s=this.get(e);return!i.frozen&&!s.frozen&&(this.set(new r.default(t,s.element,s.rotation)),this.set(new r.default(e,i.element,i.rotation)),!0)}distanceToEscape(t){switch(t.direction%360){case 0:return t.y;case 90:return this.cols-t.x-1;case 180:return this.rows-t.y-1;case 270:return t.x;default:throw new Error("Something went wrong with directions...")}}display(){console.log(this.matrix.valueOf())}draw(t){for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++){const s=new o.default(e,i),r=this.get(s),n=t.frames[t.frames.length-1].laserCoords();s.isIncludedIn(n)?t.draw(r,"white","red"):t.draw(r,"white","#2e006a")}}asciiRender(t=[]){let e="##".repeat(this.cols+1)+"\n";for(let i=0;i<this.rows;i++){let s="#";for(let e=0;e<this.cols;e++){const r=new o.default(i,e);if(r.isIncludedIn(h.default.manyToCoords(t)))s+="* ";else{const t=this.get(r).rotation/45;s+=this.get(new o.default(i,e)).element.ascii[t]+" "}}e+=s+"#\n"}return e+="##".repeat(this.cols+1)}toString(){let t="";for(let e=0;e<this.rows;e++){let i="";for(let t=0;t<this.cols;t++)i+=this.get(new o.default(e,t)).element.id;t+=i+"\n"}return t}importJSON(t){t.forEach(t=>{const e=new o.default(t.y,t.x),i=n.default.fromName(t.element);this.set(new r.default(e,i,t.rotation,t.frozen))})}exportJSON(){return JSON.stringify(this)}}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=i(11),o=s(i(3)),n=s(i(19)),h=s(i(20)),a=s(i(10)),l=s(i(22)),c=s(i(23)),u=s(i(27));e.default=class{constructor(t){this.mapSize={width:t.grid.cols,height:t.grid.rows},this.gameSize={width:this.mapSize.width,height:this.mapSize.height},this.statusLinePosition=new o.default(this.gameSize.height-4,0),this.actionLogPosition=new o.default(this.gameSize.height-3,0),this.frames=[];const e=document.createElement("img");e.src="./tiles/tilemap.png",this.display=new r.Display({layout:"tile-gl",bg:"transparent",tileWidth:64,tileHeight:64,tileSet:e,tileMap:{"@":[0,192],"^":[0,0],">":[64,0],v:[128,0],"<":[192,0],"#":[0,64],r:[64,64],R:[128,64],"⇑":[0,384],"⇒":[64,384],"⇓":[128,384],"⇐":[192,384],"¤":[0,512],O:[0,512],"~0":[704,0],"~1":[768,0],"*p":[832,0],"*e":[896,0],"*a":[960,0],"|":[0,896],"/":[64,896],"-":[128,896],"\\":[192,896],"↑":[0,960],"↗":[64,960],"→":[128,960],"↘":[192,960],"↓":[192,960],"↙":[192,960],"←":[192,960],"↖":[192,960],G:[1152,0],V:[1216,0],F:[1280,0]," ":[1408,0],b:[1472,0],n:[1536,0]},width:this.gameSize.width,height:this.gameSize.height,fontSize:20}),document.body.appendChild(this.display.getContainer()),this.gameState=new n.default,this.level=t,this.grid=this.level.grid,this.frames.push(new u.default(t)),this.statusLine=new h.default(this,this.statusLinePosition,this.gameSize.width,{}),this.messageLog=new l.default(this,this.actionLogPosition,this.gameSize.width,3),this.initializeGame(),this.mainLoop()}get playerCoord(){return this.player.coord}get playerCell(){return this.player.cell}draw(t,e="white",i="#2e006a"){this.display.draw(t.x,t.y,t.ascii,e,i)}drawLaser(t){t.laserCoords().forEach(t=>{this.display.draw(t.y,t.x,"","","#00ff00")})}drawPlayer(t,e){this.display.draw(t.y,t.x,e.character,e.foregroundColor,e.backgroundColor)}drawText(t,e,i){console.log(t.y,t.x,e,i)}initializeGame(){this.display.clear(),this.messageLog.clear(),!this.gameState.isGameOver()||this.gameState.doRestartGame()?(this.resetStatusLine(),this.writeHelpMessage()):this.statusLine.boxes=0,this.gameState.reset(),this.grid.draw(this),this.player=new c.default(this,this.grid.center),this.scheduler=new r.Scheduler.Simple,this.scheduler.add(this.player,!0),this.drawPanel()}async mainLoop(){let t;for(;t=this.scheduler.next();)await t.act(),0===t.type&&(this.statusLine.turns+=1),this.drawPanel(),this.gameState.isGameOver()&&(await a.default.waitForInput(this.handleInput.bind(this)),this.initializeGame())}drawPanel(){this.display.clear(),this.statusLine.draw(),this.messageLog.draw(),this.drawPlayer(this.player.coord,this.player.glyph)}handleInput(t){const e=t.keyCode;return e===r.KEYS.VK_SPACE||e===r.KEYS.VK_RETURN}resetStatusLine(){this.statusLine.reset()}writeHelpMessage(){const t=[`I - ${this.level.name}`];for(let e=t.length-1;e>=0;--e)this.messageLog.appendText(t[e])}}},function(t,e){var i,s,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function h(t){if(i===setTimeout)return setTimeout(t,0);if((i===o||!i)&&setTimeout)return i=setTimeout,setTimeout(t,0);try{return i(t,0)}catch(e){try{return i.call(null,t,0)}catch(e){return i.call(this,t,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:o}catch(t){i=o}try{s="function"==typeof clearTimeout?clearTimeout:n}catch(t){s=n}}();var a,l=[],c=!1,u=-1;function d(){c&&a&&(c=!1,a.length?l=a.concat(l):u=-1,l.length&&_())}function _(){if(!c){var t=h(d);c=!0;for(var e=l.length;e;){for(a=l,l=[];++u<e;)a&&a[u].run();u=-1,e=l.length}a=null,c=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===n||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function p(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];l.push(new f(t,e)),1!==l.length||c||h(_)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=p,r.addListener=p,r.once=p,r.off=p,r.removeListener=p,r.removeAllListeners=p,r.emit=p,r.prependListener=p,r.prependOnceListener=p,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.reset()}reset(){this.achievedGoals=!1,this.noPointers=!1,this.notEnoughIntensity=!1}doStartNextRound(){return!this.noPointers}doRestartGame(){return this.noPointers||this.notEnoughIntensity}isGameOver(){return this.achievedGoals||this.noPointers||this.notEnoughIntensity}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(21);e.default=class{constructor(t,e,i,s={}){this.game=t,this.coord=e,this.maxWidth=i,this.turns=s.turns||0}reset(){this.turns=0}draw(){const t=this.game.playerCell,e=`Turns: ${s.padRight(this.turns.toString(),6)} player: ${s.padLeft(this.game.playerCoord.toString(),8)}`;this.game.drawText(this.coord,e,this.maxWidth);const i=`Cell: ${t.element.name} - Rotation: ${t.rotation}° ${t.frozen?"frozen":""}`;this.game.drawText(this.coord.right,i,this.maxWidth)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.angleToSymbol=function(t){switch(t%=360){case 0:return"↑";case 45:return"↗";case 90:return"→";case 135:return"↘";case 180:return"↓";case 225:return"↙";case 270:return"←";case 315:return"↖";default:throw new Error("Something is wrong with provided angle.")}},e.symbolToAngle=function(t){switch(t){case"↑":return 0;case"↗":return 45;case"→":return 90;case"↘":return 135;case"↓":return 180;case"↙":return 225;case"←":return 270;case"↖":return 315;default:throw new Error("Something is wrong with provided direction string.")}},e.padLeft=function(t,e,i){const s=i||" ";for(;t.length<e;)t=s+t;return t},e.padRight=function(t,e,i){const s=i||" ";for(;t.length<e;)t+=s;return t}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(3));e.default=class{constructor(t,e,i,s){this.game=t,this.position=e,this.maxWidth=i,this.maxLines=s,this.lines=[]}clear(){this.lines=[]}appendText(t){this.lines.splice(0,0,t),this.lines.length>this.maxLines&&this.lines.splice(this.maxLines,this.lines.length-this.maxLines)}draw(){const t=new r.default(this.position.x,this.position.y);for(let e=0;e<this.maxLines&&e<this.lines.length;++e)this.game.drawText(t,this.lines[e],this.maxWidth),++t.y}}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=i(11),o=i(24),n=s(i(10)),h=s(i(5)),a=i(25);e.default=class{constructor(t,e){this.glyph=new o.Glyph("@","#ff0","#ff00ff"),this.type=0,this.game=t,this.coord=e}get cell(){return this.game.grid.get(this.coord)}act(){return n.default.waitForInput(this.handleInput.bind(this))}handleInput(t){let e=!1,i=this.coord;switch(t.keyCode){case r.KEYS.VK_Z:case r.KEYS.VK_UP:i=this.coord.top;break;case r.KEYS.VK_D:case r.KEYS.VK_RIGHT:i=this.coord.right;break;case r.KEYS.VK_S:case r.KEYS.VK_DOWN:i=this.coord.bottom;break;case r.KEYS.VK_Q:case r.KEYS.VK_LEFT:i=this.coord.left;break;case r.KEYS.VK_A:this.cell.rotate(-this.cell.element.rotationAngle);break;case r.KEYS.VK_E:this.cell.rotate(this.cell.element.rotationAngle);break;case r.KEYS.VK_F:this.cell.toggleFreeze();break;case r.KEYS.VK_F1:const t=this.game.frames[0].level.exportJSON(),e=new Blob([JSON.stringify(t)],{type:"text/plain;charset=utf-8"});a.saveAs(e,"level.json");break;case r.KEYS.VK_QUOTE:this.cell.element=h.default.fromName("void");break;case r.KEYS.VK_1:this.cell.element=h.default.fromName("mirror");break;case r.KEYS.VK_2:this.cell.element=h.default.fromName("beamsplitter");break;case r.KEYS.VK_3:this.cell.element=h.default.fromName("laser");break;case r.KEYS.VK_4:this.cell.element=h.default.fromName("detector");break;case r.KEYS.VK_5:this.cell.element=h.default.fromName("phaseinc");break;case r.KEYS.VK_6:this.cell.element=h.default.fromName("phasedec");break;case r.KEYS.VK_7:this.cell.element=h.default.fromName("rock");break;case r.KEYS.VK_8:this.cell.element=h.default.fromName("mine")}return this.game.grid.includes(i)&&(this.coord=i,e=!0),e}toString(){return`Player ${this.coord.toString()}`}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Glyph=class{constructor(t,e="white",i="black"){this.character=t,this.foregroundColor=e,this.backgroundColor=i}}},function(t,e,i){(function(i){var s,r,o;r=[],void 0===(o="function"==typeof(s=function(){"use strict";function e(t,e,i){var s=new XMLHttpRequest;s.open("GET",t),s.responseType="blob",s.onload=function(){n(s.response,e,i)},s.onerror=function(){console.error("could not download file")},s.send()}function s(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function r(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i&&i.global===i?i:void 0,n=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype?function(t,i,n){var h=o.URL||o.webkitURL,a=document.createElement("a");i=i||t.name||"download",a.download=i,a.rel="noopener","string"==typeof t?(a.href=t,a.origin===location.origin?r(a):s(a.href)?e(t,i,n):r(a,a.target="_blank")):(a.href=h.createObjectURL(t),setTimeout((function(){h.revokeObjectURL(a.href)}),4e4),setTimeout((function(){r(a)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,i,o){if(i=i||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),i);else if(s(t))e(t,i,o);else{var n=document.createElement("a");n.href=t,n.target="_blank",setTimeout((function(){r(n)}))}}:function(t,i,s,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return e(t,i,s);var n="application/octet-stream"===t.type,h=/constructor/i.test(o.HTMLElement)||o.safari,a=/CriOS\/[\d]+/.test(navigator.userAgent);if((a||n&&h)&&"object"==typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=a?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},l.readAsDataURL(t)}else{var c=o.URL||o.webkitURL,u=c.createObjectURL(t);r?r.location=u:location.href=u,r=null,setTimeout((function(){c.revokeObjectURL(u)}),4e4)}});o.saveAs=n.saveAs=n,t.exports=n})?s.apply(e,r):s)||(t.exports=o)}).call(this,i(26))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=s(i(9)),o=s(i(6));class n{constructor(t,e=0,i=[],s=!1){this.step=e,this.level=t,this.pointers=i,this.end=s,0===e&&this.lasers.forEach(t=>{this.pointers.push(t.fire())})}get grid(){return this.level.grid}get cells(){return this.level.grid.cells}get lasers(){return this.level.grid.lasers}get goals(){return this.level.goals}get completedGoals(){return this.level.goals.filter(t=>t.completed)}get victory(){return this.completedGoals.length===this.goals.length}next(){const t=this.grid.detectors,e=this.grid.rocks,i=this.grid.mines,s=this.grid.absorbers,r=t.concat(e,i,s),h=this.grid.mirrors,a=this.grid.beamsplitters,l=this.grid.phaseincs,c=this.grid.phasedecs,u=l.concat(c);return this.pointers.forEach(t=>{t.next(),this.grid.includes(t.coord)||(t.intensity=0),r.forEach(e=>{t.on(e)&&(t.intensity*=e.element.absorption)}),h.forEach(e=>{t.on(e)&&(t.direction=(2*e.rotation-t.direction+360)%360)}),a.forEach(e=>{if(t.on(e)){t.intensity/=2;const i=(2*e.rotation-t.direction+360)%360;this.pointers.push(new o.default(t.coord,i,t.intensity))}}),u.forEach(e=>{t.on(e)&&(t.phase=(t.phase+e.element.phase)%1)}),this.goals.forEach(e=>{e.coord.equal(t.coord)&&(e.value+=100*t.intensity,t.intensity=0)})}),this.pointers=this.pointers.filter(t=>t.intensity>0),this.victory&&(this.level.completed=!0,this.end=!0),0===this.pointers.length&&(this.level.completed=!1,this.end=!0),new n(this.level,this.step+1,this.pointers,this.end)}laserCoords(){const t=[];return this.pointers.forEach(e=>{e.laserPath(this.grid,50).forEach(e=>{t.push(e)})}),t}toString(){let t=`\n--- ${this.victory?"VICTORY":"IN PROGRESS"} --- Step #${this.step} with ${this.pointers.length} active pointers.\n`;return t+="\n",t+=o.default.manyToString(this.pointers),t+="\n",t+=r.default.manyToString(this.level.goals)}}e.default=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvcm5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Nvb3JkLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2Rpc3BsYXkvYmFja2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRWxlbWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUG9pbnRlci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9kaXNwbGF5L3Rlcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NlbGwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dvYWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0lucHV0VXRpbGl0eS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9kaXNwbGF5L2NhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9kaXNwbGF5L2hleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9kaXNwbGF5L3JlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvZGlzcGxheS90aWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2Rpc3BsYXkvdGlsZS1nbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9kaXNwbGF5L2Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvc3RyaW5nZ2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2V2ZW50cXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvc2NoZWR1bGVyL3NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvc2NoZWR1bGVyL3NpbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9zY2hlZHVsZXIvc3BlZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvc2NoZWR1bGVyL2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9mb3YvZm92LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2Zvdi9yZWN1cnNpdmUtc2hhZG93Y2FzdGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9mb3YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvZm92L2Rpc2NyZXRlLXNoYWRvd2Nhc3RpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvZm92L3ByZWNpc2Utc2hhZG93Y2FzdGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9tYXAvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL21hcC9kdW5nZW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL21hcC9mZWF0dXJlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9tYXAvZGlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL21hcC9lbGxlcm1hemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL21hcC9hcmVuYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9tYXAvdW5pZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9tYXAvY2VsbHVsYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvbWFwL2RpdmlkZWRtYXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL21hcC9pY2V5bWF6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9tYXAvcm9ndWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvbm9pc2Uvbm9pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvbm9pc2Uvc2ltcGxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9ub2lzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9wYXRoL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvcGF0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm90LWpzL2xpYi9wYXRoL2RpamtzdHJhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL3BhdGgvYXN0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvdC1qcy9saWIvZW5naW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2xpZ2h0aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb3QtanMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xldmVsLnRzIiwid2VicGFjazovLy8uL2VsZW1lbnRzL2VsZW1lbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy9HcmlkLnRzIiwid2VicGFjazovLy8uL3NyYy9HYW1lLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU3RhdHVzTGluZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvSGVscGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvTWVzc2FnZUxvZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUGxheWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9HbHlwaC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZS1zYXZlci9kaXN0L0ZpbGVTYXZlci5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRnJhbWUudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJGUkFDIiwiUk5HIiwidGhpcyIsIl9zZWVkIiwiX3MwIiwiX3MxIiwiX3MyIiwiX2MiLCJzZWVkIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtYXgiLCJNYXRoIiwibWluIiwiZmxvb3IiLCJnZXRVbmlmb3JtIiwibWVhbiIsInN0ZGRldiIsInUiLCJ2Iiwic3FydCIsImxvZyIsImFycmF5IiwibGVuZ3RoIiwicmVzdWx0IiwiY2xvbmUiLCJzbGljZSIsImluZGV4IiwiaW5kZXhPZiIsImdldEl0ZW0iLCJwdXNoIiwic3BsaWNlIiwiZGF0YSIsInRvdGFsIiwiaWQiLCJyYW5kb20iLCJwYXJ0Iiwic3RhdGUiLCJzZXRTdGF0ZSIsImdldFN0YXRlIiwibW9kIiwieCIsImNsYW1wIiwidmFsIiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwiZm9ybWF0IiwidGVtcGxhdGUiLCJhcmdzIiwibWFwIiwicmVwbGFjZSIsIm1hdGNoIiwiZ3JvdXAxIiwiZ3JvdXAyIiwib2JqIiwicGFydHMiLCJzcGxpdCIsInNoaWZ0IiwibWV0aG9kIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlZCIsImFwcGx5IiwiZmlyc3QiLCJmcm9tU3RyaW5nIiwic3RyIiwiY2FjaGVkIiwiQ0FDSEUiLCJ2YWx1ZXMiLCJwYXJzZUludCIsImFkZCIsImNvbG9yMSIsImNvbG9ycyIsImoiLCJhZGRfIiwibXVsdGlwbHkiLCJyb3VuZCIsIm11bHRpcGx5XyIsImludGVycG9sYXRlIiwiY29sb3IyIiwiZmFjdG9yIiwibGVycCIsImludGVycG9sYXRlSFNMIiwiaHNsMSIsInJnYjJoc2wiLCJoc2wyIiwiaHNsMnJnYiIsImxlcnBIU0wiLCJyYW5kb21pemUiLCJjb2xvciIsImRpZmYiLCJBcnJheSIsImdldE5vcm1hbCIsImciLCJiIiwiaCIsImh1ZTJyZ2IiLCJxIiwidG9SR0IiLCJqb2luIiwidG9IZXgiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiQ29vcmQiLCJ5Iiwicm93cyIsInNwYWNpbmciLCJkaXJlY3Rpb24iLCJjb2xzIiwiRXJyb3IiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJjb29yZCIsImlzSW5jbHVkZWRJbiIsImFkamFjZW50IiwiY29vcmRzIiwiZmlsdGVyIiwiZXF1YWwiLCJqc29uIiwibnVtQXJyYXkiLCJCYWNrZW5kIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiRWxlbWVudCIsImFzY2lpIiwiZ3JvdXAiLCJkZXNjcmlwdGlvbiIsImxpbmsiLCJhY3RpdmUiLCJ0aWxlcyIsImFic29ycHRpb24iLCJwaGFzZSIsImZvcmVncm91bmRDb2xvciIsImJhY2tncm91bmRDb2xvciIsIm1hdHJpeCIsInZlcnNpb24iLCJlbGVtIiwianNvbkVsZW1lbnRzIiwiZmluZCIsIm5hbWV2MSIsIlBvaW50ZXIiLCJpbnRlbnNpdHkiLCJwYXRoIiwic3VwZXIiLCJjZWxsIiwicmVwZWF0IiwiZ3JpZCIsIm1heEZyYW1lcyIsImFsaXZlIiwiZGVhZCIsImZvckVhY2giLCJwb2ludGVyIiwibmV4dCIsImluY2x1ZGVzIiwiYWJzb3JiZXJzIiwiYWJzb3JiZXIiLCJvbiIsImVsZW1lbnQiLCJtaXJyb3JzIiwibWlycm9yIiwicm90YXRpb24iLCJiZWFtc3BsaXR0ZXJzIiwiYmVhbXNwbGl0dGVyIiwicGhhc2VzaGlmdGVycyIsInBoYXNlc2hpZnRlciIsImNvbmNhdCIsIlNldCIsImZsYXQiLCJleHBvcnRKU09OIiwianNvbkNvb3JkIiwiaW1wb3J0SlNPTiIsInBvaW50ZXJzIiwidGVybWNvbG9yIiwicmdiIiwiVGVybSIsIl9vZmZzZXQiLCJfY3Vyc29yIiwiX2xhc3RDb2xvciIsImNiIiwic2V0VGltZW91dCIsInNldE9wdGlvbnMiLCJzaXplIiwid2lkdGgiLCJoZWlnaHQiLCJhdmFpbCIsImNvbXB1dGVTaXplIiwicHJvY2VzcyIsInN0ZG91dCIsIndyaXRlIiwiYmciLCJjbGVhckJlZm9yZSIsImNoIiwiZmciLCJkeCIsImR5IiwicG9zaXRpb25Ub0Fuc2kiLCJuZXdDb2xvciIsImNvbG9yVG9BbnNpIiwiY2hhcnMiLCJjb2x1bW5zIiwiQ2VsbCIsImZyb3plbiIsInJvdGF0aW9uQW5nbGUiLCJhbmdsZSIsImNvbnNvbGUiLCJhYnMiLCJnYW1lIiwiZHJhdyIsImZyb21OYW1lIiwidGhyZXNob2xkIiwiY29tcGxldGVkIiwicGVyY2VudGFnZSIsImdvYWxzIiwiZ29hbCIsIklucHV0VXRpbGl0eSIsImhhbmRsZUlucHV0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1bmRlZmluZWQiLCJwcm9jZXNzSW5wdXRDYWxsYmFjayIsInN0b3BQcm9jZXNzaW5nIiwiZXZlbnQiLCJwcm9jZXNzSW5wdXQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9jdHgiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb250ZXh0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FudmFzIiwib3B0cyIsImZvbnQiLCJmb250U3R5bGUiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJfdXBkYXRlU2l6ZSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIl9ub3JtYWxpemVkRXZlbnRUb1Bvc2l0aW9uIiwiX3NwYWNpbmdYIiwiX3NwYWNpbmdZIiwiX2hleFNpemUiLCJweCIsInRyYW5zcG9zZSIsInJldmVyc2UiLCJfZmlsbCIsImZpbGxUZXh0IiwiY2VpbCIsImF2YWlsV2lkdGgiLCJhdmFpbEhlaWdodCIsImhleFNpemVXaWR0aCIsImhleFNpemVIZWlnaHQiLCJoZXhTaXplIiwib2xkRm9udCIsIm1lYXN1cmVUZXh0IiwicmF0aW8iLCJub2RlU2l6ZSIsImN4IiwiY3kiLCJhIiwiYm9yZGVyIiwiY3R4IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwiZmlsbCIsImNoYXJXaWR0aCIsInhwcm9wIiwieXByb3AiLCJfY2FudmFzQ2FjaGUiLCJjYWNoZSIsIl9kcmF3V2l0aENhY2hlIiwiX2RyYXdOb0NhY2hlIiwiaGFzaCIsImRyYXdJbWFnZSIsImJveFdpZHRoIiwiYm94SGVpZ2h0Iiwid2lkdGhGcmFjdGlvbiIsImZvcmNlU3F1YXJlUmF0aW8iLCJfY29sb3JDYW52YXMiLCJ0aWxlV2lkdGgiLCJ0aWxlSGVpZ2h0IiwidGlsZUNvbG9yaXplIiwiY2xlYXJSZWN0IiwiZmdzIiwiYmdzIiwidGlsZSIsInRpbGVNYXAiLCJjb250ZXh0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwidGlsZVNldCIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsIl91bmlmb3JtcyIsIl9nbCIsIl9pbml0V2ViR0wiLCJlIiwiYWxlcnQiLCJtZXNzYWdlIiwiY29tcGxldGUiLCJfdXBkYXRlVGV4dHVyZSIsImdsIiwic2Npc3NvclkiLCJzY2lzc29yIiwiY2xlYXJDb2xvciIsInBhcnNlQ29sb3IiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTFmIiwidW5pZm9ybTRmdiIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsInByb2dyYW0iLCJ2c3MiLCJmc3MiLCJ2cyIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZnMiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsIlZTIiwiRlMiLCJ1c2VQcm9ncmFtIiwicG9zIiwiRmxvYXQzMkFycmF5IiwiYnVmIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwiY3JlYXRlUXVhZCIsIlVOSUZPUk1TIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiX3Byb2dyYW0iLCJlbmFibGUiLCJCTEVORCIsImJsZW5kRnVuY1NlcGFyYXRlIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIk9ORSIsIlNDSVNTT1JfVEVTVCIsImNhbnZhc1NpemUiLCJ2aWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiUkVQRUFUIiwiVEVYVFVSRV9XUkFQX1QiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0cmltIiwiY29sb3JDYWNoZSIsInBhcnNlZCIsIk51bWJlciIsIiQiLCJSRV9DT0xPUlMiLCJUWVBFX1RFWFQiLCJUWVBFX05FV0xJTkUiLCJUWVBFX0ZHIiwiVFlQRV9CRyIsIm1lYXN1cmUiLCJtYXhXaWR0aCIsInRva2VucyIsInRva2VuaXplIiwibGluZVdpZHRoIiwidG9rZW4iLCJ0eXBlIiwib2Zmc2V0IiwiSW5maW5pdHkiLCJsaW5lTGVuZ3RoIiwibGFzdFRva2VuV2l0aFNwYWNlIiwiYnJlYWtJbnNpZGVUb2tlbiIsImFyciIsInBvcCIsIm5leHRJbmRleCIsImJyZWFrSW5kZXgiLCJsYXN0SW5kZXhPZiIsImxhc3RUZXh0VG9rZW4iLCJicmVha0xpbmVzIiwidG9rZW5JbmRleCIsInJlbW92ZUJyZWFrQ2hhciIsIm5ld0JyZWFrVG9rZW4iLCJuZXdUZXh0VG9rZW4iLCJERUZBVUxUX1dJRFRIIiwiREVGQVVMVF9IRUlHSFQiLCJESVJTIiwiNCIsIjgiLCI2IiwiS0VZUyIsIlZLX0NBTkNFTCIsIlZLX0hFTFAiLCJWS19CQUNLX1NQQUNFIiwiVktfVEFCIiwiVktfQ0xFQVIiLCJWS19SRVRVUk4iLCJWS19FTlRFUiIsIlZLX1NISUZUIiwiVktfQ09OVFJPTCIsIlZLX0FMVCIsIlZLX1BBVVNFIiwiVktfQ0FQU19MT0NLIiwiVktfRVNDQVBFIiwiVktfU1BBQ0UiLCJWS19QQUdFX1VQIiwiVktfUEFHRV9ET1dOIiwiVktfRU5EIiwiVktfSE9NRSIsIlZLX0xFRlQiLCJWS19VUCIsIlZLX1JJR0hUIiwiVktfRE9XTiIsIlZLX1BSSU5UU0NSRUVOIiwiVktfSU5TRVJUIiwiVktfREVMRVRFIiwiVktfMCIsIlZLXzEiLCJWS18yIiwiVktfMyIsIlZLXzQiLCJWS181IiwiVktfNiIsIlZLXzciLCJWS184IiwiVktfOSIsIlZLX0NPTE9OIiwiVktfU0VNSUNPTE9OIiwiVktfTEVTU19USEFOIiwiVktfRVFVQUxTIiwiVktfR1JFQVRFUl9USEFOIiwiVktfUVVFU1RJT05fTUFSSyIsIlZLX0FUIiwiVktfQSIsIlZLX0IiLCJWS19DIiwiVktfRCIsIlZLX0UiLCJWS19GIiwiVktfRyIsIlZLX0giLCJWS19JIiwiVktfSiIsIlZLX0siLCJWS19MIiwiVktfTSIsIlZLX04iLCJWS19PIiwiVktfUCIsIlZLX1EiLCJWS19SIiwiVktfUyIsIlZLX1QiLCJWS19VIiwiVktfViIsIlZLX1ciLCJWS19YIiwiVktfWSIsIlZLX1oiLCJWS19DT05URVhUX01FTlUiLCJWS19OVU1QQUQwIiwiVktfTlVNUEFEMSIsIlZLX05VTVBBRDIiLCJWS19OVU1QQUQzIiwiVktfTlVNUEFENCIsIlZLX05VTVBBRDUiLCJWS19OVU1QQUQ2IiwiVktfTlVNUEFENyIsIlZLX05VTVBBRDgiLCJWS19OVU1QQUQ5IiwiVktfTVVMVElQTFkiLCJWS19BREQiLCJWS19TRVBBUkFUT1IiLCJWS19TVUJUUkFDVCIsIlZLX0RFQ0lNQUwiLCJWS19ESVZJREUiLCJWS19GMSIsIlZLX0YyIiwiVktfRjMiLCJWS19GNCIsIlZLX0Y1IiwiVktfRjYiLCJWS19GNyIsIlZLX0Y4IiwiVktfRjkiLCJWS19GMTAiLCJWS19GMTEiLCJWS19GMTIiLCJWS19GMTMiLCJWS19GMTQiLCJWS19GMTUiLCJWS19GMTYiLCJWS19GMTciLCJWS19GMTgiLCJWS19GMTkiLCJWS19GMjAiLCJWS19GMjEiLCJWS19GMjIiLCJWS19GMjMiLCJWS19GMjQiLCJWS19OVU1fTE9DSyIsIlZLX1NDUk9MTF9MT0NLIiwiVktfQ0lSQ1VNRkxFWCIsIlZLX0VYQ0xBTUFUSU9OIiwiVktfRE9VQkxFX1FVT1RFIiwiVktfSEFTSCIsIlZLX0RPTExBUiIsIlZLX1BFUkNFTlQiLCJWS19BTVBFUlNBTkQiLCJWS19VTkRFUlNDT1JFIiwiVktfT1BFTl9QQVJFTiIsIlZLX0NMT1NFX1BBUkVOIiwiVktfQVNURVJJU0siLCJWS19QTFVTIiwiVktfUElQRSIsIlZLX0hZUEhFTl9NSU5VUyIsIlZLX09QRU5fQ1VSTFlfQlJBQ0tFVCIsIlZLX0NMT1NFX0NVUkxZX0JSQUNLRVQiLCJWS19USUxERSIsIlZLX0NPTU1BIiwiVktfUEVSSU9EIiwiVktfU0xBU0giLCJWS19CQUNLX1FVT1RFIiwiVktfT1BFTl9CUkFDS0VUIiwiVktfQkFDS19TTEFTSCIsIlZLX0NMT1NFX0JSQUNLRVQiLCJWS19RVU9URSIsIlZLX01FVEEiLCJWS19BTFRHUiIsIlZLX1dJTiIsIlZLX0tBTkEiLCJWS19IQU5HVUwiLCJWS19FSVNVIiwiVktfSlVOSkEiLCJWS19GSU5BTCIsIlZLX0hBTkpBIiwiVktfS0FOSkkiLCJWS19DT05WRVJUIiwiVktfTk9OQ09OVkVSVCIsIlZLX0FDQ0VQVCIsIlZLX01PREVDSEFOR0UiLCJWS19TRUxFQ1QiLCJWS19QUklOVCIsIlZLX0VYRUNVVEUiLCJWS19TTEVFUCIsIkJBQ0tFTkRTIiwiREVGQVVMVF9PUFRJT05TIiwibGF5b3V0IiwiX2RhdGEiLCJfZGlydHkiLCJhc3NpZ24iLCJERUJVRyIsIl90aWNrIiwiX2JhY2tlbmQiLCJzY2hlZHVsZSIsIndoYXQiLCJjdG9yIiwiZ2V0Q29udGFpbmVyIiwiY29tcHV0ZUZvbnRTaXplIiwidG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwiZXZlbnRUb1Bvc2l0aW9uIiwidGV4dCIsImxpbmVzIiwiaXNTcGFjZSIsImlzUHJldlNwYWNlIiwiaXNGdWxsV2lkdGgiLCJpc1ByZXZGdWxsV2lkdGgiLCJjYyIsImNoYXJDb2RlQXQiLCJfZHJhdyIsIlJlY3QiLCJIZXgiLCJUaWxlIiwiVGlsZUdMIiwid29yZHMiLCJvcmRlciIsInByaW9yIiwiX2JvdW5kYXJ5IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiX3N1ZmZpeCIsIl9wcmVmaXgiLCJfcHJpb3JWYWx1ZXMiLCJfc2FtcGxlIiwiX2pvaW4iLCJfc3BsaXQiLCJzdWJjb250ZXh0IiwiX29ic2VydmVFdmVudCIsInByaW9yQ291bnQiLCJrZXlzIiwiZGF0YUNvdW50IiwiZXZlbnRDb3VudCIsIl9iYWNrb2ZmIiwiYXZhaWxhYmxlIiwiZ2V0V2VpZ2h0ZWRWYWx1ZSIsIkV2ZW50UXVldWUiLCJfdGltZSIsIl9ldmVudHMiLCJfZXZlbnRUaW1lcyIsInRpbWUiLCJfcmVtb3ZlIiwiX3F1ZXVlIiwiX3JlcGVhdCIsIl9jdXJyZW50IiwiZ2V0VGltZSIsIml0ZW0iLCJnZXRFdmVudFRpbWUiLCJyZW1vdmUiLCJTaW1wbGUiLCJTcGVlZCIsImdldFNwZWVkIiwiQWN0aW9uIiwiX2RlZmF1bHREdXJhdGlvbiIsIl9kdXJhdGlvbiIsImxpZ2h0UGFzc2VzQ2FsbGJhY2siLCJfbGlnaHRQYXNzZXMiLCJ0b3BvbG9neSIsImRpcnMiLCJjb3VudEZhY3RvciIsInN0YXJ0T2Zmc2V0IiwiT0NUQU5UUyIsIkRpc2NyZXRlU2hhZG93Y2FzdGluZyIsIlIiLCJjYWxsYmFjayIsIkEiLCJCIiwiYmxvY2tzIiwiREFUQSIsIm5laWdoYm9ycyIsIl9nZXRDaXJjbGUiLCJfdmlzaWJsZUNvb3JkcyIsInYxIiwidjIiLCJjb3VudCIsIlByZWNpc2VTaGFkb3djYXN0aW5nIiwiQTEiLCJBMiIsInZpc2liaWxpdHkiLCJTSEFET1dTIiwibmVpZ2hib3JDb3VudCIsIl9jaGVja1Zpc2liaWxpdHkiLCJpbmRleDEiLCJlZGdlMSIsIm9sZCIsImluZGV4MiIsImVkZ2UyIiwidmlzaWJsZUxlbmd0aCIsInZpc2libGUiLCJQIiwiUDEiLCJQMiIsIlJlY3Vyc2l2ZVNoYWRvd2Nhc3RpbmciLCJfcmVuZGVyT2N0YW50IiwiZGlyIiwicHJldmlvdXNPY3RhbnQiLCJuZXh0UHJldmlvdXNPY3RhbnQiLCJuZXh0T2N0YW50Iiwib2N0YW50IiwiX2Nhc3RWaXNpYmlsaXR5Iiwic3RhcnRYIiwic3RhcnRZIiwicm93IiwidmlzU2xvcGVTdGFydCIsInZpc1Nsb3BlRW5kIiwicmFkaXVzIiwieHgiLCJ4eSIsInl4IiwieXkiLCJibG9ja2VkIiwibmV3U3RhcnQiLCJtYXBYIiwibWFwWSIsInNsb3BlU3RhcnQiLCJzbG9wZUVuZCIsIl93aWR0aCIsIl9oZWlnaHQiLCJfcm9vbXMiLCJfY29ycmlkb3JzIiwiRmVhdHVyZSIsIngxIiwieTEiLCJ4MiIsInkyIiwiZG9vclgiLCJkb29yWSIsIl94MSIsIl95MSIsIl94MiIsIl95MiIsIl9kb29ycyIsImFkZERvb3IiLCJyb29tV2lkdGgiLCJnZXRVbmlmb3JtSW50Iiwicm9vbUhlaWdodCIsImlzV2FsbENhbGxiYWNrIiwiY2FuQmVEdWdDYWxsYmFjayIsImRpZ0NhbGxiYWNrIiwiZW5kWCIsImVuZFkiLCJfc3RhcnRYIiwiX3N0YXJ0WSIsIl9lbmRYIiwiX2VuZFkiLCJfZW5kc1dpdGhBV2FsbCIsImNvcnJpZG9yTGVuZ3RoIiwic3giLCJzeSIsIm54IiwibnkiLCJvayIsImZpcnN0Q29ybmVyQmFkIiwic2Vjb25kQ29ybmVyQmFkIiwicHJpb3JpdHlXYWxsQ2FsbGJhY2siLCJGRUFUVVJFUyIsImFkZFRvTGlzdCIsIkwiLCJyZW1vdmVGcm9tTGlzdCIsIkFyZW5hIiwidyIsIlVuaWZvcm0iLCJyb29tRHVnUGVyY2VudGFnZSIsInRpbWVMaW1pdCIsIl9tYXAiLCJfZHVnIiwiX3Jvb21BdHRlbXB0cyIsIl9jb3JyaWRvckF0dGVtcHRzIiwiX2Nvbm5lY3RlZCIsIl91bmNvbm5lY3RlZCIsIl9kaWdDYWxsYmFjayIsIl9jYW5CZUR1Z0NhbGxiYWNrIiwiX2lzV2FsbENhbGxiYWNrIiwidDEiLCJEYXRlIiwibm93IiwiX2ZpbGxNYXAiLCJfZ2VuZXJhdGVSb29tcyIsIl9nZW5lcmF0ZUNvcnJpZG9ycyIsInJvb20iLCJfZ2VuZXJhdGVSb29tIiwiY3JlYXRlUmFuZG9tIiwiaXNWYWxpZCIsImNudCIsImNsZWFyRG9vcnMiLCJzaHVmZmxlIiwiY29ubmVjdGVkIiwicm9vbTEiLCJfY2xvc2VzdFJvb20iLCJyb29tMiIsIl9jb25uZWN0Um9vbXMiLCJyb29tcyIsImRpc3QiLCJjZW50ZXIiLCJnZXRDZW50ZXIiLCJzdGFydCIsImVuZCIsImRpckluZGV4MSIsImRpckluZGV4MiIsImNlbnRlcjEiLCJjZW50ZXIyIiwiZGlmZlgiLCJkaWZmWSIsImdldExlZnQiLCJnZXRSaWdodCIsImdldFRvcCIsImdldEJvdHRvbSIsIl9wbGFjZUluV2FsbCIsIl9kaWdMaW5lIiwibWlkIiwibWlkMSIsIm1pZDIiLCJkaXJJbmRleCIsImxhc3RCYWRJbmRleCIsInBvaW50cyIsImNvcnJpZG9yIiwiQ2VsbHVsYXIiLCJib3JuIiwic3Vydml2ZSIsIl9kaXJzIiwicHJvYmFiaWxpdHkiLCJuZXdNYXAiLCJ3aWR0aFN0ZXAiLCJ3aWR0aFN0YXJ0IiwiY3VyIiwibmNvdW50IiwiX2dldE5laWdoYm9ycyIsIl9zZXJ2aWNlQ2FsbGJhY2siLCJjb25uZWN0aW9uQ2FsbGJhY2siLCJhbGxGcmVlU3BhY2UiLCJub3RDb25uZWN0ZWQiLCJ3aWR0aFN0YXJ0cyIsIl9mcmVlU3BhY2UiLCJfcG9pbnRLZXkiLCJfZmluZENvbm5lY3RlZCIsIl9nZXRGcm9tVG8iLCJmcm9tIiwidG8iLCJsb2NhbCIsIl90dW5uZWxUb0Nvbm5lY3RlZDYiLCJfdHVubmVsVG9Db25uZWN0ZWQiLCJrIiwicHAiLCJjb25uZWN0ZWRLZXlzIiwibm90Q29ubmVjdGVkS2V5cyIsIl9nZXRDbG9zZXN0IiwicG9pbnQiLCJzcGFjZSIsIm1pblBvaW50IiwibWluRGlzdCIsInN0YWNrIiwia2VlcE5vdENvbm5lY3RlZCIsInRlc3RzIiwicGtleSIsInN0ZXBXaWR0aCIsIkRpZ2dlciIsImR1Z1BlcmNlbnRhZ2UiLCJfZmVhdHVyZXMiLCJfZmVhdHVyZUF0dGVtcHRzIiwiX3dhbGxzIiwiX3ByaW9yaXR5V2FsbENhbGxiYWNrIiwiYXJlYSIsIl9maXJzdFJvb20iLCJwcmlvcml0eVdhbGxzIiwid2FsbCIsIl9maW5kV2FsbCIsIl9nZXREaWdnaW5nRGlyZWN0aW9uIiwiZmVhdHVyZUF0dGVtcHRzIiwiX3RyeUZlYXR1cmUiLCJfcmVtb3ZlU3Vycm91bmRpbmdXYWxscyIsIl9hZGREb29ycyIsImNyZWF0ZVJhbmRvbUNlbnRlciIsInByaW8xIiwicHJpbzIiLCJzb3J0IiwiZmVhdHVyZU5hbWUiLCJmZWF0dXJlIiwiY3JlYXRlUmFuZG9tQXQiLCJjcmVhdGVQcmlvcml0eVdhbGxzIiwiZGVsdGFzIiwiZGVsdGEiLCJhZGREb29ycyIsIkVsbGVyTWF6ZSIsIkRpdmlkZWRNYXplIiwiYXJndW1lbnRzIiwiX3N0YWNrIiwiX3Byb2Nlc3MiLCJfcGFydGl0aW9uUm9vbSIsImF2YWlsWCIsImF2YWlsWSIsIndhbGxzIiwic29saWQiLCJob2xlIiwiSWNleU1hemUiLCJyZWd1bGFyaXR5IiwiX3JlZ3VsYXJpdHkiLCJkb25lIiwiX3JhbmRvbWl6ZSIsIl9pc0ZyZWUiLCJSb2d1ZSIsImNvbm5lY3RlZENlbGxzIiwiY2VsbFdpZHRoIiwiY2VsbEhlaWdodCIsIl9jYWxjdWxhdGVSb29tU2l6ZSIsIl9pbml0Um9vbXMiLCJfY29ubmVjdFVuY29ubmVjdGVkUm9vbXMiLCJfY3JlYXRlUmFuZG9tUm9vbUNvbm5lY3Rpb25zIiwiX2NyZWF0ZVJvb21zIiwiX2NyZWF0ZUNvcnJpZG9ycyIsImlkeCIsIm5jZ3giLCJuY2d5Iiwib3RoZXJSb29tIiwiZGlyVG9DaGVjayIsImNneCIsImNneSIsImZvdW5kIiwidmFsaWRSb29tIiwiY3ciLCJkaXJlY3Rpb25zIiwiZGlySWR4IiwibmV3SSIsIm5ld0oiLCJyb29tdyIsInJvb21oIiwiY3dwIiwiY2hwIiwic3hPZmZzZXQiLCJzeU9mZnNldCIsImlpIiwiamoiLCJhUm9vbSIsImFEaXJlY3Rpb24iLCJyeCIsInJ5IiwiZG9vciIsInN0YXJ0UG9zaXRpb24iLCJlbmRQb3NpdGlvbiIsInRlbXBEaXN0IiwieERpciIsInlEaXIiLCJtb3ZlIiwieE9mZnNldCIsInlPZmZzZXQiLCJ4cG9zIiwieXBvcyIsIm1vdmVzIiwieEFicyIsInlBYnMiLCJwZXJjZW50IiwiZmlyc3RIYWxmIiwic2Vjb25kSGFsZiIsImNvbm5lY3Rpb24iLCJvdGhlcldhbGwiLCJfZHJhd0NvcnJpZG9yIiwiX2dldFdhbGxQb3NpdGlvbiIsIk5vaXNlIiwiRjIiLCJHMiIsIlNpbXBsZXgiLCJncmFkaWVudHMiLCJfZ3JhZGllbnRzIiwicGVybXV0YXRpb25zIiwiX3Blcm1zIiwiX2luZGV4ZXMiLCJ4aW4iLCJ5aW4iLCJnaSIsImkxIiwiajEiLCJwZXJtcyIsImluZGV4ZXMiLCJuMCIsIm4xIiwibjIiLCJ4MCIsInkwIiwidDAiLCJncmFkIiwidDIiLCJ0b1giLCJ0b1kiLCJwYXNzYWJsZUNhbGxiYWNrIiwiX3RvWCIsIl90b1kiLCJfcGFzc2FibGVDYWxsYmFjayIsIkRpamtzdHJhIiwiX2NvbXB1dGVkIiwiX3RvZG8iLCJfYWRkIiwiZnJvbVgiLCJmcm9tWSIsIl9jb21wdXRlIiwicHJldiIsIm5laWdoYm9yIiwiQVN0YXIiLCJfZG9uZSIsIl9mcm9tWCIsIl9mcm9tWSIsIl9kaXN0YW5jZSIsImYiLCJpdGVtRiIsIkVuZ2luZSIsInNjaGVkdWxlciIsIl9zY2hlZHVsZXIiLCJfbG9jayIsInVubG9jayIsImFjdG9yIiwibG9jayIsImFjdCIsInRoZW4iLCJyZWZsZWN0aXZpdHlDYWxsYmFjayIsIl9yZWZsZWN0aXZpdHlDYWxsYmFjayIsInBhc3NlcyIsImVtaXNzaW9uVGhyZXNob2xkIiwicmFuZ2UiLCJfbGlnaHRzIiwiX3JlZmxlY3Rpdml0eUNhY2hlIiwiX2ZvdkNhY2hlIiwicmVzZXQiLCJmb3YiLCJfZm92IiwibGlnaHRpbmdDYWxsYmFjayIsImRvbmVDZWxscyIsImVtaXR0aW5nQ2VsbHMiLCJsaXRDZWxscyIsImxpZ2h0IiwiX2VtaXRMaWdodCIsIl9jb21wdXRlRW1pdHRlcnMiLCJsaXRLZXkiLCJfZW1pdExpZ2h0RnJvbUNlbGwiLCJyZWZsZWN0aXZpdHkiLCJlbWlzc2lvbiIsIl91cGRhdGVGT1YiLCJmb3ZLZXkiLCJmb3JtRmFjdG9yIiwia2V5MSIsImNvbXB1dGUiLCJ2aXMiLCJVdGlsIiwidXRpbCIsIkNvbG9yIiwiVGV4dCIsImJvZHkiLCJvbmxvYWQiLCJsZXZlbCIsIkxldmVsIiwiaGludHMiLCJmaWx0ZXJlZEJ5Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFB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QyxHQUFJLEdBQ1YsRUFBRyxDQUFDLElBQUssR0FDVCxJQUFLLENBQUMsSUFBSyxHQUVYLElBQUssQ0FBQyxFQUFHLElBQ1QsRUFBRyxDQUFDLEdBQUksSUFDUixFQUFHLENBQUMsSUFBSyxJQUVULElBQUssQ0FBQyxFQUFHLEtBQ1QsSUFBSyxDQUFDLEdBQUksS0FDVixJQUFLLENBQUMsSUFBSyxLQUNYLElBQUssQ0FBQyxJQUFLLEtBRVgsSUFBSyxDQUFDLEVBQUcsS0FDVCxFQUFHLENBQUMsRUFBRyxLQUVQLEtBQU0sQ0FBQyxJQUFLLEdBQ1osS0FBTSxDQUFDLElBQUssR0FFWixLQUFNLENBQUMsSUFBSyxHQUNaLEtBQU0sQ0FBQyxJQUFLLEdBQ1osS0FBTSxDQUFDLElBQUssR0FFWixJQUFLLENBQUMsRUFBRyxLQUNULElBQUssQ0FBQyxHQUFJLEtBQ1YsSUFBSyxDQUFDLElBQUssS0FDWCxLQUFNLENBQUMsSUFBSyxLQUVaLElBQUssQ0FBQyxFQUFHLEtBQ1QsSUFBSyxDQUFDLEdBQUksS0FDVixJQUFLLENBQUMsSUFBSyxLQUNYLElBQUssQ0FBQyxJQUFLLEtBQ1gsSUFBSyxDQUFDLElBQUssS0FDWCxJQUFLLENBQUMsSUFBSyxLQUNYLElBQUssQ0FBQyxJQUFLLEtBQ1gsSUFBSyxDQUFDLElBQUssS0FFWCxFQUFHLENBQUMsS0FBTSxHQUVWLEVBQUcsQ0FBQyxLQUFNLEdBRVIsRUFBRyxDQUFDLEtBQU0sR0FHUixJQUFLLENBQUMsS0FBTSxHQUNaLEVBQUcsQ0FBQyxLQUFNLEdBQ1YsRUFBRyxDQUFDLEtBQU0sSUFHZCxNQUFPLEtBQUssU0FBUyxNQUNyQixPQUFRLEtBQUssU0FBUyxPQUN0QixTQUFVLEtBUWQsU0FBUyxLQUFLLFlBQVksS0FBSyxRQUFULGdCQVF0QkEsS0FBSyxVQUFZLElBQUksRUFBWSxRQUMvQixLQUFLLE1BQVEsRUFFYixLQUFLLEtBQU8sS0FBSyxNQUFNLEtBQ3ZCLEtBQUssT0FBTyxLQUFELGtCQUNiLEtBQUssV0FBYSxJQUFJLEVBQWEsUUFBUSxLQUFNLEtBQUss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WSxHLEVBSWhCLFFBQVMsSUFDYjNRLEVBQVEsR0FBRyxLLEVBQ0wsV0FBYSxFQUFTLFFBQVEsYyxFQUlsQyxRQUFTLElBQ1gsRUFBUSxHQUFHLEtBQ1hBLEVBQVEsV0FDSCxFQUFJLEVBQU8sU0FBVyxFQUFRLFVBQVksS0FBTyxPLEVBTTlDLFFBQVMsSUFDakIsR0FBSSxFQUFRLEdBQUcsR0FBZSxDQUcxQixFQUFRLFdBQWEsRUFFekIsTUFBTSxHQUFhLEVBQUksRUFBYSxTQUFXLEVBQVEsVUFBWSxLQUFPLElBQ3hFLEtBQUssU0FBUyxLQUFLLElBQUksRUFBVSxRQUFRLEVBQVEsTUFBTyxFQUFXLEVBQVEsZUFLakYsRUFBYyxRQUFTLElBQ2pCLEVBQVEsR0FBRyxLQUNiLEVBQVEsT0FBUyxFQUFRLE1BQVEsRUFBYSxRQUFRLE9BQVMsS0FNakUsS0FBSyxNQUFNLFFBQVEsSUFDWCxFQUFLLE1BQU0sTUFBTSxFQUFRLFNBQzNCLEVBQUssT0FBNkIsSUFBcEIsRUFBUSxVQUNwQixFQUFRLFVBQVksTyxLQU0zQixTQUFXLEtBQUssU0FBUyxPQUFPLEdBQzFCLEVBQVEsVUFBWSxHQUc3QnpKLEtBQUssVUFDSCxLQUFLLE1BQU0sV0FBWSxFQUV2QixLQUFLLEtBQU0sR0FJTixJQUFILEtBQUssU0FBRixTQUNMLEtBQUssTUFBTSxXQUFxQixFQUNoQyxLQUFLLEtBQU0sRyxJQUVSLEVBQU0sS0FBSyxNQUFPLEtBQUssS0FBTyxFQUFHLEtBQUssU0FBVSxLQUFLLEssY0FJMUQsTUFBTSxFQUFjLEdBU3RCLE9BUEUsS0FBSyxTQUFTLFFBQVEsSUFDbEIsc0NBQ0UsRUFBWSxLQUFLLE9BS2xCLEVBR1QsV0FDTSxJQUFJLFdBQWtCLEtBQUssUUFBVSxVQUFZLDJCQUEyQixLQUFLLGFBQWEsS0FBSyxTQUFTLDRCLE9BckpwSCxRIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMik7XG4iLCIvKipcbiAqIFRoaXMgY29kZSBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBBbGVhIGFsZ29yaXRobTsgKEMpIDIwMTAgSm9oYW5uZXMgQmFhZ8O4ZS5cbiAqIEFsZWEgaXMgbGljZW5zZWQgYWNjb3JkaW5nIHRvIHRoZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01JVF9MaWNlbnNlLlxuICovXG5jb25zdCBGUkFDID0gMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLyogMl4tMzIgKi9cbmNsYXNzIFJORyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSAwO1xuICAgICAgICB0aGlzLl9zMCA9IDA7XG4gICAgICAgIHRoaXMuX3MxID0gMDtcbiAgICAgICAgdGhpcy5fczIgPSAwO1xuICAgICAgICB0aGlzLl9jID0gMDtcbiAgICB9XG4gICAgZ2V0U2VlZCgpIHsgcmV0dXJuIHRoaXMuX3NlZWQ7IH1cbiAgICAvKipcbiAgICAgKiBTZWVkIHRoZSBudW1iZXIgZ2VuZXJhdG9yXG4gICAgICovXG4gICAgc2V0U2VlZChzZWVkKSB7XG4gICAgICAgIHNlZWQgPSAoc2VlZCA8IDEgPyAxIC8gc2VlZCA6IHNlZWQpO1xuICAgICAgICB0aGlzLl9zZWVkID0gc2VlZDtcbiAgICAgICAgdGhpcy5fczAgPSAoc2VlZCA+Pj4gMCkgKiBGUkFDO1xuICAgICAgICBzZWVkID0gKHNlZWQgKiA2OTA2OSArIDEpID4+PiAwO1xuICAgICAgICB0aGlzLl9zMSA9IHNlZWQgKiBGUkFDO1xuICAgICAgICBzZWVkID0gKHNlZWQgKiA2OTA2OSArIDEpID4+PiAwO1xuICAgICAgICB0aGlzLl9zMiA9IHNlZWQgKiBGUkFDO1xuICAgICAgICB0aGlzLl9jID0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFBzZXVkb3JhbmRvbSB2YWx1ZSBbMCwxKSwgdW5pZm9ybWx5IGRpc3RyaWJ1dGVkXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgbGV0IHQgPSAyMDkxNjM5ICogdGhpcy5fczAgKyB0aGlzLl9jICogRlJBQztcbiAgICAgICAgdGhpcy5fczAgPSB0aGlzLl9zMTtcbiAgICAgICAgdGhpcy5fczEgPSB0aGlzLl9zMjtcbiAgICAgICAgdGhpcy5fYyA9IHQgfCAwO1xuICAgICAgICB0aGlzLl9zMiA9IHQgLSB0aGlzLl9jO1xuICAgICAgICByZXR1cm4gdGhpcy5fczI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBsb3dlckJvdW5kIFRoZSBsb3dlciBlbmQgb2YgdGhlIHJhbmdlIHRvIHJldHVybiBhIHZhbHVlIGZyb20sIGluY2x1c2l2ZVxuICAgICAqIEBwYXJhbSB1cHBlckJvdW5kIFRoZSB1cHBlciBlbmQgb2YgdGhlIHJhbmdlIHRvIHJldHVybiBhIHZhbHVlIGZyb20sIGluY2x1c2l2ZVxuICAgICAqIEByZXR1cm5zIFBzZXVkb3JhbmRvbSB2YWx1ZSBbbG93ZXJCb3VuZCwgdXBwZXJCb3VuZF0sIHVzaW5nIFJPVC5STkcuZ2V0VW5pZm9ybSgpIHRvIGRpc3RyaWJ1dGUgdGhlIHZhbHVlXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUludChsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gICAgICAgIGxldCBtYXggPSBNYXRoLm1heChsb3dlckJvdW5kLCB1cHBlckJvdW5kKTtcbiAgICAgICAgbGV0IG1pbiA9IE1hdGgubWluKGxvd2VyQm91bmQsIHVwcGVyQm91bmQpO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmdldFVuaWZvcm0oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBtZWFuIE1lYW4gdmFsdWVcbiAgICAgKiBAcGFyYW0gc3RkZGV2IFN0YW5kYXJkIGRldmlhdGlvbi4gfjk1JSBvZiB0aGUgYWJzb2x1dGUgdmFsdWVzIHdpbGwgYmUgbG93ZXIgdGhhbiAyKnN0ZGRldi5cbiAgICAgKiBAcmV0dXJucyBBIG5vcm1hbGx5IGRpc3RyaWJ1dGVkIHBzZXVkb3JhbmRvbSB2YWx1ZVxuICAgICAqL1xuICAgIGdldE5vcm1hbChtZWFuID0gMCwgc3RkZGV2ID0gMSkge1xuICAgICAgICBsZXQgdSwgdiwgcjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdSA9IDIgKiB0aGlzLmdldFVuaWZvcm0oKSAtIDE7XG4gICAgICAgICAgICB2ID0gMiAqIHRoaXMuZ2V0VW5pZm9ybSgpIC0gMTtcbiAgICAgICAgICAgIHIgPSB1ICogdSArIHYgKiB2O1xuICAgICAgICB9IHdoaWxlIChyID4gMSB8fCByID09IDApO1xuICAgICAgICBsZXQgZ2F1c3MgPSB1ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICAgICAgcmV0dXJuIG1lYW4gKyBnYXVzcyAqIHN0ZGRldjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgUHNldWRvcmFuZG9tIHZhbHVlIFsxLDEwMF0gaW5jbHVzaXZlLCB1bmlmb3JtbHkgZGlzdHJpYnV0ZWRcbiAgICAgKi9cbiAgICBnZXRQZXJjZW50YWdlKCkge1xuICAgICAgICByZXR1cm4gMSArIE1hdGguZmxvb3IodGhpcy5nZXRVbmlmb3JtKCkgKiAxMDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBSYW5kb21seSBwaWNrZWQgaXRlbSwgbnVsbCB3aGVuIGxlbmd0aD0wXG4gICAgICovXG4gICAgZ2V0SXRlbShhcnJheSkge1xuICAgICAgICBpZiAoIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5W01hdGguZmxvb3IodGhpcy5nZXRVbmlmb3JtKCkgKiBhcnJheS5sZW5ndGgpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTmV3IGFycmF5IHdpdGggcmFuZG9taXplZCBpdGVtc1xuICAgICAqL1xuICAgIHNodWZmbGUoYXJyYXkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgY2xvbmUgPSBhcnJheS5zbGljZSgpO1xuICAgICAgICB3aGlsZSAoY2xvbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBjbG9uZS5pbmRleE9mKHRoaXMuZ2V0SXRlbShjbG9uZSkpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY2xvbmUuc3BsaWNlKGluZGV4LCAxKVswXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGEga2V5PXdoYXRldmVyLCB2YWx1ZT13ZWlnaHQgKHJlbGF0aXZlIHByb2JhYmlsaXR5KVxuICAgICAqIEByZXR1cm5zIHdoYXRldmVyXG4gICAgICovXG4gICAgZ2V0V2VpZ2h0ZWRWYWx1ZShkYXRhKSB7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIGZvciAobGV0IGlkIGluIGRhdGEpIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGRhdGFbaWRdO1xuICAgICAgICB9XG4gICAgICAgIGxldCByYW5kb20gPSB0aGlzLmdldFVuaWZvcm0oKSAqIHRvdGFsO1xuICAgICAgICBsZXQgaWQsIHBhcnQgPSAwO1xuICAgICAgICBmb3IgKGlkIGluIGRhdGEpIHtcbiAgICAgICAgICAgIHBhcnQgKz0gZGF0YVtpZF07XG4gICAgICAgICAgICBpZiAocmFuZG9tIDwgcGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBieSBzb21lIGZsb2F0aW5nLXBvaW50IGFubm95YW5jZSB3ZSBoYXZlXG4gICAgICAgIC8vIHJhbmRvbSA+PSB0b3RhbCwganVzdCByZXR1cm4gdGhlIGxhc3QgaWQuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IFJORyBzdGF0ZS4gVXNlZnVsIGZvciBzdG9yaW5nIHRoZSBzdGF0ZSBhbmQgcmUtc2V0dGluZyBpdCB2aWEgc2V0U3RhdGUuXG4gICAgICogQHJldHVybnMgSW50ZXJuYWwgc3RhdGVcbiAgICAgKi9cbiAgICBnZXRTdGF0ZSgpIHsgcmV0dXJuIFt0aGlzLl9zMCwgdGhpcy5fczEsIHRoaXMuX3MyLCB0aGlzLl9jXTsgfVxuICAgIC8qKlxuICAgICAqIFNldCBhIHByZXZpb3VzbHkgcmV0cmlldmVkIHN0YXRlLlxuICAgICAqL1xuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuX3MwID0gc3RhdGVbMF07XG4gICAgICAgIHRoaXMuX3MxID0gc3RhdGVbMV07XG4gICAgICAgIHRoaXMuX3MyID0gc3RhdGVbMl07XG4gICAgICAgIHRoaXMuX2MgPSBzdGF0ZVszXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBjbG9uZWQgUk5HXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGxldCBjbG9uZSA9IG5ldyBSTkcoKTtcbiAgICAgICAgcmV0dXJuIGNsb25lLnNldFN0YXRlKHRoaXMuZ2V0U3RhdGUoKSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IFJORygpLnNldFNlZWQoRGF0ZS5ub3coKSk7XG4iLCIvKipcbiAqIEFsd2F5cyBwb3NpdGl2ZSBtb2R1bHVzXG4gKiBAcGFyYW0geCBPcGVyYW5kXG4gKiBAcGFyYW0gbiBNb2R1bHVzXG4gKiBAcmV0dXJucyB4IG1vZHVsbyBuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb2QoeCwgbikge1xuICAgIHJldHVybiAoeCAlIG4gKyBuKSAlIG47XG59XG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gICAgaWYgKHZhbCA8IG1pbilcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICBpZiAodmFsID4gbWF4KVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIHJldHVybiB2YWw7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnN1YnN0cmluZygxKTtcbn1cbi8qKlxuICogRm9ybWF0IGEgc3RyaW5nIGluIGEgZmxleGlibGUgd2F5LiBTY2FucyBmb3IgJXMgc3RyaW5ncyBhbmQgcmVwbGFjZXMgdGhlbSB3aXRoIGFyZ3VtZW50cy4gTGlzdCBvZiBwYXR0ZXJucyBpcyBtb2RpZmlhYmxlIHZpYSBTdHJpbmcuZm9ybWF0Lm1hcC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZVxuICogQHBhcmFtIHthbnl9IFthcmd2XVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KHRlbXBsYXRlLCAuLi5hcmdzKSB7XG4gICAgbGV0IG1hcCA9IGZvcm1hdC5tYXA7XG4gICAgbGV0IHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoLCBncm91cDEsIGdyb3VwMiwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJBdChpbmRleCAtIDEpID09IFwiJVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2guc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb2JqID0gYXJnc1swXTtcbiAgICAgICAgbGV0IGdyb3VwID0gZ3JvdXAxIHx8IGdyb3VwMjtcbiAgICAgICAgbGV0IHBhcnRzID0gZ3JvdXAuc3BsaXQoXCIsXCIpO1xuICAgICAgICBsZXQgbmFtZSA9IHBhcnRzLnNoaWZ0KCkgfHwgXCJcIjtcbiAgICAgICAgbGV0IG1ldGhvZCA9IG1hcFtuYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIG9iaiA9IGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgbGV0IHJlcGxhY2VkID0gb2JqW21ldGhvZF0uYXBwbHkob2JqLCBwYXJ0cyk7XG4gICAgICAgIGxldCBmaXJzdCA9IG5hbWUuY2hhckF0KDApO1xuICAgICAgICBpZiAoZmlyc3QgIT0gZmlyc3QudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgcmVwbGFjZWQgPSBjYXBpdGFsaXplKHJlcGxhY2VkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVwbGFjZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvJSg/OihbYS16XSspfCg/OnsoW159XSspfSkpL2dpLCByZXBsYWNlcik7XG59XG5mb3JtYXQubWFwID0ge1xuICAgIFwic1wiOiBcInRvU3RyaW5nXCJcbn07XG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCBSTkcgZnJvbSBcIi4vcm5nLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZnJvbVN0cmluZyhzdHIpIHtcbiAgICBsZXQgY2FjaGVkLCByO1xuICAgIGlmIChzdHIgaW4gQ0FDSEUpIHtcbiAgICAgICAgY2FjaGVkID0gQ0FDSEVbc3RyXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChzdHIuY2hhckF0KDApID09IFwiI1wiKSB7IC8vIGhleCByZ2JcbiAgICAgICAgICAgIGxldCBtYXRjaGVkID0gc3RyLm1hdGNoKC9bMC05YS1mXS9naSkgfHwgW107XG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gbWF0Y2hlZC5tYXAoKHgpID0+IHBhcnNlSW50KHgsIDE2KSk7XG4gICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVkID0gdmFsdWVzLm1hcCgoeCkgPT4geCAqIDE3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpICsgMV0gKz0gMTYgKiB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhY2hlZCA9IHZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgociA9IHN0ci5tYXRjaCgvcmdiXFwoKFswLTksIF0rKVxcKS9pKSkpIHsgLy8gZGVjaW1hbCByZ2JcbiAgICAgICAgICAgIGNhY2hlZCA9IHJbMV0uc3BsaXQoL1xccyosXFxzKi8pLm1hcCgoeCkgPT4gcGFyc2VJbnQoeCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBodG1sIG5hbWVcbiAgICAgICAgICAgIGNhY2hlZCA9IFswLCAwLCAwXTtcbiAgICAgICAgfVxuICAgICAgICBDQUNIRVtzdHJdID0gY2FjaGVkO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkLnNsaWNlKCk7XG59XG4vKipcbiAqIEFkZCB0d28gb3IgbW9yZSBjb2xvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChjb2xvcjEsIC4uLmNvbG9ycykge1xuICAgIGxldCByZXN1bHQgPSBjb2xvcjEuc2xpY2UoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgcmVzdWx0W2ldICs9IGNvbG9yc1tqXVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBBZGQgdHdvIG9yIG1vcmUgY29sb3JzLCBNT0RJRklFUyBGSVJTVCBBUkdVTUVOVFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkXyhjb2xvcjEsIC4uLmNvbG9ycykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sb3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb2xvcjFbaV0gKz0gY29sb3JzW2pdW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjE7XG59XG4vKipcbiAqIE11bHRpcGx5IChtaXgpIHR3byBvciBtb3JlIGNvbG9yc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkoY29sb3IxLCAuLi5jb2xvcnMpIHtcbiAgICBsZXQgcmVzdWx0ID0gY29sb3IxLnNsaWNlKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtpXSAqPSBjb2xvcnNbal1baV0gLyAyNTU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W2ldID0gTWF0aC5yb3VuZChyZXN1bHRbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBNdWx0aXBseSAobWl4KSB0d28gb3IgbW9yZSBjb2xvcnMsIE1PRElGSUVTIEZJUlNUIEFSR1VNRU5UXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseV8oY29sb3IxLCAuLi5jb2xvcnMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29sb3IxW2ldICo9IGNvbG9yc1tqXVtpXSAvIDI1NTtcbiAgICAgICAgfVxuICAgICAgICBjb2xvcjFbaV0gPSBNYXRoLnJvdW5kKGNvbG9yMVtpXSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjE7XG59XG4vKipcbiAqIEludGVycG9sYXRlIChibGVuZCkgdHdvIGNvbG9ycyB3aXRoIGEgZ2l2ZW4gZmFjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnBvbGF0ZShjb2xvcjEsIGNvbG9yMiwgZmFjdG9yID0gMC41KSB7XG4gICAgbGV0IHJlc3VsdCA9IGNvbG9yMS5zbGljZSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldICsgZmFjdG9yICogKGNvbG9yMltpXSAtIGNvbG9yMVtpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGNvbnN0IGxlcnAgPSBpbnRlcnBvbGF0ZTtcbi8qKlxuICogSW50ZXJwb2xhdGUgKGJsZW5kKSB0d28gY29sb3JzIHdpdGggYSBnaXZlbiBmYWN0b3IgaW4gSFNMIG1vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVycG9sYXRlSFNMKGNvbG9yMSwgY29sb3IyLCBmYWN0b3IgPSAwLjUpIHtcbiAgICBsZXQgaHNsMSA9IHJnYjJoc2woY29sb3IxKTtcbiAgICBsZXQgaHNsMiA9IHJnYjJoc2woY29sb3IyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBoc2wxW2ldICs9IGZhY3RvciAqIChoc2wyW2ldIC0gaHNsMVtpXSk7XG4gICAgfVxuICAgIHJldHVybiBoc2wycmdiKGhzbDEpO1xufVxuZXhwb3J0IGNvbnN0IGxlcnBIU0wgPSBpbnRlcnBvbGF0ZUhTTDtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHJhbmRvbSBjb2xvciBiYXNlZCBvbiB0aGlzIG9uZVxuICogQHBhcmFtIGNvbG9yXG4gKiBAcGFyYW0gZGlmZiBTZXQgb2Ygc3RhbmRhcmQgZGV2aWF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9taXplKGNvbG9yLCBkaWZmKSB7XG4gICAgaWYgKCEoZGlmZiBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICBkaWZmID0gTWF0aC5yb3VuZChSTkcuZ2V0Tm9ybWFsKDAsIGRpZmYpKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGNvbG9yLnNsaWNlKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgcmVzdWx0W2ldICs9IChkaWZmIGluc3RhbmNlb2YgQXJyYXkgPyBNYXRoLnJvdW5kKFJORy5nZXROb3JtYWwoMCwgZGlmZltpXSkpIDogZGlmZik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU0wuIEV4cGVjdHMgMC4uMjU1IGlucHV0cywgcHJvZHVjZXMgMC4uMSBvdXRwdXRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiMmhzbChjb2xvcikge1xuICAgIGxldCByID0gY29sb3JbMF0gLyAyNTU7XG4gICAgbGV0IGcgPSBjb2xvclsxXSAvIDI1NTtcbiAgICBsZXQgYiA9IGNvbG9yWzJdIC8gMjU1O1xuICAgIGxldCBtYXggPSBNYXRoLm1heChyLCBnLCBiKSwgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbGV0IGggPSAwLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgIGlmIChtYXggPT0gbWluKSB7XG4gICAgICAgIHMgPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IChsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKSk7XG4gICAgICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICAgICAgICBjYXNlIHI6XG4gICAgICAgICAgICAgICAgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOlxuICAgICAgICAgICAgICAgIGggPSAoYiAtIHIpIC8gZCArIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6XG4gICAgICAgICAgICAgICAgaCA9IChyIC0gZykgLyBkICsgNDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiBbaCwgcywgbF07XG59XG5mdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICBpZiAodCA8IDApXG4gICAgICAgIHQgKz0gMTtcbiAgICBpZiAodCA+IDEpXG4gICAgICAgIHQgLT0gMTtcbiAgICBpZiAodCA8IDEgLyA2KVxuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICBpZiAodCA8IDEgLyAyKVxuICAgICAgICByZXR1cm4gcTtcbiAgICBpZiAodCA8IDIgLyAzKVxuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDY7XG4gICAgcmV0dXJuIHA7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEhTTCBjb2xvciB2YWx1ZSB0byBSR0IuIEV4cGVjdHMgMC4uMSBpbnB1dHMsIHByb2R1Y2VzIDAuLjI1NSBvdXRwdXRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsMnJnYihjb2xvcikge1xuICAgIGxldCBsID0gY29sb3JbMl07XG4gICAgaWYgKGNvbG9yWzFdID09IDApIHtcbiAgICAgICAgbCA9IE1hdGgucm91bmQobCAqIDI1NSk7XG4gICAgICAgIHJldHVybiBbbCwgbCwgbF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgcyA9IGNvbG9yWzFdO1xuICAgICAgICBsZXQgcSA9IChsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzKTtcbiAgICAgICAgbGV0IHAgPSAyICogbCAtIHE7XG4gICAgICAgIGxldCByID0gaHVlMnJnYihwLCBxLCBjb2xvclswXSArIDEgLyAzKTtcbiAgICAgICAgbGV0IGcgPSBodWUycmdiKHAsIHEsIGNvbG9yWzBdKTtcbiAgICAgICAgbGV0IGIgPSBodWUycmdiKHAsIHEsIGNvbG9yWzBdIC0gMSAvIDMpO1xuICAgICAgICByZXR1cm4gW01hdGgucm91bmQociAqIDI1NSksIE1hdGgucm91bmQoZyAqIDI1NSksIE1hdGgucm91bmQoYiAqIDI1NSldO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1JHQihjb2xvcikge1xuICAgIGxldCBjbGFtcGVkID0gY29sb3IubWFwKHggPT4gY2xhbXAoeCwgMCwgMjU1KSk7XG4gICAgcmV0dXJuIGByZ2IoJHtjbGFtcGVkLmpvaW4oXCIsXCIpfSlgO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4KGNvbG9yKSB7XG4gICAgbGV0IGNsYW1wZWQgPSBjb2xvci5tYXAoeCA9PiBjbGFtcCh4LCAwLCAyNTUpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpO1xuICAgIHJldHVybiBgIyR7Y2xhbXBlZC5qb2luKFwiXCIpfWA7XG59XG5jb25zdCBDQUNIRSA9IHtcbiAgICBcImJsYWNrXCI6IFswLCAwLCAwXSxcbiAgICBcIm5hdnlcIjogWzAsIDAsIDEyOF0sXG4gICAgXCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcbiAgICBcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXG4gICAgXCJibHVlXCI6IFswLCAwLCAyNTVdLFxuICAgIFwiZGFya2dyZWVuXCI6IFswLCAxMDAsIDBdLFxuICAgIFwiZ3JlZW5cIjogWzAsIDEyOCwgMF0sXG4gICAgXCJ0ZWFsXCI6IFswLCAxMjgsIDEyOF0sXG4gICAgXCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxuICAgIFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcbiAgICBcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcbiAgICBcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAsIDE1NF0sXG4gICAgXCJsaW1lXCI6IFswLCAyNTUsIDBdLFxuICAgIFwic3ByaW5nZ3JlZW5cIjogWzAsIDI1NSwgMTI3XSxcbiAgICBcImFxdWFcIjogWzAsIDI1NSwgMjU1XSxcbiAgICBcImN5YW5cIjogWzAsIDI1NSwgMjU1XSxcbiAgICBcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxuICAgIFwiZG9kZ2VyYmx1ZVwiOiBbMzAsIDE0NCwgMjU1XSxcbiAgICBcImZvcmVzdGdyZWVuXCI6IFszNCwgMTM5LCAzNF0sXG4gICAgXCJzZWFncmVlblwiOiBbNDYsIDEzOSwgODddLFxuICAgIFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXG4gICAgXCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcbiAgICBcImxpbWVncmVlblwiOiBbNTAsIDIwNSwgNTBdLFxuICAgIFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXG4gICAgXCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXG4gICAgXCJyb3lhbGJsdWVcIjogWzY1LCAxMDUsIDIyNV0sXG4gICAgXCJzdGVlbGJsdWVcIjogWzcwLCAxMzAsIDE4MF0sXG4gICAgXCJkYXJrc2xhdGVibHVlXCI6IFs3MiwgNjEsIDEzOV0sXG4gICAgXCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXG4gICAgXCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxuICAgIFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcbiAgICBcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcbiAgICBcImNvcm5mbG93ZXJibHVlXCI6IFsxMDAsIDE0OSwgMjM3XSxcbiAgICBcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxuICAgIFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXG4gICAgXCJkaW1ncmV5XCI6IFsxMDUsIDEwNSwgMTA1XSxcbiAgICBcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcbiAgICBcIm9saXZlZHJhYlwiOiBbMTA3LCAxNDIsIDM1XSxcbiAgICBcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXG4gICAgXCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxuICAgIFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwgMTM2LCAxNTNdLFxuICAgIFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxuICAgIFwibWVkaXVtc2xhdGVibHVlXCI6IFsxMjMsIDEwNCwgMjM4XSxcbiAgICBcImxhd25ncmVlblwiOiBbMTI0LCAyNTIsIDBdLFxuICAgIFwiY2hhcnRyZXVzZVwiOiBbMTI3LCAyNTUsIDBdLFxuICAgIFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXG4gICAgXCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXG4gICAgXCJwdXJwbGVcIjogWzEyOCwgMCwgMTI4XSxcbiAgICBcIm9saXZlXCI6IFsxMjgsIDEyOCwgMF0sXG4gICAgXCJncmF5XCI6IFsxMjgsIDEyOCwgMTI4XSxcbiAgICBcImdyZXlcIjogWzEyOCwgMTI4LCAxMjhdLFxuICAgIFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXG4gICAgXCJsaWdodHNreWJsdWVcIjogWzEzNSwgMjA2LCAyNTBdLFxuICAgIFwiYmx1ZXZpb2xldFwiOiBbMTM4LCA0MywgMjI2XSxcbiAgICBcImRhcmtyZWRcIjogWzEzOSwgMCwgMF0sXG4gICAgXCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxuICAgIFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcbiAgICBcImRhcmtzZWFncmVlblwiOiBbMTQzLCAxODgsIDE0M10sXG4gICAgXCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcbiAgICBcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxNl0sXG4gICAgXCJkYXJrdmlvbGV0XCI6IFsxNDgsIDAsIDIxMV0sXG4gICAgXCJwYWxlZ3JlZW5cIjogWzE1MiwgMjUxLCAxNTJdLFxuICAgIFwiZGFya29yY2hpZFwiOiBbMTUzLCA1MCwgMjA0XSxcbiAgICBcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdLFxuICAgIFwic2llbm5hXCI6IFsxNjAsIDgyLCA0NV0sXG4gICAgXCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxuICAgIFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxuICAgIFwiZGFya2dyZXlcIjogWzE2OSwgMTY5LCAxNjldLFxuICAgIFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcbiAgICBcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxuICAgIFwicGFsZXR1cnF1b2lzZVwiOiBbMTc1LCAyMzgsIDIzOF0sXG4gICAgXCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXG4gICAgXCJwb3dkZXJibHVlXCI6IFsxNzYsIDIyNCwgMjMwXSxcbiAgICBcImZpcmVicmlja1wiOiBbMTc4LCAzNCwgMzRdLFxuICAgIFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcbiAgICBcIm1lZGl1bW9yY2hpZFwiOiBbMTg2LCA4NSwgMjExXSxcbiAgICBcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXG4gICAgXCJkYXJra2hha2lcIjogWzE4OSwgMTgzLCAxMDddLFxuICAgIFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgICBcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcbiAgICBcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxuICAgIFwicGVydVwiOiBbMjA1LCAxMzMsIDYzXSxcbiAgICBcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcbiAgICBcInRhblwiOiBbMjEwLCAxODAsIDE0MF0sXG4gICAgXCJsaWdodGdyYXlcIjogWzIxMSwgMjExLCAyMTFdLFxuICAgIFwibGlnaHRncmV5XCI6IFsyMTEsIDIxMSwgMjExXSxcbiAgICBcInBhbGV2aW9sZXRyZWRcIjogWzIxNiwgMTEyLCAxNDddLFxuICAgIFwidGhpc3RsZVwiOiBbMjE2LCAxOTEsIDIxNl0sXG4gICAgXCJvcmNoaWRcIjogWzIxOCwgMTEyLCAyMTRdLFxuICAgIFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxuICAgIFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxuICAgIFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcbiAgICBcInBsdW1cIjogWzIyMSwgMTYwLCAyMjFdLFxuICAgIFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcbiAgICBcImxpZ2h0Y3lhblwiOiBbMjI0LCAyNTUsIDI1NV0sXG4gICAgXCJsYXZlbmRlclwiOiBbMjMwLCAyMzAsIDI1MF0sXG4gICAgXCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcbiAgICBcInZpb2xldFwiOiBbMjM4LCAxMzAsIDIzOF0sXG4gICAgXCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsIDIzMiwgMTcwXSxcbiAgICBcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxuICAgIFwia2hha2lcIjogWzI0MCwgMjMwLCAxNDBdLFxuICAgIFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcbiAgICBcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcbiAgICBcImF6dXJlXCI6IFsyNDAsIDI1NSwgMjU1XSxcbiAgICBcInNhbmR5YnJvd25cIjogWzI0NCwgMTY0LCA5Nl0sXG4gICAgXCJ3aGVhdFwiOiBbMjQ1LCAyMjIsIDE3OV0sXG4gICAgXCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXG4gICAgXCJ3aGl0ZXNtb2tlXCI6IFsyNDUsIDI0NSwgMjQ1XSxcbiAgICBcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXG4gICAgXCJnaG9zdHdoaXRlXCI6IFsyNDgsIDI0OCwgMjU1XSxcbiAgICBcInNhbG1vblwiOiBbMjUwLCAxMjgsIDExNF0sXG4gICAgXCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxuICAgIFwibGluZW5cIjogWzI1MCwgMjQwLCAyMzBdLFxuICAgIFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwgMjUwLCAyMTBdLFxuICAgIFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXG4gICAgXCJyZWRcIjogWzI1NSwgMCwgMF0sXG4gICAgXCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXG4gICAgXCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXG4gICAgXCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcbiAgICBcIm9yYW5nZXJlZFwiOiBbMjU1LCA2OSwgMF0sXG4gICAgXCJ0b21hdG9cIjogWzI1NSwgOTksIDcxXSxcbiAgICBcImhvdHBpbmtcIjogWzI1NSwgMTA1LCAxODBdLFxuICAgIFwiY29yYWxcIjogWzI1NSwgMTI3LCA4MF0sXG4gICAgXCJkYXJrb3JhbmdlXCI6IFsyNTUsIDE0MCwgMF0sXG4gICAgXCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXG4gICAgXCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcbiAgICBcImxpZ2h0cGlua1wiOiBbMjU1LCAxODIsIDE5M10sXG4gICAgXCJwaW5rXCI6IFsyNTUsIDE5MiwgMjAzXSxcbiAgICBcImdvbGRcIjogWzI1NSwgMjE1LCAwXSxcbiAgICBcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXG4gICAgXCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXG4gICAgXCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXG4gICAgXCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxuICAgIFwibWlzdHlyb3NlXCI6IFsyNTUsIDIyOCwgMjI1XSxcbiAgICBcImJsYW5jaGVkYWxtb25kXCI6IFsyNTUsIDIzNSwgMjA1XSxcbiAgICBcInBhcGF5YXdoaXBcIjogWzI1NSwgMjM5LCAyMTNdLFxuICAgIFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LCAyNDAsIDI0NV0sXG4gICAgXCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXG4gICAgXCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXG4gICAgXCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxuICAgIFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxuICAgIFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXG4gICAgXCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcbiAgICBcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcbiAgICBcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcbiAgICBcIndoaXRlXCI6IFsyNTUsIDI1NSwgMjU1XVxufTtcbiIsIi8vIENPT1JESU5BVEVTIENMQVNTXHJcbi8vIExvdyBsZXZlbCBjb29yZGluYXRlIGZ1bmN0aW9uc1xyXG4vLyBDb29yZCBpcyBhIFt4LCB5LCB6P10gY29udmVuaWVudCB3YXkgdG8gZGVhbCB3aXRoIGNvb3JkaW5hdGVzLlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb29yZCB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoeTogbnVtYmVyLCB4OiBudW1iZXIpIHtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVyc2lvbjogY29vcmQgLT4gdWlkXHJcbiAgaWQocm93czogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnkgKiByb3dzICsgdGhpcy54O1xyXG4gIH1cclxuXHJcbiAgLy8gU1ZHIGNvb3JkaW5hdGUgc3lzdGVtOiB0b3AtbGVmdCBwb2ludCBvZiBjZWxsXHJcbiAgcG9zKHNwYWNpbmc6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgY29uc3QgeSA9IHRoaXMueSAqIHNwYWNpbmc7XHJcbiAgICBjb25zdCB4ID0gdGhpcy54ICogc3BhY2luZztcclxuICAgIHJldHVybiBbeSwgeF07XHJcbiAgfVxyXG5cclxuICAvLyBEaXN0YW5jZSB0byBleGl0aW5nIGdyaWRcclxuICAvLyBBcnJheSBvZmZzZXQgY29ycmVjdGVkXHJcbiAgZGlzdGFuY2VUb0V4aXQoZGlyZWN0aW9uID0gMCwgcm93czogbnVtYmVyLCBjb2xzOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgc3dpdGNoIChkaXJlY3Rpb24gJSAzNjApIHtcclxuICAgICAgY2FzZSAwOiAvLyBUT1BcclxuICAgICAgICByZXR1cm4gdGhpcy55O1xyXG4gICAgICBjYXNlIDkwOiAvLyBSSUdIVFxyXG4gICAgICAgIHJldHVybiBjb2xzIC0gdGhpcy54IC0gMTtcclxuICAgICAgY2FzZSAxODA6IC8vIEJPVFRPTVxyXG4gICAgICAgIHJldHVybiByb3dzIC0gdGhpcy55IC0gMTtcclxuICAgICAgY2FzZSAyNzA6IC8vIExFRlRcclxuICAgICAgICByZXR1cm4gdGhpcy54O1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggZGlyZWN0aW9ucy4uLlwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFkamFjZW50IGNlbGxzXHJcbiAgZ2V0IHRvcCgpOiBDb29yZCB7XHJcbiAgICByZXR1cm4gbmV3IENvb3JkKHRoaXMueSwgdGhpcy54IC0gMSk7XHJcbiAgfVxyXG4gIGdldCBib3R0b20oKTogQ29vcmQge1xyXG4gICAgcmV0dXJuIG5ldyBDb29yZCh0aGlzLnksIHRoaXMueCArIDEpO1xyXG4gIH1cclxuICBnZXQgbGVmdCgpOiBDb29yZCB7XHJcbiAgICByZXR1cm4gbmV3IENvb3JkKHRoaXMueSAtIDEsIHRoaXMueCk7XHJcbiAgfVxyXG4gIGdldCByaWdodCgpOiBDb29yZCB7XHJcbiAgICByZXR1cm4gbmV3IENvb3JkKHRoaXMueSArIDEsIHRoaXMueCk7XHJcbiAgfVxyXG4gIGdldCBhZGphY2VudCgpOiBDb29yZFtdIHtcclxuICAgIHJldHVybiBbdGhpcy50b3AsIHRoaXMucmlnaHQsIHRoaXMuYm90dG9tLCB0aGlzLmxlZnRdO1xyXG4gIH1cclxuICBnZXQgYXJyYXkoKTogbnVtYmVyW10ge1xyXG4gICAgcmV0dXJuIFt0aGlzLnksIHRoaXMueF07XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiB0d28gY29vcmRpbmF0ZXMgYXJlIGFkamFjZW50XHJcbiAgaXNBZGphY2VudChjb29yZDogQ29vcmQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBjb29yZC5pc0luY2x1ZGVkSW4odGhpcy5hZGphY2VudCk7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBmb3IgZXF1YWxpdHlcclxuICBlcXVhbChjb29yZDogQ29vcmQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnggPT09IGNvb3JkLnggJiYgdGhpcy55ID09PSBjb29yZC55O1xyXG4gIH1cclxuXHJcbiAgLy8gVGVzdCBpbmNsdXNpb24gaW4gYXJyYXkgb2YgY29vcmRzXHJcbiAgaXNJbmNsdWRlZEluKGNvb3JkczogQ29vcmRbXSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY29vcmRzLmZpbHRlcihjb29yZCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWwoY29vcmQpO1xyXG4gICAgICB9KS5sZW5ndGggPiAwXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gb3ZlcnJpZGUgb2YgdG9TdHJpbmcgbWV0aG9kIGZvciBkZWJ1Z2dpbmdcclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBbWToke3RoaXMueX0sIFg6JHt0aGlzLnh9XWA7XHJcbiAgfVxyXG5cclxuICAvLyBFeHBvcnQgSlNPTlxyXG4gIGV4cG9ydEpTT04oKTogeyB5OiBudW1iZXI7IHg6IG51bWJlciB9IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHk6IHRoaXMueSxcclxuICAgICAgeDogdGhpcy54XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gRXhwb3J0IEpTT05cclxuICBzdGF0aWMgaW1wb3J0SlNPTihqc29uOiB7IHk6IG51bWJlcjsgeDogbnVtYmVyIH0pOiBDb29yZCB7XHJcbiAgICByZXR1cm4gbmV3IENvb3JkKGpzb24ueSwganNvbi54KTtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBmcm9tIGFycmF5IG9mIG51bWJlcnNcclxuICBzdGF0aWMgZnJvbUFycmF5KG51bUFycmF5OiBudW1iZXJbXSk6IENvb3JkIHtcclxuICAgIHJldHVybiBuZXcgQ29vcmQobnVtQXJyYXlbMF0sIG51bUFycmF5WzFdKTtcclxuICB9XHJcblxyXG4gIC8vIENvbnZlcnNpb246IHVpZCAtPiBjb29yZFxyXG4gIHN0YXRpYyBmcm9tSWQoaW5kZXg6IG51bWJlciwgY29sczogbnVtYmVyKTogQ29vcmQge1xyXG4gICAgY29uc3QgeCA9IGluZGV4ICUgY29scztcclxuICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKGluZGV4IC8gY29scyk7XHJcbiAgICByZXR1cm4gbmV3IENvb3JkKHgsIHkpO1xyXG4gIH1cclxufVxyXG4iLCIvKipcbiAqIEBjbGFzcyBBYnN0cmFjdCBkaXNwbGF5IGJhY2tlbmQgbW9kdWxlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrZW5kIHtcbiAgICBnZXRDb250YWluZXIoKSB7IHJldHVybiBudWxsOyB9XG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7IHRoaXMuX29wdGlvbnMgPSBvcHRpb25zOyB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uICovXHJcbi8vIEVMRU1FTlQgQ0xBU1NcclxuLy8gQmFzaWMgY2xhc3MgcmVsYXRlZCB0byBnYW1lIGVsZW1lbnRzXHJcbi8vIEZJWE1FOiBUaGlzIGNsYXNzIG5lZWRzIHJld3JpdGUgd2l0aCBnbHlwaHMgYW5kIGZ1bmNcclxuXHJcbmltcG9ydCB7IGpzb25FbGVtZW50cyB9IGZyb20gXCIuLi9lbGVtZW50cy9lbGVtZW50c1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlbWVudCB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgYXNjaWk6IHN0cmluZ1tdO1xyXG4gIGdyb3VwOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBsaW5rOiBzdHJpbmc7XHJcbiAgYWN0aXZlOiBib29sZWFuO1xyXG4gIHRpbGVzOiBzdHJpbmc7XHJcbiAgYWJzb3JwdGlvbjogbnVtYmVyO1xyXG4gIHBoYXNlOiBudW1iZXI7XHJcbiAgZm9yZWdyb3VuZENvbG9yOiBzdHJpbmc7XHJcbiAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XHJcbiAgbWF0cml4OiBudW1iZXJbXVtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGlkOiBudW1iZXIsXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBhc2NpaTogc3RyaW5nW10gPSBbXCIgXCIsIFwiIFwiLCBcIiBcIiwgXCIgXCIsIFwiIFwiLCBcIiBcIiwgXCIgXCIsIFwiIFwiXSxcclxuICAgIGdyb3VwID0gXCJcIixcclxuICAgIGRlc2NyaXB0aW9uID0gXCJcIixcclxuICAgIGxpbmsgPSBcIlwiLFxyXG4gICAgYWN0aXZlID0gZmFsc2UsXHJcbiAgICB0aWxlcyA9IFwidGlsZW1hcC5wbmdcIixcclxuICAgIGFic29ycHRpb24gPSAwLFxyXG4gICAgcGhhc2UgPSAwLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yID0gXCJ3aGl0ZVwiLFxyXG4gICAgYmFja2dyb3VuZENvbG9yID0gXCJibGFja1wiLFxyXG4gICAgbWF0cml4OiBudW1iZXJbXVtdID0gW1swLCAwXSwgWzAsIDBdXVxyXG4gICkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuYXNjaWkgPSBhc2NpaTtcclxuICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcclxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIHRoaXMubGluayA9IGxpbms7XHJcbiAgICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcclxuICAgIHRoaXMudGlsZXMgPSB0aWxlcztcclxuICAgIHRoaXMuYWJzb3JwdGlvbiA9IGFic29ycHRpb247XHJcbiAgICB0aGlzLnBoYXNlID0gcGhhc2U7XHJcbiAgICB0aGlzLmZvcmVncm91bmRDb2xvciA9IGZvcmVncm91bmRDb2xvcjtcclxuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gYmFja2dyb3VuZENvbG9yO1xyXG4gICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XHJcbiAgfVxyXG5cclxuICAvLyBDb21wdXRlIHRoZSByb3RhdGlvbiBhbmdsZSBmcm9tIHRoZSBudW1iZXIgb2Ygc3ByaXRlc1xyXG4gIGdldCByb3RhdGlvbkFuZ2xlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gMzYwIC8gdGhpcy5hc2NpaS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvLyBPdmVycmlkZSBvZiB0b1N0cmluZygpIG1ldGhvZFxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy5uYW1lfSAoUGhhc2U6ICR7dGhpcy5waGFzZX0sIEFic29ycHRpb246ICR7dGhpcy5hYnNvcnB0aW9uICpcclxuICAgICAgMTAwfSUpYDtcclxuICB9XHJcblxyXG4gIC8vIEV4cG9ydCBKU09OXHJcbiAgZXhwb3J0SlNPTigpOiB7fSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICBhc2NpaTogdGhpcy5hc2NpaSxcclxuICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXAsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxyXG4gICAgICBsaW5rOiB0aGlzLmxpbmssXHJcbiAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmUsXHJcbiAgICAgIHRpbGVzOiB0aGlzLnRpbGVzLFxyXG4gICAgICBhYnNvcnB0aW9uOiB0aGlzLmFic29ycHRpb24sXHJcbiAgICAgIHBoYXNlOiB0aGlzLnBoYXNlLFxyXG4gICAgICBmb3JlZ3JvdW5kQ29sb3I6IHRoaXMuZm9yZWdyb3VuZENvbG9yLFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuYmFja2dyb3VuZENvbG9yLFxyXG4gICAgICBtYXRyaXg6IHRoaXMubWF0cml4XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhdGljIEpTT04gbG9hZFxyXG4gIC8vIEZJWE1FOiBJdCdzIGdvZGRhbW4gdWdseVxyXG4gIHN0YXRpYyBmcm9tTmFtZShuYW1lOiBzdHJpbmcsIHZlcnNpb24gPSAyKTogRWxlbWVudCB7XHJcbiAgICAvLyBjb25zdCBqc29uRWxlbWVudHMgPSByZXF1aXJlKGAuLi9lbGVtZW50cy9lbGVtZW50cy5qc29uYClcclxuXHJcbiAgICBpZiAodmVyc2lvbiA9PT0gMikge1xyXG4gICAgICBjb25zdCBlbGVtID0ganNvbkVsZW1lbnRzLmZpbmQoKGVsZW06IHsgbmFtZTogc3RyaW5nIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gZWxlbS5uYW1lID09PSBuYW1lO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIG5ldyBFbGVtZW50KFxyXG4gICAgICAgIGVsZW0hLmlkLFxyXG4gICAgICAgIGVsZW0hLm5hbWUsXHJcbiAgICAgICAgZWxlbSEuYXNjaWksXHJcbiAgICAgICAgZWxlbSEuZ3JvdXAsXHJcbiAgICAgICAgZWxlbSEuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgZWxlbSEubGluayxcclxuICAgICAgICBlbGVtIS5hY3RpdmUsXHJcbiAgICAgICAgZWxlbSEudGlsZXMsXHJcbiAgICAgICAgZWxlbSEuYWJzb3JwdGlvbixcclxuICAgICAgICBlbGVtIS5waGFzZSxcclxuICAgICAgICBlbGVtIS5mb3JlZ3JvdW5kQ29sb3IsXHJcbiAgICAgICAgZWxlbSEuYmFja2dyb3VuZENvbG9yLFxyXG4gICAgICAgIGVsZW0hLm1hdHJpeFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZWxlbSA9IGpzb25FbGVtZW50cy5maW5kKChlbGVtOiB7IG5hbWV2MTogc3RyaW5nIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gZWxlbS5uYW1ldjEgPT09IG5hbWU7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gbmV3IEVsZW1lbnQoXHJcbiAgICAgICAgZWxlbSEuaWQsXHJcbiAgICAgICAgZWxlbSEubmFtZSxcclxuICAgICAgICBlbGVtIS5hc2NpaSxcclxuICAgICAgICBlbGVtIS5ncm91cCxcclxuICAgICAgICBlbGVtIS5kZXNjcmlwdGlvbixcclxuICAgICAgICBlbGVtIS5saW5rLFxyXG4gICAgICAgIGVsZW0hLmFjdGl2ZSxcclxuICAgICAgICBlbGVtIS50aWxlcyxcclxuICAgICAgICBlbGVtIS5hYnNvcnB0aW9uLFxyXG4gICAgICAgIGVsZW0hLnBoYXNlLFxyXG4gICAgICAgIGVsZW0hLmZvcmVncm91bmRDb2xvcixcclxuICAgICAgICBlbGVtIS5iYWNrZ3JvdW5kQ29sb3IsXHJcbiAgICAgICAgZWxlbSEubWF0cml4XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vIFBPSU5URVIgQ0xBU1NcclxuLy8gRGVzY3JpYmVzIGEgdmVjdG9yIHdpdGggYW4gb3JpZ2luLCBhIGRpcmVjdGlvbiBhbmQgYW4gdW5pdCBhbXBsaXR1ZGUuXHJcbi8vIEZJWE1FOiBEdXBsaWNhdGUgYmV0d2VlbiBwYXRoIGFuZCBjb29yZFxyXG5pbXBvcnQgQ29vcmQgZnJvbSBcIi4vQ29vcmRcIjtcclxuaW1wb3J0IENlbGwgZnJvbSBcIi4vQ2VsbFwiO1xyXG5pbXBvcnQgR3JpZCBmcm9tIFwiLi9HcmlkXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludGVyIGV4dGVuZHMgQ29vcmQge1xyXG4gIGNvb3JkOiBDb29yZDtcclxuICBkaXJlY3Rpb246IG51bWJlcjtcclxuICBpbnRlbnNpdHk6IG51bWJlcjtcclxuICBwaGFzZTogbnVtYmVyO1xyXG4gIHBhdGg6IENvb3JkW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgY29vcmQ6IENvb3JkLFxyXG4gICAgZGlyZWN0aW9uOiBudW1iZXIsXHJcbiAgICBpbnRlbnNpdHkgPSAxLFxyXG4gICAgcGhhc2UgPSAwLFxyXG4gICAgcGF0aDogQ29vcmRbXSA9IFtjb29yZF1cclxuICApIHtcclxuICAgIHN1cGVyKGNvb3JkLnksIGNvb3JkLngpO1xyXG4gICAgdGhpcy5jb29yZCA9IGNvb3JkO1xyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICB0aGlzLmludGVuc2l0eSA9IGludGVuc2l0eTtcclxuICAgIHRoaXMucGhhc2UgPSBwaGFzZTtcclxuICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpcyBhIHBhcnRpY2xlIGhhcyBhbnkgaW50ZW5zaXR5XHJcbiAgZ2V0IGFsaXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZW5zaXR5ID4gMDtcclxuICB9XHJcblxyXG4gIC8vIERlZXAgY2xvbmUgb2YgdGhlIHBvaW50ZXJcclxuICBnZXQgY2xvbmUoKTogUG9pbnRlciB7XHJcbiAgICByZXR1cm4gbmV3IFBvaW50ZXIoXHJcbiAgICAgIHRoaXMuY29vcmQsXHJcbiAgICAgIHRoaXMuZGlyZWN0aW9uLFxyXG4gICAgICB0aGlzLmludGVuc2l0eSxcclxuICAgICAgdGhpcy5waGFzZSxcclxuICAgICAgdGhpcy5wYXRoXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gUG9pbnRlciBpcyBvbiBhIHNwZWNpZmljIGNlbGwgc2hvcnRoYW5kXHJcbiAgb24oY2VsbDogQ2VsbCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29vcmQuZXF1YWwoY2VsbC5jb29yZCk7XHJcbiAgfVxyXG5cclxuICAvLyBDb21wdXRlIG5leHQgc2ltdWxhdGlvbiBzdGVwXHJcbiAgbmV4dChyZXBlYXQgPSAxKTogUG9pbnRlciB7XHJcbiAgICAvLyBNb3ZpbmcgQ1cgaW4gaW5jcmVtZW50IG9mIDkwwrBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwZWF0OyBpKyspIHtcclxuICAgICAgc3dpdGNoICh0aGlzLmRpcmVjdGlvbiAlIDM2MCkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgIHRoaXMuY29vcmQgPSB0aGlzLmNvb3JkLnRvcDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgOTA6XHJcbiAgICAgICAgICB0aGlzLmNvb3JkID0gdGhpcy5jb29yZC5yaWdodDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTgwOlxyXG4gICAgICAgICAgdGhpcy5jb29yZCA9IHRoaXMuY29vcmQuYm90dG9tO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyNzA6XHJcbiAgICAgICAgICB0aGlzLmNvb3JkID0gdGhpcy5jb29yZC5sZWZ0O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRocm93IEVycm9yKGBTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHBvaW50ZXJzIGFuZCBkaXJlY3Rpb24uYCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gVXBkYXRlIGNvb3JkIHdpdGggbGF0ZXN0IGNvbXB1dGVkIHBhdGggY29vcmRpbmF0ZXNcclxuICAgICAgdGhpcy5wYXRoLnB1c2godGhpcy5jb29yZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgLy8gRklYTUU6IEFkZCBpbnRlbnNpdHkgdG8gdGhlIENvb3JkXHJcbiAgLy8gQ29tcHV0ZSBsYXNlciBwYXRoXHJcbiAgbGFzZXJQYXRoKGdyaWQ6IEdyaWQsIG1heEZyYW1lcyA9IDUwKTogQ29vcmRbXSB7XHJcbiAgICAvLyBNYWtlIGEgZGVwcCBjbG9uZSBvZiB0aGUgcG9pbnRlclxyXG4gICAgbGV0IGFsaXZlOiBQb2ludGVyW10gPSBbdGhpcy5jbG9uZV07XHJcbiAgICBjb25zdCBkZWFkOiBQb2ludGVyW10gPSBbXTtcclxuXHJcbiAgICAvLyBTaW11bGF0ZSBwYXRoIHdpdGggYSBzcGVjaWZpYyBudW1iZXIgb2YgZnJhbWVzXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heEZyYW1lczsgaSsrKSB7XHJcbiAgICAgIC8vIFByb2Nlc3MgZWFjaCBsaXZpbmcgcG9pbnRlclxyXG4gICAgICBhbGl2ZS5mb3JFYWNoKHBvaW50ZXIgPT4ge1xyXG4gICAgICAgIHBvaW50ZXIubmV4dCgpO1xyXG5cclxuICAgICAgICAvLyBaZXJvIHRoZSBpbnRlbnNpdHkgb2YgZXNjYXBpbmcgcG9pbnRlcnNcclxuICAgICAgICBpZiAoIWdyaWQuaW5jbHVkZXMocG9pbnRlci5jb29yZCkpIHtcclxuICAgICAgICAgIHBvaW50ZXIuaW50ZW5zaXR5ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFic29ycHRpb25cclxuICAgICAgICBncmlkLmFic29yYmVycy5mb3JFYWNoKChhYnNvcmJlcjogQ2VsbCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHBvaW50ZXIub24oYWJzb3JiZXIpKSB7XHJcbiAgICAgICAgICAgIHBvaW50ZXIuaW50ZW5zaXR5IC09XHJcbiAgICAgICAgICAgICAgcG9pbnRlci5pbnRlbnNpdHkgKiBhYnNvcmJlci5lbGVtZW50LmFic29ycHRpb247XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlZmxlY3Rpb25cclxuICAgICAgICBncmlkLm1pcnJvcnMuZm9yRWFjaCgobWlycm9yOiBDZWxsKSA9PiB7XHJcbiAgICAgICAgICBpZiAocG9pbnRlci5vbihtaXJyb3IpKSB7XHJcbiAgICAgICAgICAgIHBvaW50ZXIuZGlyZWN0aW9uID1cclxuICAgICAgICAgICAgICAoMiAqIG1pcnJvci5yb3RhdGlvbiAtIHBvaW50ZXIuZGlyZWN0aW9uICsgMzYwKSAlIDM2MDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBncmlkLmJlYW1zcGxpdHRlcnMuZm9yRWFjaCgoYmVhbXNwbGl0dGVyOiBDZWxsKSA9PiB7XHJcbiAgICAgICAgICBpZiAocG9pbnRlci5vbihiZWFtc3BsaXR0ZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIERpbSB0aGUgY3VycmVudCBwb2ludGVyIGludGVuc2l0eVxyXG4gICAgICAgICAgICBwb2ludGVyLmludGVuc2l0eSAvPSAyO1xyXG4gICAgICAgICAgICAvLyBSZWZsZWN0aW5nIHBvaW50ZXIgKGNyZWF0ZSBuZXcgcmVmbGVjdGVkIGZhZGVkIHBvaW50ZXIpXHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9XHJcbiAgICAgICAgICAgICAgKDIgKiBiZWFtc3BsaXR0ZXIucm90YXRpb24gLSBwb2ludGVyLmRpcmVjdGlvbiArIDM2MCkgJSAzNjA7XHJcbiAgICAgICAgICAgIGFsaXZlLnB1c2goXHJcbiAgICAgICAgICAgICAgbmV3IFBvaW50ZXIocG9pbnRlci5jb29yZCwgZGlyZWN0aW9uLCBwb2ludGVyLmludGVuc2l0eSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUGhhc2Ugc2hpZnRlcnNcclxuICAgICAgICBncmlkLnBoYXNlc2hpZnRlcnMuZm9yRWFjaCgocGhhc2VzaGlmdGVyOiBDZWxsKSA9PiB7XHJcbiAgICAgICAgICBpZiAocG9pbnRlci5vbihwaGFzZXNoaWZ0ZXIpKSB7XHJcbiAgICAgICAgICAgIHBvaW50ZXIucGhhc2UgPSAocG9pbnRlci5waGFzZSArIHBoYXNlc2hpZnRlci5lbGVtZW50LnBoYXNlKSAlIDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gRmlsdGVyIHRoZSBsaXZpbmcgZnJvbSB0aGUgZGVhZFxyXG4gICAgICBhbGl2ZS5mb3JFYWNoKHBvaW50ZXIgPT4ge1xyXG4gICAgICAgIGlmICghcG9pbnRlci5hbGl2ZSkge1xyXG4gICAgICAgICAgZGVhZC5wdXNoKHBvaW50ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGFsaXZlID0gYWxpdmUuZmlsdGVyKHBvaW50ZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiBwb2ludGVyLmFsaXZlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGbGF0dGVuIGFuZCBkZWR1cGUgbGlzdCBvZiBwb2ludGVyc1xyXG4gICAgY29uc3QgY29vcmRzOiBDb29yZFtdW10gPSBbXTtcclxuICAgIGFsaXZlID0gZGVhZC5jb25jYXQoYWxpdmUpO1xyXG4gICAgYWxpdmUuZm9yRWFjaChwb2ludGVyID0+IHtcclxuICAgICAgY29vcmRzLnB1c2gocG9pbnRlci5wYXRoKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGNvb3Jkcy5mbGF0KCkpXTtcclxuICB9XHJcblxyXG4gIC8vIE92ZXJyaWRlIG1ldGhvZCB0byBkaXNwbGF5IG5pY2VseVxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCNQb2ludGVyIEAgJHt0aGlzLmNvb3JkLnRvU3RyaW5nKCl9IG1vdmluZyAke1xyXG4gICAgICB0aGlzLmRpcmVjdGlvblxyXG4gICAgfcKwIHdpdGggJHt0aGlzLmludGVuc2l0eX0gaW50ZW5zaXR5IGFuZCAke1xyXG4gICAgICB0aGlzLnBoYXNlXHJcbiAgICB9IHBoYXNlIHNoaWZ0LiBQQVRIOiAke3RoaXMucGF0aC5tYXAoY29vcmQgPT4gY29vcmQudG9TdHJpbmcoKSl9YDtcclxuICB9XHJcblxyXG4gIC8vIEV4cG9ydCBKU09OIG9iamVjdFxyXG4gIGV4cG9ydEpTT04oKToge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgZGlyZWN0aW9uOiBudW1iZXI7XHJcbiAgICBpbnRlbnNpdHk6IG51bWJlcjtcclxuICAgIHBoYXNlOiBudW1iZXI7XHJcbiAgICBwYXRoOiB7IHk6IG51bWJlcjsgeDogbnVtYmVyIH1bXTtcclxuICB9IHtcclxuICAgIGNvbnN0IHBhdGggPSB0aGlzLnBhdGgubWFwKChjb29yZDogQ29vcmQpID0+IGNvb3JkLmV4cG9ydEpTT04oKSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiB0aGlzLmNvb3JkLngsXHJcbiAgICAgIHk6IHRoaXMuY29vcmQueSxcclxuICAgICAgZGlyZWN0aW9uOiB0aGlzLmRpcmVjdGlvbixcclxuICAgICAgaW50ZW5zaXR5OiB0aGlzLmludGVuc2l0eSxcclxuICAgICAgcGhhc2U6IHRoaXMucGhhc2UsXHJcbiAgICAgIHBhdGg6IHBhdGhcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBJbXBvcnQgSlNPTiBvYmplY3RcclxuICBzdGF0aWMgaW1wb3J0SlNPTihqc29uOiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICBkaXJlY3Rpb246IG51bWJlcjtcclxuICAgIGludGVuc2l0eTogbnVtYmVyO1xyXG4gICAgcGhhc2U6IG51bWJlcjtcclxuICAgIHBhdGg6IHsgeTogbnVtYmVyOyB4OiBudW1iZXIgfVtdO1xyXG4gIH0pOiBQb2ludGVyIHtcclxuICAgIGNvbnN0IHBhdGggPSBqc29uLnBhdGgubWFwKGpzb25Db29yZCA9PiBDb29yZC5pbXBvcnRKU09OKGpzb25Db29yZCkpO1xyXG4gICAgY29uc3QgY29vcmQgPSBuZXcgQ29vcmQoanNvbi55LCBqc29uLngpO1xyXG4gICAgcmV0dXJuIG5ldyBQb2ludGVyKGNvb3JkLCBqc29uLmRpcmVjdGlvbiwganNvbi5pbnRlbnNpdHksIGpzb24ucGhhc2UsIHBhdGgpO1xyXG4gIH1cclxuXHJcbiAgLy8gRm9ybWF0IGFjdGl2ZSBwYXJ0aWNsZSBsaXN0XHJcbiAgc3RhdGljIG1hbnlUb1N0cmluZyhwb2ludGVyczogUG9pbnRlcltdKTogc3RyaW5nIHtcclxuICAgIGxldCByZXN1bHQgPSBgJHtwb2ludGVycy5sZW5ndGh9IGFjdGl2ZSBwYXJ0aWNsZXMuLi5cXG5gO1xyXG4gICAgcG9pbnRlcnMuZm9yRWFjaChwb2ludGVyID0+IHtcclxuICAgICAgcmVzdWx0ICs9IGAtICR7cG9pbnRlci50b1N0cmluZygpfVxcbmA7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvLyBFeHRyYWN0IGNvb3JkaW5hdGVzIGluIGEgbGlzdFxyXG4gIHN0YXRpYyBtYW55VG9Db29yZHMocG9pbnRlcnM6IFBvaW50ZXJbXSk6IENvb3JkW10ge1xyXG4gICAgY29uc3QgcmVzdWx0OiBDb29yZFtdID0gW107XHJcbiAgICBwb2ludGVycy5tYXAocG9pbnRlciA9PiB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKHBvaW50ZXIuY29vcmQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQmFja2VuZCBmcm9tIFwiLi9iYWNrZW5kLmpzXCI7XG5pbXBvcnQgKiBhcyBDb2xvciBmcm9tIFwiLi4vY29sb3IuanNcIjtcbmZ1bmN0aW9uIGNsZWFyVG9BbnNpKGJnKSB7XG4gICAgcmV0dXJuIGBcXHgxYlswOzQ4OzU7JHt0ZXJtY29sb3IoYmcpfW1cXHgxYlsySmA7XG59XG5mdW5jdGlvbiBjb2xvclRvQW5zaShmZywgYmcpIHtcbiAgICByZXR1cm4gYFxceDFiWzA7Mzg7NTske3Rlcm1jb2xvcihmZyl9OzQ4OzU7JHt0ZXJtY29sb3IoYmcpfW1gO1xufVxuZnVuY3Rpb24gcG9zaXRpb25Ub0Fuc2koeCwgeSkge1xuICAgIHJldHVybiBgXFx4MWJbJHt5ICsgMX07JHt4ICsgMX1IYDtcbn1cbmZ1bmN0aW9uIHRlcm1jb2xvcihjb2xvcikge1xuICAgIGNvbnN0IFNSQ19DT0xPUlMgPSAyNTYuMDtcbiAgICBjb25zdCBEU1RfQ09MT1JTID0gNi4wO1xuICAgIGNvbnN0IENPTE9SX1JBVElPID0gRFNUX0NPTE9SUyAvIFNSQ19DT0xPUlM7XG4gICAgbGV0IHJnYiA9IENvbG9yLmZyb21TdHJpbmcoY29sb3IpO1xuICAgIGxldCByID0gTWF0aC5mbG9vcihyZ2JbMF0gKiBDT0xPUl9SQVRJTyk7XG4gICAgbGV0IGcgPSBNYXRoLmZsb29yKHJnYlsxXSAqIENPTE9SX1JBVElPKTtcbiAgICBsZXQgYiA9IE1hdGguZmxvb3IocmdiWzJdICogQ09MT1JfUkFUSU8pO1xuICAgIHJldHVybiByICogMzYgKyBnICogNiArIGIgKiAxICsgMTY7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXJtIGV4dGVuZHMgQmFja2VuZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IFswLCAwXTtcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gWy0xLCAtMV07XG4gICAgICAgIHRoaXMuX2xhc3RDb2xvciA9IFwiXCI7XG4gICAgfVxuICAgIHNjaGVkdWxlKGNiKSB7IHNldFRpbWVvdXQoY2IsIDEwMDAgLyA2MCk7IH1cbiAgICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgbGV0IHNpemUgPSBbb3B0aW9ucy53aWR0aCwgb3B0aW9ucy5oZWlnaHRdO1xuICAgICAgICBsZXQgYXZhaWwgPSB0aGlzLmNvbXB1dGVTaXplKCk7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGF2YWlsLm1hcCgodmFsLCBpbmRleCkgPT4gTWF0aC5mbG9vcigodmFsIC0gc2l6ZVtpbmRleF0pIC8gMikpO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY2xlYXJUb0Fuc2kodGhpcy5fb3B0aW9ucy5iZykpO1xuICAgIH1cbiAgICBkcmF3KGRhdGEsIGNsZWFyQmVmb3JlKSB7XG4gICAgICAgIC8vIGRldGVybWluZSB3aGVyZSB0byBkcmF3IHdoYXQgd2l0aCB3aGF0IGNvbG9yc1xuICAgICAgICBsZXQgW3gsIHksIGNoLCBmZywgYmddID0gZGF0YTtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gbW92ZSB0aGUgdGVybWluYWwgY3Vyc29yXG4gICAgICAgIGxldCBkeCA9IHRoaXMuX29mZnNldFswXSArIHg7XG4gICAgICAgIGxldCBkeSA9IHRoaXMuX29mZnNldFsxXSArIHk7XG4gICAgICAgIGxldCBzaXplID0gdGhpcy5jb21wdXRlU2l6ZSgpO1xuICAgICAgICBpZiAoZHggPCAwIHx8IGR4ID49IHNpemVbMF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHkgPCAwIHx8IGR5ID49IHNpemVbMV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHggIT09IHRoaXMuX2N1cnNvclswXSB8fCBkeSAhPT0gdGhpcy5fY3Vyc29yWzFdKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShwb3NpdGlvblRvQW5zaShkeCwgZHkpKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvclswXSA9IGR4O1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yWzFdID0gZHk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVybWluYWxzIGF1dG9tYXRpY2FsbHkgY2xlYXIsIGJ1dCBpZiB3ZSdyZSBjbGVhcmluZyB3aGVuIHdlJ3JlXG4gICAgICAgIC8vIG5vdCBvdGhlcndpc2UgcHJvdmlkZWQgd2l0aCBhIGNoYXJhY3RlciwganVzdCB1c2UgYSBzcGFjZSBpbnN0ZWFkXG4gICAgICAgIGlmIChjbGVhckJlZm9yZSkge1xuICAgICAgICAgICAgaWYgKCFjaCkge1xuICAgICAgICAgICAgICAgIGNoID0gXCIgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgd2UncmUgbm90IGNsZWFyaW5nIGFuZCBub3QgcHJvdmlkZWQgd2l0aCBhIGNoYXJhY3RlciwgZG8gbm90aGluZ1xuICAgICAgICBpZiAoIWNoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gY2hhbmdlIGNvbG9yc1xuICAgICAgICBsZXQgbmV3Q29sb3IgPSBjb2xvclRvQW5zaShmZywgYmcpO1xuICAgICAgICBpZiAobmV3Q29sb3IgIT09IHRoaXMuX2xhc3RDb2xvcikge1xuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUobmV3Q29sb3IpO1xuICAgICAgICAgICAgdGhpcy5fbGFzdENvbG9yID0gbmV3Q29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd3JpdGUgdGhlIHByb3ZpZGVkIHN5bWJvbCB0byB0aGUgZGlzcGxheVxuICAgICAgICBsZXQgY2hhcnMgPSBbXS5jb25jYXQoY2gpO1xuICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShjaGFyc1swXSk7XG4gICAgICAgIC8vIHVwZGF0ZSBvdXIgcG9zaXRpb24sIGdpdmVuIHRoYXQgd2Ugd3JvdGUgYSBjaGFyYWN0ZXJcbiAgICAgICAgdGhpcy5fY3Vyc29yWzBdKys7XG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3JbMF0gPj0gc2l6ZVswXSkge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yWzBdID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvclsxXSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXB1dGVGb250U2l6ZSgpIHsgdGhyb3cgbmV3IEVycm9yKFwiVGVybWluYWwgYmFja2VuZCBoYXMgbm8gbm90aW9uIG9mIGZvbnQgc2l6ZVwiKTsgfVxuICAgIGV2ZW50VG9Qb3NpdGlvbih4LCB5KSB7IHJldHVybiBbeCwgeV07IH1cbiAgICBjb21wdXRlU2l6ZSgpIHsgcmV0dXJuIFtwcm9jZXNzLnN0ZG91dC5jb2x1bW5zLCBwcm9jZXNzLnN0ZG91dC5yb3dzXTsgfVxufVxuIiwiLy8gQ0VMTCBDTEFTU1xyXG4vLyBCYXNpYyBjbGFzcyBmb3IgdGhlIGdyaWQgY2VsbHNcclxuaW1wb3J0IENvb3JkIGZyb20gXCIuL0Nvb3JkXCI7XHJcbmltcG9ydCBFbGVtZW50IGZyb20gXCIuL0VsZW1lbnRcIjtcclxuaW1wb3J0IFBvaW50ZXIgZnJvbSBcIi4vUG9pbnRlclwiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9HYW1lXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDZWxsIGV4dGVuZHMgQ29vcmQge1xyXG4gIGNvb3JkOiBDb29yZDsgLy8gcmVxdWlyZWRcclxuICBlbGVtZW50OiBFbGVtZW50OyAvLyBvcHRpb25hbFxyXG4gIHJvdGF0aW9uOiBudW1iZXI7IC8vIGRlZmF1bHQ6IHZvaWRcclxuICBmcm96ZW46IGJvb2xlYW47IC8vIGRlZmF1bHQ6IGZhbHNlXHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvb3JkOiBDb29yZCwgZWxlbWVudDogRWxlbWVudCwgcm90YXRpb24gPSAwLCBmcm96ZW4gPSBmYWxzZSkge1xyXG4gICAgc3VwZXIoY29vcmQueCwgY29vcmQueSk7XHJcbiAgICB0aGlzLmNvb3JkID0gY29vcmQ7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xyXG4gICAgdGhpcy5mcm96ZW4gPSBmcm96ZW47XHJcbiAgfVxyXG5cclxuICAvLyBDaGFuZ2UgZnJvemVuIHN0YXR1cyBvZiBjZWxsXHJcbiAgZ2V0IGFzY2lpKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFzY2lpW3RoaXMucm90YXRpb24gLyB0aGlzLmVsZW1lbnQucm90YXRpb25BbmdsZV07XHJcbiAgfVxyXG4gIGdldCBmb3JlZ3JvdW5kQ29sb3IoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZm9yZWdyb3VuZENvbG9yO1xyXG4gIH1cclxuICBnZXQgYmFja2dyb3VuZENvbG9yKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmJhY2tncm91bmRDb2xvcjtcclxuICB9XHJcblxyXG4gIC8vIFJvdGF0ZSBjZWxsIC0gQ29ycmVjdGluZyB0aGUgamF2YXNjcmlwdCBtb2R1bG8gYnVnIGZvciBuZWdhdGl2ZSB2YWx1ZXM6IGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDA5MDcxNzAzNTE0MGlmXy9qYXZhc2NyaXB0LmFib3V0LmNvbS9vZC9wcm9ibGVtc29sdmluZy9hL21vZHVsb2J1Zy5odG1cclxuICByb3RhdGUoYW5nbGU6IG51bWJlciA9IHRoaXMuZWxlbWVudC5yb3RhdGlvbkFuZ2xlKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuZnJvemVuKSB7XHJcbiAgICAgIGlmIChNYXRoLmFicyhhbmdsZSkgJSB0aGlzLmVsZW1lbnQucm90YXRpb25BbmdsZSAhPT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgIFwiRXJyb3IgaW4gdGhlIHN1cHBsaWVkIGFuZ2xlIGNvbXBhcmVkIHRvIHRoZSBlbGVtZW50IHJvdGF0aW9uIGFuZ2xlLlwiXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gKCgodGhpcy5yb3RhdGlvbiArIGFuZ2xlKSAlIDM2MCkgKyAzNjApICUgMzYwO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlRoaXMgY2VsbCBpcyBmcm96ZW4sIHlvdSBjYW4ndCByb3RhdGUgaXQuXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRnJlZXplKCk6IHZvaWQge1xyXG4gICAgdGhpcy5mcm96ZW4gPSAhdGhpcy5mcm96ZW47XHJcbiAgfVxyXG5cclxuICAvLyBGaXJlIHRoZSBsNHowcjVcclxuICBmaXJlKCk6IFBvaW50ZXIge1xyXG4gICAgaWYgKHRoaXMuZWxlbWVudC5uYW1lID09PSBcImxhc2VyXCIpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQb2ludGVyKHRoaXMuY29vcmQsIHRoaXMucm90YXRpb24sIDEsIDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBsYXNlcnMgY2FuIGZpcmUgYSBwYXJ0aWNsZS5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBESVNQTEFZIE1FVEhPRFNcclxuICBkcmF3KGdhbWU6IEdhbWUpOiB2b2lkIHtcclxuICAgIGdhbWUuZHJhdyh0aGlzKTtcclxuICB9XHJcblxyXG4gIC8vIE92ZXJyaWRlIHRvU3RyaW5nKCkgbWV0aG9kXHJcbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgQ2VsbCBAICR7dGhpcy5jb29yZC50b1N0cmluZygpfSBpcyAke1xyXG4gICAgICB0aGlzLmZyb3plbiA/IFwiZnJvemVuXCIgOiBcInVuZnJvemVuXCJcclxuICAgIH0gJHt0aGlzLmVsZW1lbnQudG9TdHJpbmcoKX0gcm90YXRlZCAke3RoaXMucm90YXRpb259wrBgO1xyXG4gIH1cclxuXHJcbiAgLy8gRXhwb3J0IHRvIEpTT04gZm9ybWF0XHJcbiAgZXhwb3J0Q2VsbEpTT04oKToge30ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogdGhpcy5jb29yZC54LFxyXG4gICAgICB5OiB0aGlzLmNvb3JkLnksXHJcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudC5uYW1lLFxyXG4gICAgICByb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcclxuICAgICAgZnJvemVuOiB0aGlzLmZyb3plblxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEltcG9ydCBmcm9tIEpTT05cclxuICBzdGF0aWMgaW1wb3J0SlNPTihqc29uOiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICBlbGVtZW50OiBzdHJpbmc7XHJcbiAgICByb3RhdGlvbjogbnVtYmVyO1xyXG4gICAgZnJvemVuOiBib29sZWFuO1xyXG4gIH0pOiBDZWxsIHtcclxuICAgIGNvbnN0IGNvb3JkID0gbmV3IENvb3JkKGpzb24ueSwganNvbi54KTtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBFbGVtZW50LmZyb21OYW1lKGpzb24uZWxlbWVudCk7XHJcbiAgICByZXR1cm4gbmV3IENlbGwoY29vcmQsIGVsZW1lbnQsIGpzb24ucm90YXRpb24sIGpzb24uZnJvemVuKTtcclxuICB9XHJcbn1cclxuIiwiLy8gR09BTCBDTEFTU1xyXG4vLyBFYWNoIGRldGVjdG9yIHNob3VsZCBoYXZlIGEgcmVsYXRlZCB0aHJlc2hvbGQgbGV2ZWwgaW4gb3JkZXIgdG8gYWNoaWV2ZSB0aGUgbGV2ZWwuXHJcbi8vIEdvYWwgc2hvdWxkIGV4dGVuZCBDZWxsIG9yIHNob3VsZCBleHRlbmQgQ29vcmRcclxuXHJcbmltcG9ydCBDb29yZCBmcm9tIFwiLi9Db29yZFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29hbCBleHRlbmRzIENvb3JkIHtcclxuICBjb29yZDogQ29vcmQ7XHJcbiAgdGhyZXNob2xkOiBudW1iZXI7XHJcbiAgdmFsdWU6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoY29vcmQ6IENvb3JkLCB0aHJlc2hvbGQ6IG51bWJlciwgdmFsdWUgPSAwKSB7XHJcbiAgICBzdXBlcihjb29yZC55LCBjb29yZC54KTtcclxuICAgIHRoaXMuY29vcmQgPSBjb29yZDtcclxuICAgIHRoaXMudGhyZXNob2xkID0gdGhyZXNob2xkO1xyXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbXBsZXRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlID49IHRoaXMudGhyZXNob2xkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHBlcmNlbnRhZ2UoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodGhpcy52YWx1ZSAvIHRoaXMudGhyZXNob2xkKSAqIDEwMDtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYHsjR29hbCAke1xyXG4gICAgICB0aGlzLmNvbXBsZXRlZCA/IFwiY29tcGxldGVkIFwiIDogXCIgXCJcclxuICAgIH1AICR7dGhpcy5jb29yZC50b1N0cmluZygpfSBpcyAke3RoaXMudmFsdWV9IC8gJHt0aGlzLnRocmVzaG9sZH19ICgke1xyXG4gICAgICB0aGlzLnBlcmNlbnRhZ2VcclxuICAgIH0lKWA7XHJcbiAgfVxyXG5cclxuICAvLyBGb3JtYXQgYWN0aXZlIHBhcnRpY2xlIGxpc3RcclxuICBzdGF0aWMgbWFueVRvU3RyaW5nKGdvYWxzOiBHb2FsW10pOiBzdHJpbmcge1xyXG4gICAgbGV0IHJlc3VsdCA9IGAke2dvYWxzLmxlbmd0aH0gYWN0aXZlIGdvYWxzLi4uXFxuYDtcclxuICAgIGdvYWxzLmZvckVhY2goZ29hbCA9PiB7XHJcbiAgICAgIHJlc3VsdCArPSBgLSAke2dvYWwudG9TdHJpbmcoKX1cXG5gO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLy8gSW1wb3J0IEpTT05cclxuICAvLyBzdGF0aWMgaW1wb3J0SlNPTihcclxuICAvLyAgIGpzb25Hb2FsczogQXJyYXk8eyB4OiBudW1iZXI7IHk6IG51bWJlcjsgdGhyZXNob2xkOiBudW1iZXIgfT5cclxuICAvLyApOiBHb2FsW10ge1xyXG4gIC8vICAgY29uc3QgZ29hbHM6IEdvYWxbXSA9IFtdO1xyXG4gIC8vICAganNvbkdvYWxzLmZvckVhY2goZ29hbCA9PiB7XHJcbiAgLy8gICAgIGNvbnN0IGNvb3JkID0gbmV3IENvb3JkKGdvYWwueSwgZ29hbC54KTtcclxuICAvLyAgICAgZ29hbHMucHVzaChuZXcgR29hbChjb29yZCwgZ29hbC50aHJlc2hvbGQpKTtcclxuICAvLyAgIH0pO1xyXG4gIC8vICAgcmV0dXJuIGdvYWxzO1xyXG4gIC8vIH1cclxufVxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0VXRpbGl0eSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcHJvY2Vzc0lucHV0Q2FsbGJhY2s6IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gYW55O1xyXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmU6ICh2YWx1ZT86IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgc3RhdGljIHdhaXRGb3JJbnB1dChcclxuICAgIGhhbmRsZUlucHV0OiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IGJvb2xlYW5cclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZVxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBpZiAoSW5wdXRVdGlsaXR5LnByb2Nlc3NJbnB1dENhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBJbnB1dFV0aWxpdHkuc3RvcFByb2Nlc3NpbmcoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgSW5wdXRVdGlsaXR5LnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlXHJcbiAgICAgIElucHV0VXRpbGl0eS5wcm9jZXNzSW5wdXRDYWxsYmFjayA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT5cclxuICAgICAgICBJbnB1dFV0aWxpdHkucHJvY2Vzc0lucHV0KGV2ZW50LCBoYW5kbGVJbnB1dCk7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBJbnB1dFV0aWxpdHkucHJvY2Vzc0lucHV0Q2FsbGJhY2spO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBwcm9jZXNzSW5wdXQoXHJcbiAgICBldmVudDogS2V5Ym9hcmRFdmVudCxcclxuICAgIGhhbmRsZUlucHV0OiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IGJvb2xlYW5cclxuICApOiB2b2lkIHtcclxuICAgIGlmIChoYW5kbGVJbnB1dChldmVudCkpIHtcclxuICAgICAgSW5wdXRVdGlsaXR5LnN0b3BQcm9jZXNzaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBzdG9wUHJvY2Vzc2luZygpOiB2b2lkIHtcclxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBJbnB1dFV0aWxpdHkucHJvY2Vzc0lucHV0Q2FsbGJhY2spO1xyXG4gICAgLy8gSW5wdXRVdGlsaXR5LnByb2Nlc3NJbnB1dENhbGxiYWNrID0gdW5kZWZpbmVkXHJcbiAgICBJbnB1dFV0aWxpdHkucHJvY2Vzc0lucHV0Q2FsbGJhY2sgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgSW5wdXRVdGlsaXR5LnJlc29sdmUoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJhY2tlbmQgZnJvbSBcIi4vYmFja2VuZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIGV4dGVuZHMgQmFja2VuZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2N0eCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIH1cbiAgICBzY2hlZHVsZShjYikgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpOyB9XG4gICAgZ2V0Q29udGFpbmVyKCkgeyByZXR1cm4gdGhpcy5fY3R4LmNhbnZhczsgfVxuICAgIHNldE9wdGlvbnMob3B0cykge1xuICAgICAgICBzdXBlci5zZXRPcHRpb25zKG9wdHMpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IChvcHRzLmZvbnRTdHlsZSA/IGAke29wdHMuZm9udFN0eWxlfSBgIDogYGApO1xuICAgICAgICBjb25zdCBmb250ID0gYCR7c3R5bGV9ICR7b3B0cy5mb250U2l6ZX1weCAke29wdHMuZm9udEZhbWlseX1gO1xuICAgICAgICB0aGlzLl9jdHguZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNpemUoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLl9jdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgdGhpcy5fY3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fb3B0aW9ucy5iZztcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMuX2N0eC5jYW52YXMud2lkdGgsIHRoaXMuX2N0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgZXZlbnRUb1Bvc2l0aW9uKHgsIHkpIHtcbiAgICAgICAgbGV0IGNhbnZhcyA9IHRoaXMuX2N0eC5jYW52YXM7XG4gICAgICAgIGxldCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB4IC09IHJlY3QubGVmdDtcbiAgICAgICAgeSAtPSByZWN0LnRvcDtcbiAgICAgICAgeCAqPSBjYW52YXMud2lkdGggLyByZWN0LndpZHRoO1xuICAgICAgICB5ICo9IGNhbnZhcy5oZWlnaHQgLyByZWN0LmhlaWdodDtcbiAgICAgICAgaWYgKHggPCAwIHx8IHkgPCAwIHx8IHggPj0gY2FudmFzLndpZHRoIHx8IHkgPj0gY2FudmFzLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIFstMSwgLTFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVkRXZlbnRUb1Bvc2l0aW9uKHgsIHkpO1xuICAgIH1cbn1cbiIsImltcG9ydCBDYW52YXMgZnJvbSBcIi4vY2FudmFzLmpzXCI7XG5pbXBvcnQgeyBtb2QgfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgSGV4YWdvbmFsIGJhY2tlbmRcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhleCBleHRlbmRzIENhbnZhcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3NwYWNpbmdYID0gMDtcbiAgICAgICAgdGhpcy5fc3BhY2luZ1kgPSAwO1xuICAgICAgICB0aGlzLl9oZXhTaXplID0gMDtcbiAgICB9XG4gICAgZHJhdyhkYXRhLCBjbGVhckJlZm9yZSkge1xuICAgICAgICBsZXQgW3gsIHksIGNoLCBmZywgYmddID0gZGF0YTtcbiAgICAgICAgbGV0IHB4ID0gW1xuICAgICAgICAgICAgKHggKyAxKSAqIHRoaXMuX3NwYWNpbmdYLFxuICAgICAgICAgICAgeSAqIHRoaXMuX3NwYWNpbmdZICsgdGhpcy5faGV4U2l6ZVxuICAgICAgICBdO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmFuc3Bvc2UpIHtcbiAgICAgICAgICAgIHB4LnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYXJCZWZvcmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSBiZztcbiAgICAgICAgICAgIHRoaXMuX2ZpbGwocHhbMF0sIHB4WzFdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IGZnO1xuICAgICAgICBsZXQgY2hhcnMgPSBbXS5jb25jYXQoY2gpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFRleHQoY2hhcnNbaV0sIHB4WzBdLCBNYXRoLmNlaWwocHhbMV0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wdXRlU2l6ZShhdmFpbFdpZHRoLCBhdmFpbEhlaWdodCkge1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmFuc3Bvc2UpIHtcbiAgICAgICAgICAgIGF2YWlsV2lkdGggKz0gYXZhaWxIZWlnaHQ7XG4gICAgICAgICAgICBhdmFpbEhlaWdodCA9IGF2YWlsV2lkdGggLSBhdmFpbEhlaWdodDtcbiAgICAgICAgICAgIGF2YWlsV2lkdGggLT0gYXZhaWxIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHdpZHRoID0gTWF0aC5mbG9vcihhdmFpbFdpZHRoIC8gdGhpcy5fc3BhY2luZ1gpIC0gMTtcbiAgICAgICAgbGV0IGhlaWdodCA9IE1hdGguZmxvb3IoKGF2YWlsSGVpZ2h0IC0gMiAqIHRoaXMuX2hleFNpemUpIC8gdGhpcy5fc3BhY2luZ1kgKyAxKTtcbiAgICAgICAgcmV0dXJuIFt3aWR0aCwgaGVpZ2h0XTtcbiAgICB9XG4gICAgY29tcHV0ZUZvbnRTaXplKGF2YWlsV2lkdGgsIGF2YWlsSGVpZ2h0KSB7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyYW5zcG9zZSkge1xuICAgICAgICAgICAgYXZhaWxXaWR0aCArPSBhdmFpbEhlaWdodDtcbiAgICAgICAgICAgIGF2YWlsSGVpZ2h0ID0gYXZhaWxXaWR0aCAtIGF2YWlsSGVpZ2h0O1xuICAgICAgICAgICAgYXZhaWxXaWR0aCAtPSBhdmFpbEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaGV4U2l6ZVdpZHRoID0gMiAqIGF2YWlsV2lkdGggLyAoKHRoaXMuX29wdGlvbnMud2lkdGggKyAxKSAqIE1hdGguc3FydCgzKSkgLSAxO1xuICAgICAgICBsZXQgaGV4U2l6ZUhlaWdodCA9IGF2YWlsSGVpZ2h0IC8gKDIgKyAxLjUgKiAodGhpcy5fb3B0aW9ucy5oZWlnaHQgLSAxKSk7XG4gICAgICAgIGxldCBoZXhTaXplID0gTWF0aC5taW4oaGV4U2l6ZVdpZHRoLCBoZXhTaXplSGVpZ2h0KTtcbiAgICAgICAgLy8gY29tcHV0ZSBjaGFyIHJhdGlvXG4gICAgICAgIGxldCBvbGRGb250ID0gdGhpcy5fY3R4LmZvbnQ7XG4gICAgICAgIHRoaXMuX2N0eC5mb250ID0gXCIxMDBweCBcIiArIHRoaXMuX29wdGlvbnMuZm9udEZhbWlseTtcbiAgICAgICAgbGV0IHdpZHRoID0gTWF0aC5jZWlsKHRoaXMuX2N0eC5tZWFzdXJlVGV4dChcIldcIikud2lkdGgpO1xuICAgICAgICB0aGlzLl9jdHguZm9udCA9IG9sZEZvbnQ7XG4gICAgICAgIGxldCByYXRpbyA9IHdpZHRoIC8gMTAwO1xuICAgICAgICBoZXhTaXplID0gTWF0aC5mbG9vcihoZXhTaXplKSArIDE7IC8vIGNsb3Nlc3QgbGFyZ2VyIGhleFNpemVcbiAgICAgICAgLy8gRklYTUUgY2hhciBzaXplIGNvbXB1dGF0aW9uIGRvZXMgbm90IHJlc3BlY3QgdHJhbnNwb3NlZCBoZXhlc1xuICAgICAgICBsZXQgZm9udFNpemUgPSAyICogaGV4U2l6ZSAvICh0aGlzLl9vcHRpb25zLnNwYWNpbmcgKiAoMSArIHJhdGlvIC8gTWF0aC5zcXJ0KDMpKSk7XG4gICAgICAgIC8vIGNsb3Nlc3Qgc21hbGxlciBmb250U2l6ZVxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGZvbnRTaXplKSAtIDE7XG4gICAgfVxuICAgIF9ub3JtYWxpemVkRXZlbnRUb1Bvc2l0aW9uKHgsIHkpIHtcbiAgICAgICAgbGV0IG5vZGVTaXplO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmFuc3Bvc2UpIHtcbiAgICAgICAgICAgIHggKz0geTtcbiAgICAgICAgICAgIHkgPSB4IC0geTtcbiAgICAgICAgICAgIHggLT0geTtcbiAgICAgICAgICAgIG5vZGVTaXplID0gdGhpcy5fY3R4LmNhbnZhcy53aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVTaXplID0gdGhpcy5fY3R4LmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNpemUgPSBub2RlU2l6ZSAvIHRoaXMuX29wdGlvbnMuaGVpZ2h0O1xuICAgICAgICB5ID0gTWF0aC5mbG9vcih5IC8gc2l6ZSk7XG4gICAgICAgIGlmIChtb2QoeSwgMikpIHsgLyogb2RkIHJvdyAqL1xuICAgICAgICAgICAgeCAtPSB0aGlzLl9zcGFjaW5nWDtcbiAgICAgICAgICAgIHggPSAxICsgMiAqIE1hdGguZmxvb3IoeCAvICgyICogdGhpcy5fc3BhY2luZ1gpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHggPSAyICogTWF0aC5mbG9vcih4IC8gKDIgKiB0aGlzLl9zcGFjaW5nWCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbeCwgeV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFyZ3VtZW50cyBhcmUgcGl4ZWwgdmFsdWVzLiBJZiBcInRyYW5zcG9zZWRcIiBtb2RlIGlzIGVuYWJsZWQsIHRoZW4gdGhlc2UgdHdvIGFyZSBhbHJlYWR5IHN3YXBwZWQuXG4gICAgICovXG4gICAgX2ZpbGwoY3gsIGN5KSB7XG4gICAgICAgIGxldCBhID0gdGhpcy5faGV4U2l6ZTtcbiAgICAgICAgbGV0IGIgPSB0aGlzLl9vcHRpb25zLmJvcmRlcjtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyYW5zcG9zZSkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhjeCAtIGEgKyBiLCBjeSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGN4IC0gYSAvIDIgKyBiLCBjeSArIHRoaXMuX3NwYWNpbmdYIC0gYik7XG4gICAgICAgICAgICBjdHgubGluZVRvKGN4ICsgYSAvIDIgLSBiLCBjeSArIHRoaXMuX3NwYWNpbmdYIC0gYik7XG4gICAgICAgICAgICBjdHgubGluZVRvKGN4ICsgYSAtIGIsIGN5KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oY3ggKyBhIC8gMiAtIGIsIGN5IC0gdGhpcy5fc3BhY2luZ1ggKyBiKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oY3ggLSBhIC8gMiArIGIsIGN5IC0gdGhpcy5fc3BhY2luZ1ggKyBiKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oY3ggLSBhICsgYiwgY3kpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhjeCwgY3kgLSBhICsgYik7XG4gICAgICAgICAgICBjdHgubGluZVRvKGN4ICsgdGhpcy5fc3BhY2luZ1ggLSBiLCBjeSAtIGEgLyAyICsgYik7XG4gICAgICAgICAgICBjdHgubGluZVRvKGN4ICsgdGhpcy5fc3BhY2luZ1ggLSBiLCBjeSArIGEgLyAyIC0gYik7XG4gICAgICAgICAgICBjdHgubGluZVRvKGN4LCBjeSArIGEgLSBiKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oY3ggLSB0aGlzLl9zcGFjaW5nWCArIGIsIGN5ICsgYSAvIDIgLSBiKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oY3ggLSB0aGlzLl9zcGFjaW5nWCArIGIsIGN5IC0gYSAvIDIgKyBiKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oY3gsIGN5IC0gYSArIGIpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgfVxuICAgIF91cGRhdGVTaXplKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgY29uc3QgY2hhcldpZHRoID0gTWF0aC5jZWlsKHRoaXMuX2N0eC5tZWFzdXJlVGV4dChcIldcIikud2lkdGgpO1xuICAgICAgICB0aGlzLl9oZXhTaXplID0gTWF0aC5mbG9vcihvcHRzLnNwYWNpbmcgKiAob3B0cy5mb250U2l6ZSArIGNoYXJXaWR0aCAvIE1hdGguc3FydCgzKSkgLyAyKTtcbiAgICAgICAgdGhpcy5fc3BhY2luZ1ggPSB0aGlzLl9oZXhTaXplICogTWF0aC5zcXJ0KDMpIC8gMjtcbiAgICAgICAgdGhpcy5fc3BhY2luZ1kgPSB0aGlzLl9oZXhTaXplICogMS41O1xuICAgICAgICBsZXQgeHByb3A7XG4gICAgICAgIGxldCB5cHJvcDtcbiAgICAgICAgaWYgKG9wdHMudHJhbnNwb3NlKSB7XG4gICAgICAgICAgICB4cHJvcCA9IFwiaGVpZ2h0XCI7XG4gICAgICAgICAgICB5cHJvcCA9IFwid2lkdGhcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHhwcm9wID0gXCJ3aWR0aFwiO1xuICAgICAgICAgICAgeXByb3AgPSBcImhlaWdodFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5jYW52YXNbeHByb3BdID0gTWF0aC5jZWlsKChvcHRzLndpZHRoICsgMSkgKiB0aGlzLl9zcGFjaW5nWCk7XG4gICAgICAgIHRoaXMuX2N0eC5jYW52YXNbeXByb3BdID0gTWF0aC5jZWlsKChvcHRzLmhlaWdodCAtIDEpICogdGhpcy5fc3BhY2luZ1kgKyAyICogdGhpcy5faGV4U2l6ZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IENhbnZhcyBmcm9tIFwiLi9jYW52YXMuanNcIjtcbi8qKlxuICogQGNsYXNzIFJlY3Rhbmd1bGFyIGJhY2tlbmRcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY3QgZXh0ZW5kcyBDYW52YXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9zcGFjaW5nWCA9IDA7XG4gICAgICAgIHRoaXMuX3NwYWNpbmdZID0gMDtcbiAgICAgICAgdGhpcy5fY2FudmFzQ2FjaGUgPSB7fTtcbiAgICB9XG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2NhbnZhc0NhY2hlID0ge307XG4gICAgfVxuICAgIGRyYXcoZGF0YSwgY2xlYXJCZWZvcmUpIHtcbiAgICAgICAgaWYgKFJlY3QuY2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdXaXRoQ2FjaGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kcmF3Tm9DYWNoZShkYXRhLCBjbGVhckJlZm9yZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2RyYXdXaXRoQ2FjaGUoZGF0YSkge1xuICAgICAgICBsZXQgW3gsIHksIGNoLCBmZywgYmddID0gZGF0YTtcbiAgICAgICAgbGV0IGhhc2ggPSBcIlwiICsgY2ggKyBmZyArIGJnO1xuICAgICAgICBsZXQgY2FudmFzO1xuICAgICAgICBpZiAoaGFzaCBpbiB0aGlzLl9jYW52YXNDYWNoZSkge1xuICAgICAgICAgICAgY2FudmFzID0gdGhpcy5fY2FudmFzQ2FjaGVbaGFzaF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgYiA9IHRoaXMuX29wdGlvbnMuYm9yZGVyO1xuICAgICAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5fc3BhY2luZ1g7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5fc3BhY2luZ1k7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmc7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoYiwgYiwgY2FudmFzLndpZHRoIC0gYiwgY2FudmFzLmhlaWdodCAtIGIpO1xuICAgICAgICAgICAgaWYgKGNoKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZnO1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGhpcy5fY3R4LmZvbnQ7XG4gICAgICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gW10uY29uY2F0KGNoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChjaGFyc1tpXSwgdGhpcy5fc3BhY2luZ1ggLyAyLCBNYXRoLmNlaWwodGhpcy5fc3BhY2luZ1kgLyAyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2FudmFzQ2FjaGVbaGFzaF0gPSBjYW52YXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LmRyYXdJbWFnZShjYW52YXMsIHggKiB0aGlzLl9zcGFjaW5nWCwgeSAqIHRoaXMuX3NwYWNpbmdZKTtcbiAgICB9XG4gICAgX2RyYXdOb0NhY2hlKGRhdGEsIGNsZWFyQmVmb3JlKSB7XG4gICAgICAgIGxldCBbeCwgeSwgY2gsIGZnLCBiZ10gPSBkYXRhO1xuICAgICAgICBpZiAoY2xlYXJCZWZvcmUpIHtcbiAgICAgICAgICAgIGxldCBiID0gdGhpcy5fb3B0aW9ucy5ib3JkZXI7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gYmc7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoeCAqIHRoaXMuX3NwYWNpbmdYICsgYiwgeSAqIHRoaXMuX3NwYWNpbmdZICsgYiwgdGhpcy5fc3BhY2luZ1ggLSBiLCB0aGlzLl9zcGFjaW5nWSAtIGIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gZmc7XG4gICAgICAgIGxldCBjaGFycyA9IFtdLmNvbmNhdChjaCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsVGV4dChjaGFyc1tpXSwgKHggKyAwLjUpICogdGhpcy5fc3BhY2luZ1gsIE1hdGguY2VpbCgoeSArIDAuNSkgKiB0aGlzLl9zcGFjaW5nWSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXB1dGVTaXplKGF2YWlsV2lkdGgsIGF2YWlsSGVpZ2h0KSB7XG4gICAgICAgIGxldCB3aWR0aCA9IE1hdGguZmxvb3IoYXZhaWxXaWR0aCAvIHRoaXMuX3NwYWNpbmdYKTtcbiAgICAgICAgbGV0IGhlaWdodCA9IE1hdGguZmxvb3IoYXZhaWxIZWlnaHQgLyB0aGlzLl9zcGFjaW5nWSk7XG4gICAgICAgIHJldHVybiBbd2lkdGgsIGhlaWdodF07XG4gICAgfVxuICAgIGNvbXB1dGVGb250U2l6ZShhdmFpbFdpZHRoLCBhdmFpbEhlaWdodCkge1xuICAgICAgICBsZXQgYm94V2lkdGggPSBNYXRoLmZsb29yKGF2YWlsV2lkdGggLyB0aGlzLl9vcHRpb25zLndpZHRoKTtcbiAgICAgICAgbGV0IGJveEhlaWdodCA9IE1hdGguZmxvb3IoYXZhaWxIZWlnaHQgLyB0aGlzLl9vcHRpb25zLmhlaWdodCk7XG4gICAgICAgIC8qIGNvbXB1dGUgY2hhciByYXRpbyAqL1xuICAgICAgICBsZXQgb2xkRm9udCA9IHRoaXMuX2N0eC5mb250O1xuICAgICAgICB0aGlzLl9jdHguZm9udCA9IFwiMTAwcHggXCIgKyB0aGlzLl9vcHRpb25zLmZvbnRGYW1pbHk7XG4gICAgICAgIGxldCB3aWR0aCA9IE1hdGguY2VpbCh0aGlzLl9jdHgubWVhc3VyZVRleHQoXCJXXCIpLndpZHRoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZvbnQgPSBvbGRGb250O1xuICAgICAgICBsZXQgcmF0aW8gPSB3aWR0aCAvIDEwMDtcbiAgICAgICAgbGV0IHdpZHRoRnJhY3Rpb24gPSByYXRpbyAqIGJveEhlaWdodCAvIGJveFdpZHRoO1xuICAgICAgICBpZiAod2lkdGhGcmFjdGlvbiA+IDEpIHsgLyogdG9vIHdpZGUgd2l0aCBjdXJyZW50IGFzcGVjdCByYXRpbyAqL1xuICAgICAgICAgICAgYm94SGVpZ2h0ID0gTWF0aC5mbG9vcihib3hIZWlnaHQgLyB3aWR0aEZyYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihib3hIZWlnaHQgLyB0aGlzLl9vcHRpb25zLnNwYWNpbmcpO1xuICAgIH1cbiAgICBfbm9ybWFsaXplZEV2ZW50VG9Qb3NpdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiBbTWF0aC5mbG9vcih4IC8gdGhpcy5fc3BhY2luZ1gpLCBNYXRoLmZsb29yKHkgLyB0aGlzLl9zcGFjaW5nWSldO1xuICAgIH1cbiAgICBfdXBkYXRlU2l6ZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMuX29wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNoYXJXaWR0aCA9IE1hdGguY2VpbCh0aGlzLl9jdHgubWVhc3VyZVRleHQoXCJXXCIpLndpZHRoKTtcbiAgICAgICAgdGhpcy5fc3BhY2luZ1ggPSBNYXRoLmNlaWwob3B0cy5zcGFjaW5nICogY2hhcldpZHRoKTtcbiAgICAgICAgdGhpcy5fc3BhY2luZ1kgPSBNYXRoLmNlaWwob3B0cy5zcGFjaW5nICogb3B0cy5mb250U2l6ZSk7XG4gICAgICAgIGlmIChvcHRzLmZvcmNlU3F1YXJlUmF0aW8pIHtcbiAgICAgICAgICAgIHRoaXMuX3NwYWNpbmdYID0gdGhpcy5fc3BhY2luZ1kgPSBNYXRoLm1heCh0aGlzLl9zcGFjaW5nWCwgdGhpcy5fc3BhY2luZ1kpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5jYW52YXMud2lkdGggPSBvcHRzLndpZHRoICogdGhpcy5fc3BhY2luZ1g7XG4gICAgICAgIHRoaXMuX2N0eC5jYW52YXMuaGVpZ2h0ID0gb3B0cy5oZWlnaHQgKiB0aGlzLl9zcGFjaW5nWTtcbiAgICB9XG59XG5SZWN0LmNhY2hlID0gZmFsc2U7XG4iLCJpbXBvcnQgQ2FudmFzIGZyb20gXCIuL2NhbnZhcy5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgVGlsZSBiYWNrZW5kXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaWxlIGV4dGVuZHMgQ2FudmFzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fY29sb3JDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIH1cbiAgICBkcmF3KGRhdGEsIGNsZWFyQmVmb3JlKSB7XG4gICAgICAgIGxldCBbeCwgeSwgY2gsIGZnLCBiZ10gPSBkYXRhO1xuICAgICAgICBsZXQgdGlsZVdpZHRoID0gdGhpcy5fb3B0aW9ucy50aWxlV2lkdGg7XG4gICAgICAgIGxldCB0aWxlSGVpZ2h0ID0gdGhpcy5fb3B0aW9ucy50aWxlSGVpZ2h0O1xuICAgICAgICBpZiAoY2xlYXJCZWZvcmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRpbGVDb2xvcml6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N0eC5jbGVhclJlY3QoeCAqIHRpbGVXaWR0aCwgeSAqIHRpbGVIZWlnaHQsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gYmc7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxSZWN0KHggKiB0aWxlV2lkdGgsIHkgKiB0aWxlSGVpZ2h0LCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hhcnMgPSBbXS5jb25jYXQoY2gpO1xuICAgICAgICBsZXQgZmdzID0gW10uY29uY2F0KGZnKTtcbiAgICAgICAgbGV0IGJncyA9IFtdLmNvbmNhdChiZyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0aWxlID0gdGhpcy5fb3B0aW9ucy50aWxlTWFwW2NoYXJzW2ldXTtcbiAgICAgICAgICAgIGlmICghdGlsZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhciBcIiR7Y2hhcnNbaV19XCIgbm90IGZvdW5kIGluIHRpbGVNYXBgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRpbGVDb2xvcml6ZSkgeyAvLyBhcHBseSBjb2xvcml6YXRpb25cbiAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gdGhpcy5fY29sb3JDYW52YXM7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCk7XG4gICAgICAgICAgICAgICAgbGV0IGZnID0gZmdzW2ldO1xuICAgICAgICAgICAgICAgIGxldCBiZyA9IGJnc1tpXTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZSh0aGlzLl9vcHRpb25zLnRpbGVTZXQsIHRpbGVbMF0sIHRpbGVbMV0sIHRpbGVXaWR0aCwgdGlsZUhlaWdodCwgMCwgMCwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBpZiAoZmcgIT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtYXRvcFwiO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChiZyAhPSBcInRyYW5zcGFyZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBiZztcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW92ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jdHguZHJhd0ltYWdlKGNhbnZhcywgeCAqIHRpbGVXaWR0aCwgeSAqIHRpbGVIZWlnaHQsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHsgLy8gbm8gY29sb3JpemluZywgZWFzeVxuICAgICAgICAgICAgICAgIHRoaXMuX2N0eC5kcmF3SW1hZ2UodGhpcy5fb3B0aW9ucy50aWxlU2V0LCB0aWxlWzBdLCB0aWxlWzFdLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsIHggKiB0aWxlV2lkdGgsIHkgKiB0aWxlSGVpZ2h0LCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXB1dGVTaXplKGF2YWlsV2lkdGgsIGF2YWlsSGVpZ2h0KSB7XG4gICAgICAgIGxldCB3aWR0aCA9IE1hdGguZmxvb3IoYXZhaWxXaWR0aCAvIHRoaXMuX29wdGlvbnMudGlsZVdpZHRoKTtcbiAgICAgICAgbGV0IGhlaWdodCA9IE1hdGguZmxvb3IoYXZhaWxIZWlnaHQgLyB0aGlzLl9vcHRpb25zLnRpbGVIZWlnaHQpO1xuICAgICAgICByZXR1cm4gW3dpZHRoLCBoZWlnaHRdO1xuICAgIH1cbiAgICBjb21wdXRlRm9udFNpemUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbGUgYmFja2VuZCBkb2VzIG5vdCB1bmRlcnN0YW5kIGZvbnQgc2l6ZVwiKTtcbiAgICB9XG4gICAgX25vcm1hbGl6ZWRFdmVudFRvUG9zaXRpb24oeCwgeSkge1xuICAgICAgICByZXR1cm4gW01hdGguZmxvb3IoeCAvIHRoaXMuX29wdGlvbnMudGlsZVdpZHRoKSwgTWF0aC5mbG9vcih5IC8gdGhpcy5fb3B0aW9ucy50aWxlSGVpZ2h0KV07XG4gICAgfVxuICAgIF91cGRhdGVTaXplKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgdGhpcy5fY3R4LmNhbnZhcy53aWR0aCA9IG9wdHMud2lkdGggKiBvcHRzLnRpbGVXaWR0aDtcbiAgICAgICAgdGhpcy5fY3R4LmNhbnZhcy5oZWlnaHQgPSBvcHRzLmhlaWdodCAqIG9wdHMudGlsZUhlaWdodDtcbiAgICAgICAgdGhpcy5fY29sb3JDYW52YXMud2lkdGggPSBvcHRzLnRpbGVXaWR0aDtcbiAgICAgICAgdGhpcy5fY29sb3JDYW52YXMuaGVpZ2h0ID0gb3B0cy50aWxlSGVpZ2h0O1xuICAgIH1cbn1cbiIsImltcG9ydCBCYWNrZW5kIGZyb20gXCIuL2JhY2tlbmQuanNcIjtcbmltcG9ydCAqIGFzIENvbG9yIGZyb20gXCIuLi9jb2xvci5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgVGlsZSBiYWNrZW5kXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaWxlR0wgZXh0ZW5kcyBCYWNrZW5kIHtcbiAgICBzdGF0aWMgaXNTdXBwb3J0ZWQoKSB7XG4gICAgICAgIHJldHVybiAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIndlYmdsMlwiLCB7IHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdHJ1ZSB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3VuaWZvcm1zID0ge307XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9nbCA9IHRoaXMuX2luaXRXZWJHTCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBhbGVydChlLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNjaGVkdWxlKGNiKSB7IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYik7IH1cbiAgICBnZXRDb250YWluZXIoKSB7IHJldHVybiB0aGlzLl9nbC5jYW52YXM7IH1cbiAgICBzZXRPcHRpb25zKG9wdHMpIHtcbiAgICAgICAgc3VwZXIuc2V0T3B0aW9ucyhvcHRzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2l6ZSgpO1xuICAgICAgICBsZXQgdGlsZVNldCA9IHRoaXMuX29wdGlvbnMudGlsZVNldDtcbiAgICAgICAgaWYgKHRpbGVTZXQgJiYgXCJjb21wbGV0ZVwiIGluIHRpbGVTZXQgJiYgIXRpbGVTZXQuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRpbGVTZXQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4gdGhpcy5fdXBkYXRlVGV4dHVyZSh0aWxlU2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVUZXh0dXJlKHRpbGVTZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoZGF0YSwgY2xlYXJCZWZvcmUpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMuX29wdGlvbnM7XG4gICAgICAgIGxldCBbeCwgeSwgY2gsIGZnLCBiZ10gPSBkYXRhO1xuICAgICAgICBsZXQgc2Npc3NvclkgPSBnbC5jYW52YXMuaGVpZ2h0IC0gKHkgKyAxKSAqIG9wdHMudGlsZUhlaWdodDtcbiAgICAgICAgZ2wuc2Npc3Nvcih4ICogb3B0cy50aWxlV2lkdGgsIHNjaXNzb3JZLCBvcHRzLnRpbGVXaWR0aCwgb3B0cy50aWxlSGVpZ2h0KTtcbiAgICAgICAgaWYgKGNsZWFyQmVmb3JlKSB7XG4gICAgICAgICAgICBpZiAob3B0cy50aWxlQ29sb3JpemUpIHtcbiAgICAgICAgICAgICAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2wuY2xlYXJDb2xvciguLi5wYXJzZUNvbG9yKGJnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoYXJzID0gW10uY29uY2F0KGNoKTtcbiAgICAgICAgbGV0IGJncyA9IFtdLmNvbmNhdChiZyk7XG4gICAgICAgIGxldCBmZ3MgPSBbXS5jb25jYXQoZmcpO1xuICAgICAgICBnbC51bmlmb3JtMmZ2KHRoaXMuX3VuaWZvcm1zW1widGFyZ2V0UG9zUmVsXCJdLCBbeCwgeV0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdGlsZSA9IHRoaXMuX29wdGlvbnMudGlsZU1hcFtjaGFyc1tpXV07XG4gICAgICAgICAgICBpZiAoIXRpbGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYXIgXCIke2NoYXJzW2ldfVwiIG5vdCBmb3VuZCBpbiB0aWxlTWFwYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdW5pZm9ybXNbXCJjb2xvcml6ZVwiXSwgb3B0cy50aWxlQ29sb3JpemUgPyAxIDogMCk7XG4gICAgICAgICAgICBnbC51bmlmb3JtMmZ2KHRoaXMuX3VuaWZvcm1zW1widGlsZXNldFBvc0Fic1wiXSwgdGlsZSk7XG4gICAgICAgICAgICBpZiAob3B0cy50aWxlQ29sb3JpemUpIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHRoaXMuX3VuaWZvcm1zW1widGludFwiXSwgcGFyc2VDb2xvcihmZ3NbaV0pKTtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHRoaXMuX3VuaWZvcm1zW1wiYmdcIl0sIHBhcnNlQ29sb3IoYmdzW2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaT0wO2k8Y2hhcnMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudGlsZUNvbG9yaXplKSB7IC8vIGFwcGx5IGNvbG9yaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhbnZhcyA9IHRoaXMuX2NvbG9yQ2FudmFzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0KTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmcgPSBmZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmcgPSBiZ3NbaV07XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy50aWxlU2V0ISxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlWzBdLCB0aWxlWzFdLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCwgMCwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZyAhPSBcInRyYW5zcGFyZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtYXRvcFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmcgIT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBiZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tb3ZlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdHguZHJhd0ltYWdlKGNhbnZhcywgeCp0aWxlV2lkdGgsIHkqdGlsZUhlaWdodCwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gbm8gY29sb3JpemluZywgZWFzeVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRpbGVTZXQhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVbMF0sIHRpbGVbMV0sIHRpbGVXaWR0aCwgdGlsZUhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4KnRpbGVXaWR0aCwgeSp0aWxlSGVpZ2h0LCB0aWxlV2lkdGgsIHRpbGVIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAqL1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICAgICAgZ2wuY2xlYXJDb2xvciguLi5wYXJzZUNvbG9yKHRoaXMuX29wdGlvbnMuYmcpKTtcbiAgICAgICAgZ2wuc2Npc3NvcigwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICB9XG4gICAgY29tcHV0ZVNpemUoYXZhaWxXaWR0aCwgYXZhaWxIZWlnaHQpIHtcbiAgICAgICAgbGV0IHdpZHRoID0gTWF0aC5mbG9vcihhdmFpbFdpZHRoIC8gdGhpcy5fb3B0aW9ucy50aWxlV2lkdGgpO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gTWF0aC5mbG9vcihhdmFpbEhlaWdodCAvIHRoaXMuX29wdGlvbnMudGlsZUhlaWdodCk7XG4gICAgICAgIHJldHVybiBbd2lkdGgsIGhlaWdodF07XG4gICAgfVxuICAgIGNvbXB1dGVGb250U2l6ZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGlsZSBiYWNrZW5kIGRvZXMgbm90IHVuZGVyc3RhbmQgZm9udCBzaXplXCIpO1xuICAgIH1cbiAgICBldmVudFRvUG9zaXRpb24oeCwgeSkge1xuICAgICAgICBsZXQgY2FudmFzID0gdGhpcy5fZ2wuY2FudmFzO1xuICAgICAgICBsZXQgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgeCAtPSByZWN0LmxlZnQ7XG4gICAgICAgIHkgLT0gcmVjdC50b3A7XG4gICAgICAgIHggKj0gY2FudmFzLndpZHRoIC8gcmVjdC53aWR0aDtcbiAgICAgICAgeSAqPSBjYW52YXMuaGVpZ2h0IC8gcmVjdC5oZWlnaHQ7XG4gICAgICAgIGlmICh4IDwgMCB8fCB5IDwgMCB8fCB4ID49IGNhbnZhcy53aWR0aCB8fCB5ID49IGNhbnZhcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBbLTEsIC0xXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZEV2ZW50VG9Qb3NpdGlvbih4LCB5KTtcbiAgICB9XG4gICAgX2luaXRXZWJHTCgpIHtcbiAgICAgICAgbGV0IGdsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwid2ViZ2wyXCIsIHsgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0cnVlIH0pO1xuICAgICAgICB3aW5kb3cuZ2wgPSBnbDtcbiAgICAgICAgbGV0IHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCBWUywgRlMpO1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICBjcmVhdGVRdWFkKGdsKTtcbiAgICAgICAgVU5JRk9STVMuZm9yRWFjaChuYW1lID0+IHRoaXMuX3VuaWZvcm1zW25hbWVdID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpKTtcbiAgICAgICAgdGhpcy5fcHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgICAgIGdsLmJsZW5kRnVuY1NlcGFyYXRlKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcbiAgICAgICAgZ2wuZW5hYmxlKGdsLlNDSVNTT1JfVEVTVCk7XG4gICAgICAgIHJldHVybiBnbDtcbiAgICB9XG4gICAgX25vcm1hbGl6ZWRFdmVudFRvUG9zaXRpb24oeCwgeSkge1xuICAgICAgICByZXR1cm4gW01hdGguZmxvb3IoeCAvIHRoaXMuX29wdGlvbnMudGlsZVdpZHRoKSwgTWF0aC5mbG9vcih5IC8gdGhpcy5fb3B0aW9ucy50aWxlSGVpZ2h0KV07XG4gICAgfVxuICAgIF91cGRhdGVTaXplKCkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgY29uc3QgY2FudmFzU2l6ZSA9IFtvcHRzLndpZHRoICogb3B0cy50aWxlV2lkdGgsIG9wdHMuaGVpZ2h0ICogb3B0cy50aWxlSGVpZ2h0XTtcbiAgICAgICAgZ2wuY2FudmFzLndpZHRoID0gY2FudmFzU2l6ZVswXTtcbiAgICAgICAgZ2wuY2FudmFzLmhlaWdodCA9IGNhbnZhc1NpemVbMV07XG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGNhbnZhc1NpemVbMF0sIGNhbnZhc1NpemVbMV0pO1xuICAgICAgICBnbC51bmlmb3JtMmZ2KHRoaXMuX3VuaWZvcm1zW1widGlsZVNpemVcIl0sIFtvcHRzLnRpbGVXaWR0aCwgb3B0cy50aWxlSGVpZ2h0XSk7XG4gICAgICAgIGdsLnVuaWZvcm0yZnYodGhpcy5fdW5pZm9ybXNbXCJ0YXJnZXRTaXplXCJdLCBjYW52YXNTaXplKTtcbiAgICB9XG4gICAgX3VwZGF0ZVRleHR1cmUodGlsZVNldCkge1xuICAgICAgICBjcmVhdGVUZXh0dXJlKHRoaXMuX2dsLCB0aWxlU2V0KTtcbiAgICB9XG59XG5jb25zdCBVTklGT1JNUyA9IFtcInRhcmdldFBvc1JlbFwiLCBcInRpbGVzZXRQb3NBYnNcIiwgXCJ0aWxlU2l6ZVwiLCBcInRhcmdldFNpemVcIiwgXCJjb2xvcml6ZVwiLCBcImJnXCIsIFwidGludFwiXTtcbmNvbnN0IFZTID0gYFxuI3ZlcnNpb24gMzAwIGVzXG5cbmluIHZlYzIgdGlsZVBvc1JlbDtcbm91dCB2ZWMyIHRpbGVzZXRQb3NQeDtcblxudW5pZm9ybSB2ZWMyIHRpbGVzZXRQb3NBYnM7XG51bmlmb3JtIHZlYzIgdGlsZVNpemU7XG51bmlmb3JtIHZlYzIgdGFyZ2V0U2l6ZTtcbnVuaWZvcm0gdmVjMiB0YXJnZXRQb3NSZWw7XG5cbnZvaWQgbWFpbigpIHtcblx0dmVjMiB0YXJnZXRQb3NQeCA9ICh0YXJnZXRQb3NSZWwgKyB0aWxlUG9zUmVsKSAqIHRpbGVTaXplO1xuXHR2ZWMyIHRhcmdldFBvc05kYyA9ICgodGFyZ2V0UG9zUHggLyB0YXJnZXRTaXplKS0wLjUpKjIuMDtcblx0dGFyZ2V0UG9zTmRjLnkgKj0gLTEuMDtcblxuXHRnbF9Qb3NpdGlvbiA9IHZlYzQodGFyZ2V0UG9zTmRjLCAwLjAsIDEuMCk7XG5cdHRpbGVzZXRQb3NQeCA9IHRpbGVzZXRQb3NBYnMgKyB0aWxlUG9zUmVsICogdGlsZVNpemU7XG59YC50cmltKCk7XG5jb25zdCBGUyA9IGBcbiN2ZXJzaW9uIDMwMCBlc1xucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXG5pbiB2ZWMyIHRpbGVzZXRQb3NQeDtcbm91dCB2ZWM0IGZyYWdDb2xvcjtcbnVuaWZvcm0gc2FtcGxlcjJEIGltYWdlO1xudW5pZm9ybSBib29sIGNvbG9yaXplO1xudW5pZm9ybSB2ZWM0IGJnO1xudW5pZm9ybSB2ZWM0IHRpbnQ7XG5cbnZvaWQgbWFpbigpIHtcblx0ZnJhZ0NvbG9yID0gdmVjNCgwLCAwLCAwLCAxKTtcblxuXHR2ZWM0IHRleGVsID0gdGV4ZWxGZXRjaChpbWFnZSwgaXZlYzIodGlsZXNldFBvc1B4KSwgMCk7XG5cblx0aWYgKGNvbG9yaXplKSB7XG5cdFx0dGV4ZWwucmdiID0gdGludC5hICogdGludC5yZ2IgKyAoMS4wLXRpbnQuYSkgKiB0ZXhlbC5yZ2I7XG5cdFx0ZnJhZ0NvbG9yLnJnYiA9IHRleGVsLmEqdGV4ZWwucmdiICsgKDEuMC10ZXhlbC5hKSpiZy5yZ2I7XG5cdFx0ZnJhZ0NvbG9yLmEgPSB0ZXhlbC5hICsgKDEuMC10ZXhlbC5hKSpiZy5hO1xuXHR9IGVsc2Uge1xuXHRcdGZyYWdDb2xvciA9IHRleGVsO1xuXHR9XG59YC50cmltKCk7XG5mdW5jdGlvbiBjcmVhdGVQcm9ncmFtKGdsLCB2c3MsIGZzcykge1xuICAgIGNvbnN0IHZzID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuICAgIGdsLnNoYWRlclNvdXJjZSh2cywgdnNzKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHZzKTtcbiAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcih2cywgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihnbC5nZXRTaGFkZXJJbmZvTG9nKHZzKSB8fCBcIlwiKTtcbiAgICB9XG4gICAgY29uc3QgZnMgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICBnbC5zaGFkZXJTb3VyY2UoZnMsIGZzcyk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihmcyk7XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnMsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcykgfHwgXCJcIik7XG4gICAgfVxuICAgIGNvbnN0IHAgPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHAsIHZzKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocCwgZnMpO1xuICAgIGdsLmxpbmtQcm9ncmFtKHApO1xuICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGdsLmdldFByb2dyYW1JbmZvTG9nKHApIHx8IFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVF1YWQoZ2wpIHtcbiAgICBjb25zdCBwb3MgPSBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAxLCAwLCAwLCAxLCAxLCAxXSk7XG4gICAgY29uc3QgYnVmID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1Zik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHBvcywgZ2wuU1RBVElDX0RSQVcpO1xuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDApO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoMCwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoZ2wsIGRhdGEpIHtcbiAgICBsZXQgdCA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0KTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLlJFUEVBVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKTtcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAwKTtcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGRhdGEpO1xuICAgIHJldHVybiB0O1xufVxubGV0IGNvbG9yQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIHBhcnNlQ29sb3IoY29sb3IpIHtcbiAgICBpZiAoIShjb2xvciBpbiBjb2xvckNhY2hlKSkge1xuICAgICAgICBsZXQgcGFyc2VkO1xuICAgICAgICBpZiAoY29sb3IgPT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgICAgICAgICBwYXJzZWQgPSBbMCwgMCwgMCwgMF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29sb3IuaW5kZXhPZihcInJnYmFcIikgPiAtMSkge1xuICAgICAgICAgICAgcGFyc2VkID0gKGNvbG9yLm1hdGNoKC9bXFxkLl0rL2cpIHx8IFtdKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkW2ldID0gcGFyc2VkW2ldIC8gMjU1O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkID0gQ29sb3IuZnJvbVN0cmluZyhjb2xvcikubWFwKCQgPT4gJCAvIDI1NSk7XG4gICAgICAgICAgICBwYXJzZWQucHVzaCgxKTtcbiAgICAgICAgfVxuICAgICAgICBjb2xvckNhY2hlW2NvbG9yXSA9IHBhcnNlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yQ2FjaGVbY29sb3JdO1xufVxuIiwiLyoqXG4gKiBAbmFtZXNwYWNlXG4gKiBDb250YWlucyB0ZXh0IHRva2VuaXphdGlvbiBhbmQgYnJlYWtpbmcgcm91dGluZXNcbiAqL1xuY29uc3QgUkVfQ09MT1JTID0gLyUoW2JjXSl7KFtefV0qKX0vZztcbi8vIHRva2VuIHR5cGVzXG5leHBvcnQgY29uc3QgVFlQRV9URVhUID0gMDtcbmV4cG9ydCBjb25zdCBUWVBFX05FV0xJTkUgPSAxO1xuZXhwb3J0IGNvbnN0IFRZUEVfRkcgPSAyO1xuZXhwb3J0IGNvbnN0IFRZUEVfQkcgPSAzO1xuLyoqXG4gKiBNZWFzdXJlIHNpemUgb2YgYSByZXN1bHRpbmcgdGV4dCBibG9ja1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWVhc3VyZShzdHIsIG1heFdpZHRoKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgd2lkdGg6IDAsIGhlaWdodDogMSB9O1xuICAgIGxldCB0b2tlbnMgPSB0b2tlbml6ZShzdHIsIG1heFdpZHRoKTtcbiAgICBsZXQgbGluZVdpZHRoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUWVBFX1RFWFQ6XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoICs9IHRva2VuLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVFlQRV9ORVdMSU5FOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5oZWlnaHQrKztcbiAgICAgICAgICAgICAgICByZXN1bHQud2lkdGggPSBNYXRoLm1heChyZXN1bHQud2lkdGgsIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQud2lkdGggPSBNYXRoLm1heChyZXN1bHQud2lkdGgsIGxpbmVXaWR0aCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQ29udmVydCBzdHJpbmcgdG8gYSBzZXJpZXMgb2YgYSBmb3JtYXR0aW5nIGNvbW1hbmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZShzdHIsIG1heFdpZHRoKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIC8qIGZpcnN0IHRva2VuaXphdGlvbiBwYXNzIC0gc3BsaXQgdGV4dHMgYW5kIGNvbG9yIGZvcm1hdHRpbmcgY29tbWFuZHMgKi9cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBzdHIucmVwbGFjZShSRV9DT0xPUlMsIGZ1bmN0aW9uIChtYXRjaCwgdHlwZSwgbmFtZSwgaW5kZXgpIHtcbiAgICAgICAgLyogc3RyaW5nIGJlZm9yZSAqL1xuICAgICAgICBsZXQgcGFydCA9IHN0ci5zdWJzdHJpbmcob2Zmc2V0LCBpbmRleCk7XG4gICAgICAgIGlmIChwYXJ0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IFRZUEVfVEVYVCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcGFydFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyogY29sb3IgY29tbWFuZCAqL1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAodHlwZSA9PSBcImNcIiA/IFRZUEVfRkcgOiBUWVBFX0JHKSxcbiAgICAgICAgICAgIHZhbHVlOiBuYW1lLnRyaW0oKVxuICAgICAgICB9KTtcbiAgICAgICAgb2Zmc2V0ID0gaW5kZXggKyBtYXRjaC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH0pO1xuICAgIC8qIGxhc3QgcmVtYWluaW5nIHBhcnQgKi9cbiAgICBsZXQgcGFydCA9IHN0ci5zdWJzdHJpbmcob2Zmc2V0KTtcbiAgICBpZiAocGFydC5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogVFlQRV9URVhULFxuICAgICAgICAgICAgdmFsdWU6IHBhcnRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBicmVha0xpbmVzKHJlc3VsdCwgbWF4V2lkdGgpO1xufVxuLyogaW5zZXJ0IGxpbmUgYnJlYWtzIGludG8gZmlyc3QtcGFzcyB0b2tlbml6ZWQgZGF0YSAqL1xuZnVuY3Rpb24gYnJlYWtMaW5lcyh0b2tlbnMsIG1heFdpZHRoKSB7XG4gICAgaWYgKCFtYXhXaWR0aCkge1xuICAgICAgICBtYXhXaWR0aCA9IEluZmluaXR5O1xuICAgIH1cbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxpbmVMZW5ndGggPSAwO1xuICAgIGxldCBsYXN0VG9rZW5XaXRoU3BhY2UgPSAtMTtcbiAgICB3aGlsZSAoaSA8IHRva2Vucy5sZW5ndGgpIHsgLyogdGFrZSBhbGwgdGV4dCB0b2tlbnMsIHJlbW92ZSBzcGFjZSwgYXBwbHkgbGluZWJyZWFrcyAqL1xuICAgICAgICBsZXQgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIGlmICh0b2tlbi50eXBlID09IFRZUEVfTkVXTElORSkgeyAvKiByZXNldCAqL1xuICAgICAgICAgICAgbGluZUxlbmd0aCA9IDA7XG4gICAgICAgICAgICBsYXN0VG9rZW5XaXRoU3BhY2UgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4udHlwZSAhPSBUWVBFX1RFWFQpIHsgLyogc2tpcCBub24tdGV4dCB0b2tlbnMgKi9cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qIHJlbW92ZSBzcGFjZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBsaW5lICovXG4gICAgICAgIHdoaWxlIChsaW5lTGVuZ3RoID09IDAgJiYgdG9rZW4udmFsdWUuY2hhckF0KDApID09IFwiIFwiKSB7XG4gICAgICAgICAgICB0b2tlbi52YWx1ZSA9IHRva2VuLnZhbHVlLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBmb3JjZWQgbmV3bGluZT8gaW5zZXJ0IHR3byBuZXcgdG9rZW5zIGFmdGVyIHRoaXMgb25lICovXG4gICAgICAgIGxldCBpbmRleCA9IHRva2VuLnZhbHVlLmluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgdG9rZW4udmFsdWUgPSBicmVha0luc2lkZVRva2VuKHRva2VucywgaSwgaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgLyogaWYgdGhlcmUgYXJlIHNwYWNlcyBhdCB0aGUgZW5kLCB3ZSBtdXN0IHJlbW92ZSB0aGVtICh3ZSBkbyBub3Qgd2FudCB0aGUgbGluZSB0b28gbG9uZykgKi9cbiAgICAgICAgICAgIGxldCBhcnIgPSB0b2tlbi52YWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgIHdoaWxlIChhcnIubGVuZ3RoICYmIGFyclthcnIubGVuZ3RoIC0gMV0gPT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICBhcnIucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbi52YWx1ZSA9IGFyci5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8qIHRva2VuIGRlZ2VuZXJhdGVkPyAqL1xuICAgICAgICBpZiAoIXRva2VuLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdG9rZW5zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5lTGVuZ3RoICsgdG9rZW4udmFsdWUubGVuZ3RoID4gbWF4V2lkdGgpIHsgLyogbGluZSB0b28gbG9uZywgZmluZCBhIHN1aXRhYmxlIGJyZWFraW5nIHNwb3QgKi9cbiAgICAgICAgICAgIC8qIGlzIGl0IHBvc3NpYmxlIHRvIGJyZWFrIHdpdGhpbiB0aGlzIHRva2VuPyAqL1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0SW5kZXggPSB0b2tlbi52YWx1ZS5pbmRleE9mKFwiIFwiLCBpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsaW5lTGVuZ3RoICsgbmV4dEluZGV4ID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZGV4ICE9IC0xKSB7IC8qIGJyZWFrIGF0IHNwYWNlIHdpdGhpbiB0aGlzIG9uZSAqL1xuICAgICAgICAgICAgICAgIHRva2VuLnZhbHVlID0gYnJlYWtJbnNpZGVUb2tlbih0b2tlbnMsIGksIGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxhc3RUb2tlbldpdGhTcGFjZSAhPSAtMSkgeyAvKiBpcyB0aGVyZSBhIHByZXZpb3VzIHRva2VuIHdoZXJlIGEgYnJlYWsgY2FuIG9jY3VyPyAqL1xuICAgICAgICAgICAgICAgIGxldCB0b2tlbiA9IHRva2Vuc1tsYXN0VG9rZW5XaXRoU3BhY2VdO1xuICAgICAgICAgICAgICAgIGxldCBicmVha0luZGV4ID0gdG9rZW4udmFsdWUubGFzdEluZGV4T2YoXCIgXCIpO1xuICAgICAgICAgICAgICAgIHRva2VuLnZhbHVlID0gYnJlYWtJbnNpZGVUb2tlbih0b2tlbnMsIGxhc3RUb2tlbldpdGhTcGFjZSwgYnJlYWtJbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaSA9IGxhc3RUb2tlbldpdGhTcGFjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvKiBmb3JjZSBicmVhayBpbiB0aGlzIHRva2VuICovXG4gICAgICAgICAgICAgICAgdG9rZW4udmFsdWUgPSBicmVha0luc2lkZVRva2VuKHRva2VucywgaSwgbWF4V2lkdGggLSBsaW5lTGVuZ3RoLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8qIGxpbmUgbm90IGxvbmcsIGNvbnRpbnVlICovXG4gICAgICAgICAgICBsaW5lTGVuZ3RoICs9IHRva2VuLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZS5pbmRleE9mKFwiIFwiKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIGxhc3RUb2tlbldpdGhTcGFjZSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaSsrOyAvKiBhZHZhbmNlIHRvIG5leHQgdG9rZW4gKi9cbiAgICB9XG4gICAgdG9rZW5zLnB1c2goeyB0eXBlOiBUWVBFX05FV0xJTkUgfSk7IC8qIGluc2VydCBmYWtlIG5ld2xpbmUgdG8gZml4IHRoZSBsYXN0IHRleHQgbGluZSAqL1xuICAgIC8qIHJlbW92ZSB0cmFpbGluZyBzcGFjZSBmcm9tIHRleHQgdG9rZW5zIGJlZm9yZSBuZXdsaW5lcyAqL1xuICAgIGxldCBsYXN0VGV4dFRva2VuID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUWVBFX1RFWFQ6XG4gICAgICAgICAgICAgICAgbGFzdFRleHRUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUWVBFX05FV0xJTkU6XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RUZXh0VG9rZW4pIHsgLyogcmVtb3ZlIHRyYWlsaW5nIHNwYWNlICovXG4gICAgICAgICAgICAgICAgICAgIGxldCBhcnIgPSBsYXN0VGV4dFRva2VuLnZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYXJyLmxlbmd0aCAmJiBhcnJbYXJyLmxlbmd0aCAtIDFdID09IFwiIFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnIucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdFRleHRUb2tlbi52YWx1ZSA9IGFyci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0VGV4dFRva2VuID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2tlbnMucG9wKCk7IC8qIHJlbW92ZSBmYWtlIHRva2VuICovXG4gICAgcmV0dXJuIHRva2Vucztcbn1cbi8qKlxuICogQ3JlYXRlIG5ldyB0b2tlbnMgYW5kIGluc2VydCB0aGVtIGludG8gdGhlIHN0cmVhbVxuICogQHBhcmFtIHtvYmplY3RbXX0gdG9rZW5zXG4gKiBAcGFyYW0ge2ludH0gdG9rZW5JbmRleCBUb2tlbiBiZWluZyBwcm9jZXNzZWRcbiAqIEBwYXJhbSB7aW50fSBicmVha0luZGV4IEluZGV4IHdpdGhpbiBjdXJyZW50IHRva2VuJ3MgdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbH0gcmVtb3ZlQnJlYWtDaGFyIERvIHdlIHdhbnQgdG8gcmVtb3ZlIHRoZSBicmVha2luZyBjaGFyYWN0ZXI/XG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZW1haW5pbmcgdW5icm9rZW4gdG9rZW4gdmFsdWVcbiAqL1xuZnVuY3Rpb24gYnJlYWtJbnNpZGVUb2tlbih0b2tlbnMsIHRva2VuSW5kZXgsIGJyZWFrSW5kZXgsIHJlbW92ZUJyZWFrQ2hhcikge1xuICAgIGxldCBuZXdCcmVha1Rva2VuID0ge1xuICAgICAgICB0eXBlOiBUWVBFX05FV0xJTkVcbiAgICB9O1xuICAgIGxldCBuZXdUZXh0VG9rZW4gPSB7XG4gICAgICAgIHR5cGU6IFRZUEVfVEVYVCxcbiAgICAgICAgdmFsdWU6IHRva2Vuc1t0b2tlbkluZGV4XS52YWx1ZS5zdWJzdHJpbmcoYnJlYWtJbmRleCArIChyZW1vdmVCcmVha0NoYXIgPyAxIDogMCkpXG4gICAgfTtcbiAgICB0b2tlbnMuc3BsaWNlKHRva2VuSW5kZXggKyAxLCAwLCBuZXdCcmVha1Rva2VuLCBuZXdUZXh0VG9rZW4pO1xuICAgIHJldHVybiB0b2tlbnNbdG9rZW5JbmRleF0udmFsdWUuc3Vic3RyaW5nKDAsIGJyZWFrSW5kZXgpO1xufVxuIiwiLyoqIERlZmF1bHQgd2l0aCBmb3IgZGlzcGxheSBhbmQgbWFwIGdlbmVyYXRvcnMgKi9cbmV4cG9ydCBsZXQgREVGQVVMVF9XSURUSCA9IDgwO1xuLyoqIERlZmF1bHQgaGVpZ2h0IGZvciBkaXNwbGF5IGFuZCBtYXAgZ2VuZXJhdG9ycyAqL1xuZXhwb3J0IGxldCBERUZBVUxUX0hFSUdIVCA9IDI1O1xuZXhwb3J0IGNvbnN0IERJUlMgPSB7XG4gICAgNDogW1swLCAtMV0sIFsxLCAwXSwgWzAsIDFdLCBbLTEsIDBdXSxcbiAgICA4OiBbWzAsIC0xXSwgWzEsIC0xXSwgWzEsIDBdLCBbMSwgMV0sIFswLCAxXSwgWy0xLCAxXSwgWy0xLCAwXSwgWy0xLCAtMV1dLFxuICAgIDY6IFtbLTEsIC0xXSwgWzEsIC0xXSwgWzIsIDBdLCBbMSwgMV0sIFstMSwgMV0sIFstMiwgMF1dXG59O1xuZXhwb3J0IGNvbnN0IEtFWVMgPSB7XG4gICAgLyoqIENhbmNlbCBrZXkuICovXG4gICAgVktfQ0FOQ0VMOiAzLFxuICAgIC8qKiBIZWxwIGtleS4gKi9cbiAgICBWS19IRUxQOiA2LFxuICAgIC8qKiBCYWNrc3BhY2Uga2V5LiAqL1xuICAgIFZLX0JBQ0tfU1BBQ0U6IDgsXG4gICAgLyoqIFRhYiBrZXkuICovXG4gICAgVktfVEFCOiA5LFxuICAgIC8qKiA1IGtleSBvbiBOdW1wYWQgd2hlbiBOdW1Mb2NrIGlzIHVubG9ja2VkLiBPciBvbiBNYWMsIGNsZWFyIGtleSB3aGljaCBpcyBwb3NpdGlvbmVkIGF0IE51bUxvY2sga2V5LiAqL1xuICAgIFZLX0NMRUFSOiAxMixcbiAgICAvKiogUmV0dXJuL2VudGVyIGtleSBvbiB0aGUgbWFpbiBrZXlib2FyZC4gKi9cbiAgICBWS19SRVRVUk46IDEzLFxuICAgIC8qKiBSZXNlcnZlZCwgYnV0IG5vdCB1c2VkLiAqL1xuICAgIFZLX0VOVEVSOiAxNCxcbiAgICAvKiogU2hpZnQga2V5LiAqL1xuICAgIFZLX1NISUZUOiAxNixcbiAgICAvKiogQ29udHJvbCBrZXkuICovXG4gICAgVktfQ09OVFJPTDogMTcsXG4gICAgLyoqIEFsdCAoT3B0aW9uIG9uIE1hYykga2V5LiAqL1xuICAgIFZLX0FMVDogMTgsXG4gICAgLyoqIFBhdXNlIGtleS4gKi9cbiAgICBWS19QQVVTRTogMTksXG4gICAgLyoqIENhcHMgbG9jay4gKi9cbiAgICBWS19DQVBTX0xPQ0s6IDIwLFxuICAgIC8qKiBFc2NhcGUga2V5LiAqL1xuICAgIFZLX0VTQ0FQRTogMjcsXG4gICAgLyoqIFNwYWNlIGJhci4gKi9cbiAgICBWS19TUEFDRTogMzIsXG4gICAgLyoqIFBhZ2UgVXAga2V5LiAqL1xuICAgIFZLX1BBR0VfVVA6IDMzLFxuICAgIC8qKiBQYWdlIERvd24ga2V5LiAqL1xuICAgIFZLX1BBR0VfRE9XTjogMzQsXG4gICAgLyoqIEVuZCBrZXkuICovXG4gICAgVktfRU5EOiAzNSxcbiAgICAvKiogSG9tZSBrZXkuICovXG4gICAgVktfSE9NRTogMzYsXG4gICAgLyoqIExlZnQgYXJyb3cuICovXG4gICAgVktfTEVGVDogMzcsXG4gICAgLyoqIFVwIGFycm93LiAqL1xuICAgIFZLX1VQOiAzOCxcbiAgICAvKiogUmlnaHQgYXJyb3cuICovXG4gICAgVktfUklHSFQ6IDM5LFxuICAgIC8qKiBEb3duIGFycm93LiAqL1xuICAgIFZLX0RPV046IDQwLFxuICAgIC8qKiBQcmludCBTY3JlZW4ga2V5LiAqL1xuICAgIFZLX1BSSU5UU0NSRUVOOiA0NCxcbiAgICAvKiogSW5zKGVydCkga2V5LiAqL1xuICAgIFZLX0lOU0VSVDogNDUsXG4gICAgLyoqIERlbChldGUpIGtleS4gKi9cbiAgICBWS19ERUxFVEU6IDQ2LFxuICAgIC8qKiovXG4gICAgVktfMDogNDgsXG4gICAgLyoqKi9cbiAgICBWS18xOiA0OSxcbiAgICAvKioqL1xuICAgIFZLXzI6IDUwLFxuICAgIC8qKiovXG4gICAgVktfMzogNTEsXG4gICAgLyoqKi9cbiAgICBWS180OiA1MixcbiAgICAvKioqL1xuICAgIFZLXzU6IDUzLFxuICAgIC8qKiovXG4gICAgVktfNjogNTQsXG4gICAgLyoqKi9cbiAgICBWS183OiA1NSxcbiAgICAvKioqL1xuICAgIFZLXzg6IDU2LFxuICAgIC8qKiovXG4gICAgVktfOTogNTcsXG4gICAgLyoqIENvbG9uICg6KSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19DT0xPTjogNTgsXG4gICAgLyoqIFNlbWljb2xvbiAoOykga2V5LiAqL1xuICAgIFZLX1NFTUlDT0xPTjogNTksXG4gICAgLyoqIExlc3MtdGhhbiAoPCkga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfTEVTU19USEFOOiA2MCxcbiAgICAvKiogRXF1YWxzICg9KSBrZXkuICovXG4gICAgVktfRVFVQUxTOiA2MSxcbiAgICAvKiogR3JlYXRlci10aGFuICg+KSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19HUkVBVEVSX1RIQU46IDYyLFxuICAgIC8qKiBRdWVzdGlvbiBtYXJrICg/KSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19RVUVTVElPTl9NQVJLOiA2MyxcbiAgICAvKiogQXRtYXJrIChAKSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19BVDogNjQsXG4gICAgLyoqKi9cbiAgICBWS19BOiA2NSxcbiAgICAvKioqL1xuICAgIFZLX0I6IDY2LFxuICAgIC8qKiovXG4gICAgVktfQzogNjcsXG4gICAgLyoqKi9cbiAgICBWS19EOiA2OCxcbiAgICAvKioqL1xuICAgIFZLX0U6IDY5LFxuICAgIC8qKiovXG4gICAgVktfRjogNzAsXG4gICAgLyoqKi9cbiAgICBWS19HOiA3MSxcbiAgICAvKioqL1xuICAgIFZLX0g6IDcyLFxuICAgIC8qKiovXG4gICAgVktfSTogNzMsXG4gICAgLyoqKi9cbiAgICBWS19KOiA3NCxcbiAgICAvKioqL1xuICAgIFZLX0s6IDc1LFxuICAgIC8qKiovXG4gICAgVktfTDogNzYsXG4gICAgLyoqKi9cbiAgICBWS19NOiA3NyxcbiAgICAvKioqL1xuICAgIFZLX046IDc4LFxuICAgIC8qKiovXG4gICAgVktfTzogNzksXG4gICAgLyoqKi9cbiAgICBWS19QOiA4MCxcbiAgICAvKioqL1xuICAgIFZLX1E6IDgxLFxuICAgIC8qKiovXG4gICAgVktfUjogODIsXG4gICAgLyoqKi9cbiAgICBWS19TOiA4MyxcbiAgICAvKioqL1xuICAgIFZLX1Q6IDg0LFxuICAgIC8qKiovXG4gICAgVktfVTogODUsXG4gICAgLyoqKi9cbiAgICBWS19WOiA4NixcbiAgICAvKioqL1xuICAgIFZLX1c6IDg3LFxuICAgIC8qKiovXG4gICAgVktfWDogODgsXG4gICAgLyoqKi9cbiAgICBWS19ZOiA4OSxcbiAgICAvKioqL1xuICAgIFZLX1o6IDkwLFxuICAgIC8qKiovXG4gICAgVktfQ09OVEVYVF9NRU5VOiA5MyxcbiAgICAvKiogMCBvbiB0aGUgbnVtZXJpYyBrZXlwYWQuICovXG4gICAgVktfTlVNUEFEMDogOTYsXG4gICAgLyoqIDEgb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX05VTVBBRDE6IDk3LFxuICAgIC8qKiAyIG9uIHRoZSBudW1lcmljIGtleXBhZC4gKi9cbiAgICBWS19OVU1QQUQyOiA5OCxcbiAgICAvKiogMyBvbiB0aGUgbnVtZXJpYyBrZXlwYWQuICovXG4gICAgVktfTlVNUEFEMzogOTksXG4gICAgLyoqIDQgb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX05VTVBBRDQ6IDEwMCxcbiAgICAvKiogNSBvbiB0aGUgbnVtZXJpYyBrZXlwYWQuICovXG4gICAgVktfTlVNUEFENTogMTAxLFxuICAgIC8qKiA2IG9uIHRoZSBudW1lcmljIGtleXBhZC4gKi9cbiAgICBWS19OVU1QQUQ2OiAxMDIsXG4gICAgLyoqIDcgb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX05VTVBBRDc6IDEwMyxcbiAgICAvKiogOCBvbiB0aGUgbnVtZXJpYyBrZXlwYWQuICovXG4gICAgVktfTlVNUEFEODogMTA0LFxuICAgIC8qKiA5IG9uIHRoZSBudW1lcmljIGtleXBhZC4gKi9cbiAgICBWS19OVU1QQUQ5OiAxMDUsXG4gICAgLyoqICogb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX01VTFRJUExZOiAxMDYsXG4gICAgLyoqICsgb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX0FERDogMTA3LFxuICAgIC8qKiovXG4gICAgVktfU0VQQVJBVE9SOiAxMDgsXG4gICAgLyoqIC0gb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX1NVQlRSQUNUOiAxMDksXG4gICAgLyoqIERlY2ltYWwgcG9pbnQgb24gdGhlIG51bWVyaWMga2V5cGFkLiAqL1xuICAgIFZLX0RFQ0lNQUw6IDExMCxcbiAgICAvKiogLyBvbiB0aGUgbnVtZXJpYyBrZXlwYWQuICovXG4gICAgVktfRElWSURFOiAxMTEsXG4gICAgLyoqIEYxIGtleS4gKi9cbiAgICBWS19GMTogMTEyLFxuICAgIC8qKiBGMiBrZXkuICovXG4gICAgVktfRjI6IDExMyxcbiAgICAvKiogRjMga2V5LiAqL1xuICAgIFZLX0YzOiAxMTQsXG4gICAgLyoqIEY0IGtleS4gKi9cbiAgICBWS19GNDogMTE1LFxuICAgIC8qKiBGNSBrZXkuICovXG4gICAgVktfRjU6IDExNixcbiAgICAvKiogRjYga2V5LiAqL1xuICAgIFZLX0Y2OiAxMTcsXG4gICAgLyoqIEY3IGtleS4gKi9cbiAgICBWS19GNzogMTE4LFxuICAgIC8qKiBGOCBrZXkuICovXG4gICAgVktfRjg6IDExOSxcbiAgICAvKiogRjkga2V5LiAqL1xuICAgIFZLX0Y5OiAxMjAsXG4gICAgLyoqIEYxMCBrZXkuICovXG4gICAgVktfRjEwOiAxMjEsXG4gICAgLyoqIEYxMSBrZXkuICovXG4gICAgVktfRjExOiAxMjIsXG4gICAgLyoqIEYxMiBrZXkuICovXG4gICAgVktfRjEyOiAxMjMsXG4gICAgLyoqIEYxMyBrZXkuICovXG4gICAgVktfRjEzOiAxMjQsXG4gICAgLyoqIEYxNCBrZXkuICovXG4gICAgVktfRjE0OiAxMjUsXG4gICAgLyoqIEYxNSBrZXkuICovXG4gICAgVktfRjE1OiAxMjYsXG4gICAgLyoqIEYxNiBrZXkuICovXG4gICAgVktfRjE2OiAxMjcsXG4gICAgLyoqIEYxNyBrZXkuICovXG4gICAgVktfRjE3OiAxMjgsXG4gICAgLyoqIEYxOCBrZXkuICovXG4gICAgVktfRjE4OiAxMjksXG4gICAgLyoqIEYxOSBrZXkuICovXG4gICAgVktfRjE5OiAxMzAsXG4gICAgLyoqIEYyMCBrZXkuICovXG4gICAgVktfRjIwOiAxMzEsXG4gICAgLyoqIEYyMSBrZXkuICovXG4gICAgVktfRjIxOiAxMzIsXG4gICAgLyoqIEYyMiBrZXkuICovXG4gICAgVktfRjIyOiAxMzMsXG4gICAgLyoqIEYyMyBrZXkuICovXG4gICAgVktfRjIzOiAxMzQsXG4gICAgLyoqIEYyNCBrZXkuICovXG4gICAgVktfRjI0OiAxMzUsXG4gICAgLyoqIE51bSBMb2NrIGtleS4gKi9cbiAgICBWS19OVU1fTE9DSzogMTQ0LFxuICAgIC8qKiBTY3JvbGwgTG9jayBrZXkuICovXG4gICAgVktfU0NST0xMX0xPQ0s6IDE0NSxcbiAgICAvKiogQ2lyY3VtZmxleCAoXikga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfQ0lSQ1VNRkxFWDogMTYwLFxuICAgIC8qKiBFeGNsYW1hdGlvbiAoISkga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfRVhDTEFNQVRJT046IDE2MSxcbiAgICAvKiogRG91YmxlIHF1b3RlICgpIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX0RPVUJMRV9RVU9URTogMTYyLFxuICAgIC8qKiBIYXNoICgjKSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19IQVNIOiAxNjMsXG4gICAgLyoqIERvbGxhciBzaWduICgkKSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19ET0xMQVI6IDE2NCxcbiAgICAvKiogUGVyY2VudCAoJSkga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfUEVSQ0VOVDogMTY1LFxuICAgIC8qKiBBbXBlcnNhbmQgKCYpIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX0FNUEVSU0FORDogMTY2LFxuICAgIC8qKiBVbmRlcnNjb3JlIChfKSBrZXkuIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19VTkRFUlNDT1JFOiAxNjcsXG4gICAgLyoqIE9wZW4gcGFyZW50aGVzaXMgKCgpIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX09QRU5fUEFSRU46IDE2OCxcbiAgICAvKiogQ2xvc2UgcGFyZW50aGVzaXMgKCkpIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX0NMT1NFX1BBUkVOOiAxNjksXG4gICAgLyogQXN0ZXJpc2sgKCopIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX0FTVEVSSVNLOiAxNzAsXG4gICAgLyoqIFBsdXMgKCspIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX1BMVVM6IDE3MSxcbiAgICAvKiogUGlwZSAofCkga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfUElQRTogMTcyLFxuICAgIC8qKiBIeXBoZW4tVVMvZG9jcy9NaW51cyAoLSkga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfSFlQSEVOX01JTlVTOiAxNzMsXG4gICAgLyoqIE9wZW4gY3VybHkgYnJhY2tldCAoeykga2V5LiBSZXF1aXJlcyBHZWNrbyAxNS4wICovXG4gICAgVktfT1BFTl9DVVJMWV9CUkFDS0VUOiAxNzQsXG4gICAgLyoqIENsb3NlIGN1cmx5IGJyYWNrZXQgKH0pIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX0NMT1NFX0NVUkxZX0JSQUNLRVQ6IDE3NSxcbiAgICAvKiogVGlsZGUgKH4pIGtleS4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX1RJTERFOiAxNzYsXG4gICAgLyoqIENvbW1hICgsKSBrZXkuICovXG4gICAgVktfQ09NTUE6IDE4OCxcbiAgICAvKiogUGVyaW9kICguKSBrZXkuICovXG4gICAgVktfUEVSSU9EOiAxOTAsXG4gICAgLyoqIFNsYXNoICgvKSBrZXkuICovXG4gICAgVktfU0xBU0g6IDE5MSxcbiAgICAvKiogQmFjayB0aWNrIChgKSBrZXkuICovXG4gICAgVktfQkFDS19RVU9URTogMTkyLFxuICAgIC8qKiBPcGVuIHNxdWFyZSBicmFja2V0IChbKSBrZXkuICovXG4gICAgVktfT1BFTl9CUkFDS0VUOiAyMTksXG4gICAgLyoqIEJhY2sgc2xhc2ggKFxcKSBrZXkuICovXG4gICAgVktfQkFDS19TTEFTSDogMjIwLFxuICAgIC8qKiBDbG9zZSBzcXVhcmUgYnJhY2tldCAoXSkga2V5LiAqL1xuICAgIFZLX0NMT1NFX0JSQUNLRVQ6IDIyMSxcbiAgICAvKiogUXVvdGUgKCcnJykga2V5LiAqL1xuICAgIFZLX1FVT1RFOiAyMjIsXG4gICAgLyoqIE1ldGEga2V5IG9uIExpbnV4LCBDb21tYW5kIGtleSBvbiBNYWMuICovXG4gICAgVktfTUVUQTogMjI0LFxuICAgIC8qKiBBbHRHciBrZXkgb24gTGludXguIFJlcXVpcmVzIEdlY2tvIDE1LjAgKi9cbiAgICBWS19BTFRHUjogMjI1LFxuICAgIC8qKiBXaW5kb3dzIGxvZ28ga2V5IG9uIFdpbmRvd3MuIE9yIFN1cGVyIG9yIEh5cGVyIGtleSBvbiBMaW51eC4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX1dJTjogOTEsXG4gICAgLyoqIExpbnV4IHN1cHBvcnQgZm9yIHRoaXMga2V5Y29kZSB3YXMgYWRkZWQgaW4gR2Vja28gNC4wLiAqL1xuICAgIFZLX0tBTkE6IDIxLFxuICAgIC8qKiBMaW51eCBzdXBwb3J0IGZvciB0aGlzIGtleWNvZGUgd2FzIGFkZGVkIGluIEdlY2tvIDQuMC4gKi9cbiAgICBWS19IQU5HVUw6IDIxLFxuICAgIC8qKiDoi7HmlbAga2V5IG9uIEphcGFuZXNlIE1hYyBrZXlib2FyZC4gUmVxdWlyZXMgR2Vja28gMTUuMCAqL1xuICAgIFZLX0VJU1U6IDIyLFxuICAgIC8qKiBMaW51eCBzdXBwb3J0IGZvciB0aGlzIGtleWNvZGUgd2FzIGFkZGVkIGluIEdlY2tvIDQuMC4gKi9cbiAgICBWS19KVU5KQTogMjMsXG4gICAgLyoqIExpbnV4IHN1cHBvcnQgZm9yIHRoaXMga2V5Y29kZSB3YXMgYWRkZWQgaW4gR2Vja28gNC4wLiAqL1xuICAgIFZLX0ZJTkFMOiAyNCxcbiAgICAvKiogTGludXggc3VwcG9ydCBmb3IgdGhpcyBrZXljb2RlIHdhcyBhZGRlZCBpbiBHZWNrbyA0LjAuICovXG4gICAgVktfSEFOSkE6IDI1LFxuICAgIC8qKiBMaW51eCBzdXBwb3J0IGZvciB0aGlzIGtleWNvZGUgd2FzIGFkZGVkIGluIEdlY2tvIDQuMC4gKi9cbiAgICBWS19LQU5KSTogMjUsXG4gICAgLyoqIExpbnV4IHN1cHBvcnQgZm9yIHRoaXMga2V5Y29kZSB3YXMgYWRkZWQgaW4gR2Vja28gNC4wLiAqL1xuICAgIFZLX0NPTlZFUlQ6IDI4LFxuICAgIC8qKiBMaW51eCBzdXBwb3J0IGZvciB0aGlzIGtleWNvZGUgd2FzIGFkZGVkIGluIEdlY2tvIDQuMC4gKi9cbiAgICBWS19OT05DT05WRVJUOiAyOSxcbiAgICAvKiogTGludXggc3VwcG9ydCBmb3IgdGhpcyBrZXljb2RlIHdhcyBhZGRlZCBpbiBHZWNrbyA0LjAuICovXG4gICAgVktfQUNDRVBUOiAzMCxcbiAgICAvKiogTGludXggc3VwcG9ydCBmb3IgdGhpcyBrZXljb2RlIHdhcyBhZGRlZCBpbiBHZWNrbyA0LjAuICovXG4gICAgVktfTU9ERUNIQU5HRTogMzEsXG4gICAgLyoqIExpbnV4IHN1cHBvcnQgZm9yIHRoaXMga2V5Y29kZSB3YXMgYWRkZWQgaW4gR2Vja28gNC4wLiAqL1xuICAgIFZLX1NFTEVDVDogNDEsXG4gICAgLyoqIExpbnV4IHN1cHBvcnQgZm9yIHRoaXMga2V5Y29kZSB3YXMgYWRkZWQgaW4gR2Vja28gNC4wLiAqL1xuICAgIFZLX1BSSU5UOiA0MixcbiAgICAvKiogTGludXggc3VwcG9ydCBmb3IgdGhpcyBrZXljb2RlIHdhcyBhZGRlZCBpbiBHZWNrbyA0LjAuICovXG4gICAgVktfRVhFQ1VURTogNDMsXG4gICAgLyoqIExpbnV4IHN1cHBvcnQgZm9yIHRoaXMga2V5Y29kZSB3YXMgYWRkZWQgaW4gR2Vja28gNC4wLlx0ICovXG4gICAgVktfU0xFRVA6IDk1XG59O1xuIiwiaW1wb3J0IEhleCBmcm9tIFwiLi9oZXguanNcIjtcbmltcG9ydCBSZWN0IGZyb20gXCIuL3JlY3QuanNcIjtcbmltcG9ydCBUaWxlIGZyb20gXCIuL3RpbGUuanNcIjtcbmltcG9ydCBUaWxlR0wgZnJvbSBcIi4vdGlsZS1nbC5qc1wiO1xuaW1wb3J0IFRlcm0gZnJvbSBcIi4vdGVybS5qc1wiO1xuaW1wb3J0ICogYXMgVGV4dCBmcm9tIFwiLi4vdGV4dC5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9XSURUSCwgREVGQVVMVF9IRUlHSFQgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5jb25zdCBCQUNLRU5EUyA9IHtcbiAgICBcImhleFwiOiBIZXgsXG4gICAgXCJyZWN0XCI6IFJlY3QsXG4gICAgXCJ0aWxlXCI6IFRpbGUsXG4gICAgXCJ0aWxlLWdsXCI6IFRpbGVHTCxcbiAgICBcInRlcm1cIjogVGVybVxufTtcbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICB3aWR0aDogREVGQVVMVF9XSURUSCxcbiAgICBoZWlnaHQ6IERFRkFVTFRfSEVJR0hULFxuICAgIHRyYW5zcG9zZTogZmFsc2UsXG4gICAgbGF5b3V0OiBcInJlY3RcIixcbiAgICBmb250U2l6ZTogMTUsXG4gICAgc3BhY2luZzogMSxcbiAgICBib3JkZXI6IDAsXG4gICAgZm9yY2VTcXVhcmVSYXRpbzogZmFsc2UsXG4gICAgZm9udEZhbWlseTogXCJtb25vc3BhY2VcIixcbiAgICBmb250U3R5bGU6IFwiXCIsXG4gICAgZmc6IFwiI2NjY1wiLFxuICAgIGJnOiBcIiMwMDBcIixcbiAgICB0aWxlV2lkdGg6IDMyLFxuICAgIHRpbGVIZWlnaHQ6IDMyLFxuICAgIHRpbGVNYXA6IHt9LFxuICAgIHRpbGVTZXQ6IG51bGwsXG4gICAgdGlsZUNvbG9yaXplOiBmYWxzZVxufTtcbi8qKlxuICogQGNsYXNzIFZpc3VhbCBtYXAgZGlzcGxheVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNwbGF5IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlOyAvLyBmYWxzZSA9IG5vdGhpbmcsIHRydWUgPSBhbGwsIG9iamVjdCA9IGRpcnR5IGNlbGxzXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7fTtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy5ERUJVRyA9IHRoaXMuREVCVUcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fdGljayA9IHRoaXMuX3RpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYmFja2VuZC5zY2hlZHVsZSh0aGlzLl90aWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVidWcgaGVscGVyLCBpZGVhbCBhcyBhIG1hcCBnZW5lcmF0b3IgY2FsbGJhY2suIEFsd2F5cyBib3VuZCB0byB0aGlzLlxuICAgICAqIEBwYXJhbSB7aW50fSB4XG4gICAgICogQHBhcmFtIHtpbnR9IHlcbiAgICAgKiBAcGFyYW0ge2ludH0gd2hhdFxuICAgICAqL1xuICAgIERFQlVHKHgsIHksIHdoYXQpIHtcbiAgICAgICAgbGV0IGNvbG9ycyA9IFt0aGlzLl9vcHRpb25zLmJnLCB0aGlzLl9vcHRpb25zLmZnXTtcbiAgICAgICAgdGhpcy5kcmF3KHgsIHksIG51bGwsIG51bGwsIGNvbG9yc1t3aGF0ICUgY29sb3JzLmxlbmd0aF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgd2hvbGUgZGlzcGxheSAoY292ZXIgaXQgd2l0aCBiYWNrZ3JvdW5kIGNvbG9yKVxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9kYXRhID0ge307XG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHNlZSBST1QuRGlzcGxheVxuICAgICAqL1xuICAgIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy53aWR0aCB8fCBvcHRpb25zLmhlaWdodCB8fCBvcHRpb25zLmZvbnRTaXplIHx8IG9wdGlvbnMuZm9udEZhbWlseSB8fCBvcHRpb25zLnNwYWNpbmcgfHwgb3B0aW9ucy5sYXlvdXQpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxheW91dCkge1xuICAgICAgICAgICAgICAgIGxldCBjdG9yID0gQkFDS0VORFNbb3B0aW9ucy5sYXlvdXRdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tlbmQgPSBuZXcgY3RvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYmFja2VuZC5zZXRPcHRpb25zKHRoaXMuX29wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnRseSBzZXQgb3B0aW9uc1xuICAgICAqL1xuICAgIGdldE9wdGlvbnMoKSB7IHJldHVybiB0aGlzLl9vcHRpb25zOyB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgRE9NIG5vZGUgb2YgdGhpcyBkaXNwbGF5XG4gICAgICovXG4gICAgZ2V0Q29udGFpbmVyKCkgeyByZXR1cm4gdGhpcy5fYmFja2VuZC5nZXRDb250YWluZXIoKTsgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIG1heGltdW0gd2lkdGgvaGVpZ2h0IHRvIGZpdCBpbnRvIGEgc2V0IG9mIGdpdmVuIGNvbnN0cmFpbnRzXG4gICAgICogQHBhcmFtIHtpbnR9IGF2YWlsV2lkdGggTWF4aW11bSBhbGxvd2VkIHBpeGVsIHdpZHRoXG4gICAgICogQHBhcmFtIHtpbnR9IGF2YWlsSGVpZ2h0IE1heGltdW0gYWxsb3dlZCBwaXhlbCBoZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7aW50WzJdfSBjZWxsV2lkdGgsY2VsbEhlaWdodFxuICAgICAqL1xuICAgIGNvbXB1dGVTaXplKGF2YWlsV2lkdGgsIGF2YWlsSGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZW5kLmNvbXB1dGVTaXplKGF2YWlsV2lkdGgsIGF2YWlsSGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgbWF4aW11bSBmb250IHNpemUgdG8gZml0IGludG8gYSBzZXQgb2YgZ2l2ZW4gY29uc3RyYWludHNcbiAgICAgKiBAcGFyYW0ge2ludH0gYXZhaWxXaWR0aCBNYXhpbXVtIGFsbG93ZWQgcGl4ZWwgd2lkdGhcbiAgICAgKiBAcGFyYW0ge2ludH0gYXZhaWxIZWlnaHQgTWF4aW11bSBhbGxvd2VkIHBpeGVsIGhlaWdodFxuICAgICAqIEByZXR1cm5zIHtpbnR9IGZvbnRTaXplXG4gICAgICovXG4gICAgY29tcHV0ZUZvbnRTaXplKGF2YWlsV2lkdGgsIGF2YWlsSGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZW5kLmNvbXB1dGVGb250U2l6ZShhdmFpbFdpZHRoLCBhdmFpbEhlaWdodCk7XG4gICAgfVxuICAgIGNvbXB1dGVUaWxlU2l6ZShhdmFpbFdpZHRoLCBhdmFpbEhlaWdodCkge1xuICAgICAgICBsZXQgd2lkdGggPSBNYXRoLmZsb29yKGF2YWlsV2lkdGggLyB0aGlzLl9vcHRpb25zLndpZHRoKTtcbiAgICAgICAgbGV0IGhlaWdodCA9IE1hdGguZmxvb3IoYXZhaWxIZWlnaHQgLyB0aGlzLl9vcHRpb25zLmhlaWdodCk7XG4gICAgICAgIHJldHVybiBbd2lkdGgsIGhlaWdodF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBET00gZXZlbnQgKG1vdXNlIG9yIHRvdWNoKSB0byBtYXAgY29vcmRpbmF0ZXMuIFVzZXMgZmlyc3QgdG91Y2ggZm9yIG11bHRpLXRvdWNoLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7aW50WzJdfSAtMSBmb3IgdmFsdWVzIG91dHNpZGUgb2YgdGhlIGNhbnZhc1xuICAgICAqL1xuICAgIGV2ZW50VG9Qb3NpdGlvbihlKSB7XG4gICAgICAgIGxldCB4LCB5O1xuICAgICAgICBpZiAoXCJ0b3VjaGVzXCIgaW4gZSkge1xuICAgICAgICAgICAgeCA9IGUudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgeSA9IGUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgIHkgPSBlLmNsaWVudFk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tlbmQuZXZlbnRUb1Bvc2l0aW9uKHgsIHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ludH0geFxuICAgICAqIEBwYXJhbSB7aW50fSB5XG4gICAgICogQHBhcmFtIHtzdHJpbmcgfHwgc3RyaW5nW119IGNoIE9uZSBvciBtb3JlIGNoYXJzICh3aWxsIGJlIG92ZXJsYXBwaW5nIHRoZW1zZWx2ZXMpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtmZ10gZm9yZWdyb3VuZCBjb2xvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYmddIGJhY2tncm91bmQgY29sb3JcbiAgICAgKi9cbiAgICBkcmF3KHgsIHksIGNoLCBmZywgYmcpIHtcbiAgICAgICAgaWYgKCFmZykge1xuICAgICAgICAgICAgZmcgPSB0aGlzLl9vcHRpb25zLmZnO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYmcpIHtcbiAgICAgICAgICAgIGJnID0gdGhpcy5fb3B0aW9ucy5iZztcbiAgICAgICAgfVxuICAgICAgICBsZXQga2V5ID0gYCR7eH0sJHt5fWA7XG4gICAgICAgIHRoaXMuX2RhdGFba2V5XSA9IFt4LCB5LCBjaCwgZmcsIGJnXTtcbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gd2lsbCBhbHJlYWR5IHJlZHJhdyBldmVyeXRoaW5nIFxuICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IHt9O1xuICAgICAgICB9IC8vIGZpcnN0IVxuICAgICAgICB0aGlzLl9kaXJ0eVtrZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHJhd3MgYSB0ZXh0IGF0IGdpdmVuIHBvc2l0aW9uLiBPcHRpb25hbGx5IHdyYXBzIGF0IGEgbWF4aW11bSBsZW5ndGguIEN1cnJlbnRseSBkb2VzIG5vdCB3b3JrIHdpdGggaGV4IGxheW91dC5cbiAgICAgKiBAcGFyYW0ge2ludH0geFxuICAgICAqIEBwYXJhbSB7aW50fSB5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgTWF5IGNvbnRhaW4gY29sb3IvYmFja2dyb3VuZCBmb3JtYXQgc3BlY2lmaWVycywgJWN7bmFtZX0vJWJ7bmFtZX0sIGJvdGggb3B0aW9uYWwuICVje30vJWJ7fSByZXNldHMgdG8gZGVmYXVsdC5cbiAgICAgKiBAcGFyYW0ge2ludH0gW21heFdpZHRoXSB3cmFwIGF0IHdoYXQgd2lkdGg/XG4gICAgICogQHJldHVybnMge2ludH0gbGluZXMgZHJhd25cbiAgICAgKi9cbiAgICBkcmF3VGV4dCh4LCB5LCB0ZXh0LCBtYXhXaWR0aCkge1xuICAgICAgICBsZXQgZmcgPSBudWxsO1xuICAgICAgICBsZXQgYmcgPSBudWxsO1xuICAgICAgICBsZXQgY3ggPSB4O1xuICAgICAgICBsZXQgY3kgPSB5O1xuICAgICAgICBsZXQgbGluZXMgPSAxO1xuICAgICAgICBpZiAoIW1heFdpZHRoKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IHRoaXMuX29wdGlvbnMud2lkdGggLSB4O1xuICAgICAgICB9XG4gICAgICAgIGxldCB0b2tlbnMgPSBUZXh0LnRva2VuaXplKHRleHQsIG1heFdpZHRoKTtcbiAgICAgICAgd2hpbGUgKHRva2Vucy5sZW5ndGgpIHsgLy8gaW50ZXJwcmV0IHRva2VuaXplZCBvcGNvZGUgc3RyZWFtXG4gICAgICAgICAgICBsZXQgdG9rZW4gPSB0b2tlbnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVGV4dC5UWVBFX1RFWFQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1NwYWNlID0gZmFsc2UsIGlzUHJldlNwYWNlID0gZmFsc2UsIGlzRnVsbFdpZHRoID0gZmFsc2UsIGlzUHJldkZ1bGxXaWR0aCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2MgPSB0b2tlbi52YWx1ZS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSB0b2tlbi52YWx1ZS5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3NpZ24gdG8gYHRydWVgIHdoZW4gdGhlIGN1cnJlbnQgY2hhciBpcyBmdWxsLXdpZHRoLlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNGdWxsV2lkdGggPSAoY2MgPiAweGZmMDAgJiYgY2MgPCAweGZmNjEpIHx8IChjYyA+IDB4ZmZkYyAmJiBjYyA8IDB4ZmZlOCkgfHwgY2MgPiAweGZmZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDdXJyZW50IGNoYXIgaXMgc3BhY2UsIHdoYXRldmVyIGZ1bGwtd2lkdGggb3IgaGFsZi13aWR0aCBib3RoIGFyZSBPSy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3BhY2UgPSAoYy5jaGFyQ29kZUF0KDApID09IDB4MjAgfHwgYy5jaGFyQ29kZUF0KDApID09IDB4MzAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcHJldmlvdXMgY2hhciBpcyBmdWxsLXdpZHRoIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCBjaGFyIGlzIG5ldGhlciBoYWxmLXdpZHRoIG5vciBhIHNwYWNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUHJldkZ1bGxXaWR0aCAmJiAhaXNGdWxsV2lkdGggJiYgIWlzU3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjeCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyBhZGQgYW4gZXh0cmEgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IGNoYXIgaXMgZnVsbC13aWR0aCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwcmV2aW91cyBjaGFyIGlzIG5vdCBhIHNwYWNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnVsbFdpZHRoICYmICFpc1ByZXZTcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vIGFkZCBhbiBleHRyYSBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KGN4KyssIGN5LCBjLCBmZywgYmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmV2U3BhY2UgPSBpc1NwYWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmV2RnVsbFdpZHRoID0gaXNGdWxsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUZXh0LlRZUEVfRkc6XG4gICAgICAgICAgICAgICAgICAgIGZnID0gdG9rZW4udmFsdWUgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUZXh0LlRZUEVfQkc6XG4gICAgICAgICAgICAgICAgICAgIGJnID0gdG9rZW4udmFsdWUgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUZXh0LlRZUEVfTkVXTElORTpcbiAgICAgICAgICAgICAgICAgICAgY3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICBjeSsrO1xuICAgICAgICAgICAgICAgICAgICBsaW5lcysrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRpbWVyIHRpY2s6IHVwZGF0ZSBkaXJ0eSBwYXJ0c1xuICAgICAqL1xuICAgIF90aWNrKCkge1xuICAgICAgICB0aGlzLl9iYWNrZW5kLnNjaGVkdWxlKHRoaXMuX3RpY2spO1xuICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5ID09PSB0cnVlKSB7IC8vIGRyYXcgYWxsXG4gICAgICAgICAgICB0aGlzLl9iYWNrZW5kLmNsZWFyKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpZCBpbiB0aGlzLl9kYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhdyhpZCwgZmFsc2UpO1xuICAgICAgICAgICAgfSAvLyByZWRyYXcgY2FjaGVkIGRhdGEgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIGRyYXcgb25seSBkaXJ0eSBcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9kaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXcoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFdoYXQgdG8gZHJhd1xuICAgICAqIEBwYXJhbSB7Ym9vbH0gY2xlYXJCZWZvcmUgSXMgaXQgbmVjZXNzYXJ5IHRvIGNsZWFuIGJlZm9yZT9cbiAgICAgKi9cbiAgICBfZHJhdyhrZXksIGNsZWFyQmVmb3JlKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5fZGF0YVtrZXldO1xuICAgICAgICBpZiAoZGF0YVs0XSAhPSB0aGlzLl9vcHRpb25zLmJnKSB7XG4gICAgICAgICAgICBjbGVhckJlZm9yZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYmFja2VuZC5kcmF3KGRhdGEsIGNsZWFyQmVmb3JlKTtcbiAgICB9XG59XG5EaXNwbGF5LlJlY3QgPSBSZWN0O1xuRGlzcGxheS5IZXggPSBIZXg7XG5EaXNwbGF5LlRpbGUgPSBUaWxlO1xuRGlzcGxheS5UaWxlR0wgPSBUaWxlR0w7XG5EaXNwbGF5LlRlcm0gPSBUZXJtO1xuIiwiaW1wb3J0IFJORyBmcm9tIFwiLi9ybmcuanNcIjtcbi8qKlxuICogQGNsYXNzIChNYXJrb3YgcHJvY2VzcyktYmFzZWQgc3RyaW5nIGdlbmVyYXRvci5cbiAqIENvcGllZCBmcm9tIGEgPGEgaHJlZj1cImh0dHA6Ly93d3cucm9ndWViYXNpbi5yb2d1ZWxpa2VkZXZlbG9wbWVudC5vcmcvaW5kZXgucGhwP3RpdGxlPU5hbWVzX2Zyb21fYV9oaWdoX29yZGVyX01hcmtvdl9Qcm9jZXNzX2FuZF9hX3NpbXBsaWZpZWRfS2F0el9iYWNrLW9mZl9zY2hlbWVcIj5Sb2d1ZUJhc2luIGFydGljbGU8L2E+LlxuICogT2ZmZXJzIGNvbmZpZ3VyYWJsZSBvcmRlciBhbmQgcHJpb3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cmluZ0dlbmVyYXRvciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgICAgICAgd29yZHM6IGZhbHNlLFxuICAgICAgICAgICAgb3JkZXI6IDMsXG4gICAgICAgICAgICBwcmlvcjogMC4wMDFcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fYm91bmRhcnkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApO1xuICAgICAgICB0aGlzLl9zdWZmaXggPSB0aGlzLl9ib3VuZGFyeTtcbiAgICAgICAgdGhpcy5fcHJlZml4ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fb3B0aW9ucy5vcmRlcjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVmaXgucHVzaCh0aGlzLl9ib3VuZGFyeSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpb3JWYWx1ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fcHJpb3JWYWx1ZXNbdGhpcy5fYm91bmRhcnldID0gdGhpcy5fb3B0aW9ucy5wcmlvcjtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGxlYXJuaW5nIGRhdGFcbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLl9wcmlvclZhbHVlcyA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBHZW5lcmF0ZWQgc3RyaW5nXG4gICAgICovXG4gICAgZ2VuZXJhdGUoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbdGhpcy5fc2FtcGxlKHRoaXMuX3ByZWZpeCldO1xuICAgICAgICB3aGlsZSAocmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSAhPSB0aGlzLl9ib3VuZGFyeSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5fc2FtcGxlKHJlc3VsdCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9qb2luKHJlc3VsdC5zbGljZSgwLCAtMSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlIChsZWFybikgYSBzdHJpbmcgZnJvbSBhIHRyYWluaW5nIHNldFxuICAgICAqL1xuICAgIG9ic2VydmUoc3RyaW5nKSB7XG4gICAgICAgIGxldCB0b2tlbnMgPSB0aGlzLl9zcGxpdChzdHJpbmcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcHJpb3JWYWx1ZXNbdG9rZW5zW2ldXSA9IHRoaXMuX29wdGlvbnMucHJpb3I7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5zID0gdGhpcy5fcHJlZml4LmNvbmNhdCh0b2tlbnMpLmNvbmNhdCh0aGlzLl9zdWZmaXgpOyAvKiBhZGQgYm91bmRhcnkgc3ltYm9scyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5fb3B0aW9ucy5vcmRlcjsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNvbnRleHQgPSB0b2tlbnMuc2xpY2UoaSAtIHRoaXMuX29wdGlvbnMub3JkZXIsIGkpO1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb250ZXh0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN1YmNvbnRleHQgPSBjb250ZXh0LnNsaWNlKGopO1xuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVFdmVudChzdWJjb250ZXh0LCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0U3RhdHMoKSB7XG4gICAgICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgICAgICBsZXQgcHJpb3JDb3VudCA9IE9iamVjdC5rZXlzKHRoaXMuX3ByaW9yVmFsdWVzKS5sZW5ndGg7XG4gICAgICAgIHByaW9yQ291bnQtLTsgLy8gYm91bmRhcnlcbiAgICAgICAgcGFydHMucHVzaChcImRpc3RpbmN0IHNhbXBsZXM6IFwiICsgcHJpb3JDb3VudCk7XG4gICAgICAgIGxldCBkYXRhQ291bnQgPSBPYmplY3Qua2V5cyh0aGlzLl9kYXRhKS5sZW5ndGg7XG4gICAgICAgIGxldCBldmVudENvdW50ID0gMDtcbiAgICAgICAgZm9yIChsZXQgcCBpbiB0aGlzLl9kYXRhKSB7XG4gICAgICAgICAgICBldmVudENvdW50ICs9IE9iamVjdC5rZXlzKHRoaXMuX2RhdGFbcF0pLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKFwiZGljdGlvbmFyeSBzaXplIChjb250ZXh0cyk6IFwiICsgZGF0YUNvdW50KTtcbiAgICAgICAgcGFydHMucHVzaChcImRpY3Rpb25hcnkgc2l6ZSAoZXZlbnRzKTogXCIgKyBldmVudENvdW50KTtcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCIsIFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9XG4gICAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgICAqL1xuICAgIF9zcGxpdChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdCh0aGlzLl9vcHRpb25zLndvcmRzID8gL1xccysvIDogXCJcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBfam9pbihhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5qb2luKHRoaXMuX29wdGlvbnMud29yZHMgPyBcIiBcIiA6IFwiXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBjb250ZXh0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAgICovXG4gICAgX29ic2VydmVFdmVudChjb250ZXh0LCBldmVudCkge1xuICAgICAgICBsZXQga2V5ID0gdGhpcy5fam9pbihjb250ZXh0KTtcbiAgICAgICAgaWYgKCEoa2V5IGluIHRoaXMuX2RhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuX2RhdGFba2V5XTtcbiAgICAgICAgaWYgKCEoZXZlbnQgaW4gZGF0YSkpIHtcbiAgICAgICAgICAgIGRhdGFbZXZlbnRdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2V2ZW50XSsrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgX3NhbXBsZShjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSB0aGlzLl9iYWNrb2ZmKGNvbnRleHQpO1xuICAgICAgICBsZXQga2V5ID0gdGhpcy5fam9pbihjb250ZXh0KTtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLl9kYXRhW2tleV07XG4gICAgICAgIGxldCBhdmFpbGFibGUgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMucHJpb3IpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGV2ZW50IGluIHRoaXMuX3ByaW9yVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgYXZhaWxhYmxlW2V2ZW50XSA9IHRoaXMuX3ByaW9yVmFsdWVzW2V2ZW50XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGV2ZW50IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVbZXZlbnRdICs9IGRhdGFbZXZlbnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXZhaWxhYmxlID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUk5HLmdldFdlaWdodGVkVmFsdWUoYXZhaWxhYmxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX1cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAgICovXG4gICAgX2JhY2tvZmYoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5sZW5ndGggPiB0aGlzLl9vcHRpb25zLm9yZGVyKSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC5zbGljZSgtdGhpcy5fb3B0aW9ucy5vcmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGV4dC5sZW5ndGggPCB0aGlzLl9vcHRpb25zLm9yZGVyKSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy5fcHJlZml4LnNsaWNlKDAsIHRoaXMuX29wdGlvbnMub3JkZXIgLSBjb250ZXh0Lmxlbmd0aCkuY29uY2F0KGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICghKHRoaXMuX2pvaW4oY29udGV4dCkgaW4gdGhpcy5fZGF0YSkgJiYgY29udGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFF1ZXVlIHtcbiAgICAvKipcbiAgICAgKiBAY2xhc3MgR2VuZXJpYyBldmVudCBxdWV1ZTogc3RvcmVzIGV2ZW50cyBhbmQgcmV0cmlldmVzIHRoZW0gYmFzZWQgb24gdGhlaXIgdGltZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl90aW1lID0gMDtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuX2V2ZW50VGltZXMgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge251bWJlcn0gRWxhcHNlZCB0aW1lXG4gICAgICovXG4gICAgZ2V0VGltZSgpIHsgcmV0dXJuIHRoaXMuX3RpbWU7IH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgc2NoZWR1bGVkIGV2ZW50c1xuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fZXZlbnRUaW1lcyA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBldmVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gICAgICovXG4gICAgYWRkKGV2ZW50LCB0aW1lKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuX2V2ZW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZXZlbnRUaW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V2ZW50VGltZXNbaV0gPiB0aW1lKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50cy5zcGxpY2UoaW5kZXgsIDAsIGV2ZW50KTtcbiAgICAgICAgdGhpcy5fZXZlbnRUaW1lcy5zcGxpY2UoaW5kZXgsIDAsIHRpbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2NhdGVzIHRoZSBuZWFyZXN0IGV2ZW50LCBhZHZhbmNlcyB0aW1lIGlmIG5lY2Vzc2FyeS4gUmV0dXJucyB0aGF0IGV2ZW50IGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIHF1ZXVlLlxuICAgICAqIEByZXR1cm5zIHs/IHx8IG51bGx9IFRoZSBldmVudCBwcmV2aW91c2x5IGFkZGVkIGJ5IGFkZEV2ZW50LCBudWxsIGlmIG5vIGV2ZW50IGF2YWlsYWJsZVxuICAgICAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGltZSA9IHRoaXMuX2V2ZW50VGltZXMuc3BsaWNlKDAsIDEpWzBdO1xuICAgICAgICBpZiAodGltZSA+IDApIHsgLyogYWR2YW5jZSAqL1xuICAgICAgICAgICAgdGhpcy5fdGltZSArPSB0aW1lO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ldmVudFRpbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRUaW1lc1tpXSAtPSB0aW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMuc3BsaWNlKDAsIDEpWzBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRpbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBldmVudFxuICAgICAqIEBwYXJhbSB7P30gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aW1lXG4gICAgICovXG4gICAgZ2V0RXZlbnRUaW1lKGV2ZW50KSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuX2V2ZW50cy5pbmRleE9mKGV2ZW50KTtcbiAgICAgICAgaWYgKGluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudFRpbWVzW2luZGV4XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGZyb20gdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIHs/fSBldmVudFxuICAgICAqIEByZXR1cm5zIHtib29sfSBzdWNjZXNzP1xuICAgICAqL1xuICAgIHJlbW92ZShldmVudCkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9ldmVudHMuaW5kZXhPZihldmVudCk7XG4gICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW92ZShpbmRleCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGZyb20gdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIHtpbnR9IGluZGV4XG4gICAgICovXG4gICAgX3JlbW92ZShpbmRleCkge1xuICAgICAgICB0aGlzLl9ldmVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5fZXZlbnRUaW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICA7XG59XG4iLCJpbXBvcnQgRXZlbnRRdWV1ZSBmcm9tIFwiLi4vZXZlbnRxdWV1ZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZWR1bGVyIHtcbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQWJzdHJhY3Qgc2NoZWR1bGVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gbmV3IEV2ZW50UXVldWUoKTtcbiAgICAgICAgdGhpcy5fcmVwZWF0ID0gW107XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAc2VlIFJPVC5FdmVudFF1ZXVlI2dldFRpbWVcbiAgICAgKi9cbiAgICBnZXRUaW1lKCkgeyByZXR1cm4gdGhpcy5fcXVldWUuZ2V0VGltZSgpOyB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBpdGVtXG4gICAgICogQHBhcmFtIHtib29sfSByZXBlYXRcbiAgICAgKi9cbiAgICBhZGQoaXRlbSwgcmVwZWF0KSB7XG4gICAgICAgIGlmIChyZXBlYXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcGVhdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRpbWUgdGhlIGdpdmVuIGl0ZW0gaXMgc2NoZWR1bGVkIGZvclxuICAgICAqIEBwYXJhbSB7P30gaXRlbVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IHRpbWVcbiAgICAgKi9cbiAgICBnZXRUaW1lT2YoaXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcXVldWUuZ2V0RXZlbnRUaW1lKGl0ZW0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgaXRlbXNcbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5fcXVldWUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcmVwZWF0ID0gW107XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJldmlvdXNseSBhZGRlZCBpdGVtXG4gICAgICogQHBhcmFtIHs/fSBpdGVtXG4gICAgICogQHJldHVybnMge2Jvb2x9IHN1Y2Nlc3NmdWw/XG4gICAgICovXG4gICAgcmVtb3ZlKGl0ZW0pIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX3F1ZXVlLnJlbW92ZShpdGVtKTtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fcmVwZWF0LmluZGV4T2YoaXRlbSk7XG4gICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fcmVwZWF0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgPT0gaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NoZWR1bGUgbmV4dCBpdGVtXG4gICAgICogQHJldHVybnMgez99XG4gICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX3F1ZXVlLmdldCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudDtcbiAgICB9XG59XG4iLCJpbXBvcnQgU2ltcGxlIGZyb20gXCIuL3NpbXBsZS5qc1wiO1xuaW1wb3J0IFNwZWVkIGZyb20gXCIuL3NwZWVkLmpzXCI7XG5pbXBvcnQgQWN0aW9uIGZyb20gXCIuL2FjdGlvbi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgeyBTaW1wbGUsIFNwZWVkLCBBY3Rpb24gfTtcbiIsImltcG9ydCBTY2hlZHVsZXIgZnJvbSBcIi4vc2NoZWR1bGVyLmpzXCI7XG4vKipcbiAqIEBjbGFzcyBTaW1wbGUgZmFpciBzY2hlZHVsZXIgKHJvdW5kLXJvYmluIHN0eWxlKVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW1wbGUgZXh0ZW5kcyBTY2hlZHVsZXIge1xuICAgIGFkZChpdGVtLCByZXBlYXQpIHtcbiAgICAgICAgdGhpcy5fcXVldWUuYWRkKGl0ZW0sIDApO1xuICAgICAgICByZXR1cm4gc3VwZXIuYWRkKGl0ZW0sIHJlcGVhdCk7XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50ICE9PSBudWxsICYmIHRoaXMuX3JlcGVhdC5pbmRleE9mKHRoaXMuX2N1cnJlbnQpICE9IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZS5hZGQodGhpcy5fY3VycmVudCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLm5leHQoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgU2NoZWR1bGVyIGZyb20gXCIuL3NjaGVkdWxlci5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgU3BlZWQtYmFzZWQgc2NoZWR1bGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwZWVkIGV4dGVuZHMgU2NoZWR1bGVyIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaXRlbSBhbnl0aGluZyB3aXRoIFwiZ2V0U3BlZWRcIiBtZXRob2RcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IHJlcGVhdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZT0xL2l0ZW0uZ2V0U3BlZWQoKV1cbiAgICAgKiBAc2VlIFJPVC5TY2hlZHVsZXIjYWRkXG4gICAgICovXG4gICAgYWRkKGl0ZW0sIHJlcGVhdCwgdGltZSkge1xuICAgICAgICB0aGlzLl9xdWV1ZS5hZGQoaXRlbSwgdGltZSAhPT0gdW5kZWZpbmVkID8gdGltZSA6IDEgLyBpdGVtLmdldFNwZWVkKCkpO1xuICAgICAgICByZXR1cm4gc3VwZXIuYWRkKGl0ZW0sIHJlcGVhdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzZWUgUk9ULlNjaGVkdWxlciNuZXh0XG4gICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgJiYgdGhpcy5fcmVwZWF0LmluZGV4T2YodGhpcy5fY3VycmVudCkgIT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLmFkZCh0aGlzLl9jdXJyZW50LCAxIC8gdGhpcy5fY3VycmVudC5nZXRTcGVlZCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIubmV4dCgpO1xuICAgIH1cbn1cbiIsImltcG9ydCBTY2hlZHVsZXIgZnJvbSBcIi4vc2NoZWR1bGVyLmpzXCI7XG4vKipcbiAqIEBjbGFzcyBBY3Rpb24tYmFzZWQgc2NoZWR1bGVyXG4gKiBAYXVnbWVudHMgUk9ULlNjaGVkdWxlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb24gZXh0ZW5kcyBTY2hlZHVsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9kZWZhdWx0RHVyYXRpb24gPSAxOyAvKiBmb3IgbmV3bHkgYWRkZWQgKi9cbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl9kZWZhdWx0RHVyYXRpb247IC8qIGZvciB0aGlzLl9jdXJyZW50ICovXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtXG4gICAgICogQHBhcmFtIHtib29sfSByZXBlYXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWU9MV1cbiAgICAgKiBAc2VlIFJPVC5TY2hlZHVsZXIjYWRkXG4gICAgICovXG4gICAgYWRkKGl0ZW0sIHJlcGVhdCwgdGltZSkge1xuICAgICAgICB0aGlzLl9xdWV1ZS5hZGQoaXRlbSwgdGltZSB8fCB0aGlzLl9kZWZhdWx0RHVyYXRpb24pO1xuICAgICAgICByZXR1cm4gc3VwZXIuYWRkKGl0ZW0sIHJlcGVhdCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX2RlZmF1bHREdXJhdGlvbjtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmNsZWFyKCk7XG4gICAgfVxuICAgIHJlbW92ZShpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtID09IHRoaXMuX2N1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fZGVmYXVsdER1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5yZW1vdmUoaXRlbSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzZWUgUk9ULlNjaGVkdWxlciNuZXh0XG4gICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgIT09IG51bGwgJiYgdGhpcy5fcmVwZWF0LmluZGV4T2YodGhpcy5fY3VycmVudCkgIT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLmFkZCh0aGlzLl9jdXJyZW50LCB0aGlzLl9kdXJhdGlvbiB8fCB0aGlzLl9kZWZhdWx0RHVyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl9kZWZhdWx0RHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLm5leHQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGR1cmF0aW9uIGZvciB0aGUgYWN0aXZlIGl0ZW1cbiAgICAgKi9cbiAgICBzZXREdXJhdGlvbih0aW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRElSUyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbjtcbjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZPViB7XG4gICAgLyoqXG4gICAgICogQGNsYXNzIEFic3RyYWN0IEZPViBhbGdvcml0aG1cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaWdodFBhc3Nlc0NhbGxiYWNrIERvZXMgdGhlIGxpZ2h0IHBhc3MgdGhyb3VnaCB4LHk/XG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7aW50fSBbb3B0aW9ucy50b3BvbG9neT04XSA0LzYvOFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxpZ2h0UGFzc2VzQ2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9saWdodFBhc3NlcyA9IGxpZ2h0UGFzc2VzQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgdG9wb2xvZ3k6IDggfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbGwgbmVpZ2hib3JzIGluIGEgY29uY2VudHJpYyByaW5nXG4gICAgICogQHBhcmFtIHtpbnR9IGN4IGNlbnRlci14XG4gICAgICogQHBhcmFtIHtpbnR9IGN5IGNlbnRlci15XG4gICAgICogQHBhcmFtIHtpbnR9IHIgcmFuZ2VcbiAgICAgKi9cbiAgICBfZ2V0Q2lyY2xlKGN4LCBjeSwgcikge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBkaXJzLCBjb3VudEZhY3Rvciwgc3RhcnRPZmZzZXQ7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fb3B0aW9ucy50b3BvbG9neSkge1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNvdW50RmFjdG9yID0gMTtcbiAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IFswLCAxXTtcbiAgICAgICAgICAgICAgICBkaXJzID0gW1xuICAgICAgICAgICAgICAgICAgICBESVJTWzhdWzddLFxuICAgICAgICAgICAgICAgICAgICBESVJTWzhdWzFdLFxuICAgICAgICAgICAgICAgICAgICBESVJTWzhdWzNdLFxuICAgICAgICAgICAgICAgICAgICBESVJTWzhdWzVdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBkaXJzID0gRElSU1s2XTtcbiAgICAgICAgICAgICAgICBjb3VudEZhY3RvciA9IDE7XG4gICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBbLTEsIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGRpcnMgPSBESVJTWzRdO1xuICAgICAgICAgICAgICAgIGNvdW50RmFjdG9yID0gMjtcbiAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IFstMSwgMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluY29ycmVjdCB0b3BvbG9neSBmb3IgRk9WIGNvbXB1dGF0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8qIHN0YXJ0aW5nIG5laWdoYm9yICovXG4gICAgICAgIGxldCB4ID0gY3ggKyBzdGFydE9mZnNldFswXSAqIHI7XG4gICAgICAgIGxldCB5ID0gY3kgKyBzdGFydE9mZnNldFsxXSAqIHI7XG4gICAgICAgIC8qIGNpcmNsZSAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgciAqIGNvdW50RmFjdG9yOyBqKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChbeCwgeV0pO1xuICAgICAgICAgICAgICAgIHggKz0gZGlyc1tpXVswXTtcbiAgICAgICAgICAgICAgICB5ICs9IGRpcnNbaV1bMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iLCJpbXBvcnQgRk9WIGZyb20gXCIuL2Zvdi5qc1wiO1xuLyoqIE9jdGFudHMgdXNlZCBmb3IgdHJhbnNsYXRpbmcgcmVjdXJzaXZlIHNoYWRvd2Nhc3Rpbmcgb2Zmc2V0cyAqL1xuY29uc3QgT0NUQU5UUyA9IFtcbiAgICBbLTEsIDAsIDAsIDFdLFxuICAgIFswLCAtMSwgMSwgMF0sXG4gICAgWzAsIC0xLCAtMSwgMF0sXG4gICAgWy0xLCAwLCAwLCAtMV0sXG4gICAgWzEsIDAsIDAsIC0xXSxcbiAgICBbMCwgMSwgLTEsIDBdLFxuICAgIFswLCAxLCAxLCAwXSxcbiAgICBbMSwgMCwgMCwgMV1cbl07XG4vKipcbiAqIEBjbGFzcyBSZWN1cnNpdmUgc2hhZG93Y2FzdGluZyBhbGdvcml0aG1cbiAqIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIDQvOCB0b3BvbG9naWVzLCBub3QgaGV4YWdvbmFsLlxuICogQmFzZWQgb24gUGV0ZXIgSGFya2lucycgaW1wbGVtZW50YXRpb24gb2YgQmrDtnJuIEJlcmdzdHLDtm0ncyBhbGdvcml0aG0gZGVzY3JpYmVkIGhlcmU6IGh0dHA6Ly93d3cucm9ndWViYXNpbi5jb20vaW5kZXgucGhwP3RpdGxlPUZPVl91c2luZ19yZWN1cnNpdmVfc2hhZG93Y2FzdGluZ1xuICogQGF1Z21lbnRzIFJPVC5GT1ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdXJzaXZlU2hhZG93Y2FzdGluZyBleHRlbmRzIEZPViB7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB2aXNpYmlsaXR5IGZvciBhIDM2MC1kZWdyZWUgY2lyY2xlXG4gICAgICogQHBhcmFtIHtpbnR9IHhcbiAgICAgKiBAcGFyYW0ge2ludH0geVxuICAgICAqIEBwYXJhbSB7aW50fSBSIE1heGltdW0gdmlzaWJpbGl0eSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIGNvbXB1dGUoeCwgeSwgUiwgY2FsbGJhY2spIHtcbiAgICAgICAgLy9Zb3UgY2FuIGFsd2F5cyBzZWUgeW91ciBvd24gdGlsZVxuICAgICAgICBjYWxsYmFjayh4LCB5LCAwLCAxKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPQ1RBTlRTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJPY3RhbnQoeCwgeSwgT0NUQU5UU1tpXSwgUiwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdmlzaWJpbGl0eSBmb3IgYSAxODAtZGVncmVlIGFyY1xuICAgICAqIEBwYXJhbSB7aW50fSB4XG4gICAgICogQHBhcmFtIHtpbnR9IHlcbiAgICAgKiBAcGFyYW0ge2ludH0gUiBNYXhpbXVtIHZpc2liaWxpdHkgcmFkaXVzXG4gICAgICogQHBhcmFtIHtpbnR9IGRpciBEaXJlY3Rpb24gdG8gbG9vayBpbiAoZXhwcmVzc2VkIGluIGEgUk9ULkRJUlMgdmFsdWUpO1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgY29tcHV0ZTE4MCh4LCB5LCBSLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vWW91IGNhbiBhbHdheXMgc2VlIHlvdXIgb3duIHRpbGVcbiAgICAgICAgY2FsbGJhY2soeCwgeSwgMCwgMSk7XG4gICAgICAgIGxldCBwcmV2aW91c09jdGFudCA9IChkaXIgLSAxICsgOCkgJSA4OyAvL05lZWQgdG8gcmV0cmlldmUgdGhlIHByZXZpb3VzIG9jdGFudCB0byByZW5kZXIgYSBmdWxsIDE4MCBkZWdyZWVzXG4gICAgICAgIGxldCBuZXh0UHJldmlvdXNPY3RhbnQgPSAoZGlyIC0gMiArIDgpICUgODsgLy9OZWVkIHRvIHJldHJpZXZlIHRoZSBwcmV2aW91cyB0d28gb2N0YW50cyB0byByZW5kZXIgYSBmdWxsIDE4MCBkZWdyZWVzXG4gICAgICAgIGxldCBuZXh0T2N0YW50ID0gKGRpciArIDEgKyA4KSAlIDg7IC8vTmVlZCB0byBncmFiIHRvIG5leHQgb2N0YW50IHRvIHJlbmRlciBhIGZ1bGwgMTgwIGRlZ3JlZXNcbiAgICAgICAgdGhpcy5fcmVuZGVyT2N0YW50KHgsIHksIE9DVEFOVFNbbmV4dFByZXZpb3VzT2N0YW50XSwgUiwgY2FsbGJhY2spO1xuICAgICAgICB0aGlzLl9yZW5kZXJPY3RhbnQoeCwgeSwgT0NUQU5UU1twcmV2aW91c09jdGFudF0sIFIsIGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyT2N0YW50KHgsIHksIE9DVEFOVFNbZGlyXSwgUiwgY2FsbGJhY2spO1xuICAgICAgICB0aGlzLl9yZW5kZXJPY3RhbnQoeCwgeSwgT0NUQU5UU1tuZXh0T2N0YW50XSwgUiwgY2FsbGJhY2spO1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB2aXNpYmlsaXR5IGZvciBhIDkwLWRlZ3JlZSBhcmNcbiAgICAgKiBAcGFyYW0ge2ludH0geFxuICAgICAqIEBwYXJhbSB7aW50fSB5XG4gICAgICogQHBhcmFtIHtpbnR9IFIgTWF4aW11bSB2aXNpYmlsaXR5IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7aW50fSBkaXIgRGlyZWN0aW9uIHRvIGxvb2sgaW4gKGV4cHJlc3NlZCBpbiBhIFJPVC5ESVJTIHZhbHVlKTtcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIGNvbXB1dGU5MCh4LCB5LCBSLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vWW91IGNhbiBhbHdheXMgc2VlIHlvdXIgb3duIHRpbGVcbiAgICAgICAgY2FsbGJhY2soeCwgeSwgMCwgMSk7XG4gICAgICAgIGxldCBwcmV2aW91c09jdGFudCA9IChkaXIgLSAxICsgOCkgJSA4OyAvL05lZWQgdG8gcmV0cmlldmUgdGhlIHByZXZpb3VzIG9jdGFudCB0byByZW5kZXIgYSBmdWxsIDkwIGRlZ3JlZXNcbiAgICAgICAgdGhpcy5fcmVuZGVyT2N0YW50KHgsIHksIE9DVEFOVFNbZGlyXSwgUiwgY2FsbGJhY2spO1xuICAgICAgICB0aGlzLl9yZW5kZXJPY3RhbnQoeCwgeSwgT0NUQU5UU1twcmV2aW91c09jdGFudF0sIFIsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVyIG9uZSBvY3RhbnQgKDQ1LWRlZ3JlZSBhcmMpIG9mIHRoZSB2aWV3c2hlZFxuICAgICAqIEBwYXJhbSB7aW50fSB4XG4gICAgICogQHBhcmFtIHtpbnR9IHlcbiAgICAgKiBAcGFyYW0ge2ludH0gb2N0YW50IE9jdGFudCB0byBiZSByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7aW50fSBSIE1heGltdW0gdmlzaWJpbGl0eSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIF9yZW5kZXJPY3RhbnQoeCwgeSwgb2N0YW50LCBSLCBjYWxsYmFjaykge1xuICAgICAgICAvL1JhZGl1cyBpbmNyZW1lbnRlZCBieSAxIHRvIHByb3ZpZGUgc2FtZSBjb3ZlcmFnZSBhcmVhIGFzIG90aGVyIHNoYWRvd2Nhc3RpbmcgcmFkaXVzZXNcbiAgICAgICAgdGhpcy5fY2FzdFZpc2liaWxpdHkoeCwgeSwgMSwgMS4wLCAwLjAsIFIgKyAxLCBvY3RhbnRbMF0sIG9jdGFudFsxXSwgb2N0YW50WzJdLCBvY3RhbnRbM10sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWN0dWFsbHkgY2FsY3VsYXRlcyB0aGUgdmlzaWJpbGl0eVxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydFggVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydFkgVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7aW50fSByb3cgVGhlIHJvdyB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2Zsb2F0fSB2aXNTbG9wZVN0YXJ0IFRoZSBzbG9wZSB0byBzdGFydCBhdFxuICAgICAqIEBwYXJhbSB7ZmxvYXR9IHZpc1Nsb3BlRW5kIFRoZSBzbG9wZSB0byBlbmQgYXRcbiAgICAgKiBAcGFyYW0ge2ludH0gcmFkaXVzIFRoZSByYWRpdXMgdG8gcmVhY2ggb3V0IHRvXG4gICAgICogQHBhcmFtIHtpbnR9IHh4XG4gICAgICogQHBhcmFtIHtpbnR9IHh5XG4gICAgICogQHBhcmFtIHtpbnR9IHl4XG4gICAgICogQHBhcmFtIHtpbnR9IHl5XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHVzZSB3aGVuIHdlIGhpdCBhIGJsb2NrIHRoYXQgaXMgdmlzaWJsZVxuICAgICAqL1xuICAgIF9jYXN0VmlzaWJpbGl0eShzdGFydFgsIHN0YXJ0WSwgcm93LCB2aXNTbG9wZVN0YXJ0LCB2aXNTbG9wZUVuZCwgcmFkaXVzLCB4eCwgeHksIHl4LCB5eSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHZpc1Nsb3BlU3RhcnQgPCB2aXNTbG9wZUVuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSByb3c7IGkgPD0gcmFkaXVzOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkeCA9IC1pIC0gMTtcbiAgICAgICAgICAgIGxldCBkeSA9IC1pO1xuICAgICAgICAgICAgbGV0IGJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBuZXdTdGFydCA9IDA7XG4gICAgICAgICAgICAvLydSb3cnIGNvdWxkIGJlIGNvbHVtbiwgbmFtZXMgaGVyZSBhc3N1bWUgb2N0YW50IDAgYW5kIHdvdWxkIGJlIGZsaXBwZWQgZm9yIGhhbGYgdGhlIG9jdGFudHNcbiAgICAgICAgICAgIHdoaWxlIChkeCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgZHggKz0gMTtcbiAgICAgICAgICAgICAgICAvL1RyYW5zbGF0ZSBmcm9tIHJlbGF0aXZlIGNvb3JkaW5hdGVzIHRvIG1hcCBjb29yZGluYXRlc1xuICAgICAgICAgICAgICAgIGxldCBtYXBYID0gc3RhcnRYICsgZHggKiB4eCArIGR5ICogeHk7XG4gICAgICAgICAgICAgICAgbGV0IG1hcFkgPSBzdGFydFkgKyBkeCAqIHl4ICsgZHkgKiB5eTtcbiAgICAgICAgICAgICAgICAvL1JhbmdlIG9mIHRoZSByb3dcbiAgICAgICAgICAgICAgICBsZXQgc2xvcGVTdGFydCA9IChkeCAtIDAuNSkgLyAoZHkgKyAwLjUpO1xuICAgICAgICAgICAgICAgIGxldCBzbG9wZUVuZCA9IChkeCArIDAuNSkgLyAoZHkgLSAwLjUpO1xuICAgICAgICAgICAgICAgIC8vSWdub3JlIGlmIG5vdCB5ZXQgYXQgbGVmdCBlZGdlIG9mIE9jdGFudFxuICAgICAgICAgICAgICAgIGlmIChzbG9wZUVuZCA+IHZpc1Nsb3BlU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vRG9uZSBpZiBwYXN0IHJpZ2h0IGVkZ2VcbiAgICAgICAgICAgICAgICBpZiAoc2xvcGVTdGFydCA8IHZpc1Nsb3BlRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL0lmIGl0J3MgaW4gcmFuZ2UsIGl0J3MgdmlzaWJsZVxuICAgICAgICAgICAgICAgIGlmICgoZHggKiBkeCArIGR5ICogZHkpIDwgKHJhZGl1cyAqIHJhZGl1cykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobWFwWCwgbWFwWSwgaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghYmxvY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAvL0lmIHRpbGUgaXMgYSBibG9ja2luZyB0aWxlLCBjYXN0IGFyb3VuZCBpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2xpZ2h0UGFzc2VzKG1hcFgsIG1hcFkpICYmIGkgPCByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FzdFZpc2liaWxpdHkoc3RhcnRYLCBzdGFydFksIGkgKyAxLCB2aXNTbG9wZVN0YXJ0LCBzbG9wZVN0YXJ0LCByYWRpdXMsIHh4LCB4eSwgeXgsIHl5LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFydCA9IHNsb3BlRW5kO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL0tlZXAgbmFycm93aW5nIGlmIHNjYW5uaW5nIGFjcm9zcyBhIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbGlnaHRQYXNzZXMobWFwWCwgbWFwWSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gc2xvcGVFbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL0Jsb2NrIGhhcyBlbmRlZFxuICAgICAgICAgICAgICAgICAgICBibG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZpc1Nsb3BlU3RhcnQgPSBuZXdTdGFydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IERpc2NyZXRlU2hhZG93Y2FzdGluZyBmcm9tIFwiLi9kaXNjcmV0ZS1zaGFkb3djYXN0aW5nLmpzXCI7XG5pbXBvcnQgUHJlY2lzZVNoYWRvd2Nhc3RpbmcgZnJvbSBcIi4vcHJlY2lzZS1zaGFkb3djYXN0aW5nLmpzXCI7XG5pbXBvcnQgUmVjdXJzaXZlU2hhZG93Y2FzdGluZyBmcm9tIFwiLi9yZWN1cnNpdmUtc2hhZG93Y2FzdGluZy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgeyBEaXNjcmV0ZVNoYWRvd2Nhc3RpbmcsIFByZWNpc2VTaGFkb3djYXN0aW5nLCBSZWN1cnNpdmVTaGFkb3djYXN0aW5nIH07XG4iLCJpbXBvcnQgRk9WIGZyb20gXCIuL2Zvdi5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgRGlzY3JldGUgc2hhZG93Y2FzdGluZyBhbGdvcml0aG0uIE9ic29sZXRlZCBieSBQcmVjaXNlIHNoYWRvd2Nhc3RpbmcuXG4gKiBAYXVnbWVudHMgUk9ULkZPVlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNjcmV0ZVNoYWRvd2Nhc3RpbmcgZXh0ZW5kcyBGT1Yge1xuICAgIGNvbXB1dGUoeCwgeSwgUiwgY2FsbGJhY2spIHtcbiAgICAgICAgLyogdGhpcyBwbGFjZSBpcyBhbHdheXMgdmlzaWJsZSAqL1xuICAgICAgICBjYWxsYmFjayh4LCB5LCAwLCAxKTtcbiAgICAgICAgLyogc3RhbmRpbmcgaW4gYSBkYXJrIHBsYWNlLiBGSVhNRSBpcyB0aGlzIGEgZ29vZCBpZGVhPyAgKi9cbiAgICAgICAgaWYgKCF0aGlzLl9saWdodFBhc3Nlcyh4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIHN0YXJ0IGFuZCBlbmQgYW5nbGVzICovXG4gICAgICAgIGxldCBEQVRBID0gW107XG4gICAgICAgIGxldCBBLCBCLCBjeCwgY3ksIGJsb2NrcztcbiAgICAgICAgLyogYW5hbHl6ZSBzdXJyb3VuZGluZyBjZWxscyBpbiBjb25jZW50cmljIHJpbmdzLCBzdGFydGluZyBmcm9tIHRoZSBjZW50ZXIgKi9cbiAgICAgICAgZm9yIChsZXQgciA9IDE7IHIgPD0gUjsgcisrKSB7XG4gICAgICAgICAgICBsZXQgbmVpZ2hib3JzID0gdGhpcy5fZ2V0Q2lyY2xlKHgsIHksIHIpO1xuICAgICAgICAgICAgbGV0IGFuZ2xlID0gMzYwIC8gbmVpZ2hib3JzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3ggPSBuZWlnaGJvcnNbaV1bMF07XG4gICAgICAgICAgICAgICAgY3kgPSBuZWlnaGJvcnNbaV1bMV07XG4gICAgICAgICAgICAgICAgQSA9IGFuZ2xlICogKGkgLSAwLjUpO1xuICAgICAgICAgICAgICAgIEIgPSBBICsgYW5nbGU7XG4gICAgICAgICAgICAgICAgYmxvY2tzID0gIXRoaXMuX2xpZ2h0UGFzc2VzKGN4LCBjeSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Zpc2libGVDb29yZHMoTWF0aC5mbG9vcihBKSwgTWF0aC5jZWlsKEIpLCBibG9ja3MsIERBVEEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGN4LCBjeSwgciwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChEQVRBLmxlbmd0aCA9PSAyICYmIERBVEFbMF0gPT0gMCAmJiBEQVRBWzFdID09IDM2MCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSAvKiBjdXRvZmY/ICovXG4gICAgICAgICAgICB9IC8qIGZvciBhbGwgY2VsbHMgaW4gdGhpcyByaW5nICovXG4gICAgICAgIH0gLyogZm9yIGFsbCByaW5ncyAqL1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ludH0gQSBzdGFydCBhbmdsZVxuICAgICAqIEBwYXJhbSB7aW50fSBCIGVuZCBhbmdsZVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gYmxvY2tzIERvZXMgY3VycmVudCBjZWxsIGJsb2NrIHZpc2liaWxpdHk/XG4gICAgICogQHBhcmFtIHtpbnRbXVtdfSBEQVRBIHNoYWRvd2VkIGFuZ2xlIHBhaXJzXG4gICAgICovXG4gICAgX3Zpc2libGVDb29yZHMoQSwgQiwgYmxvY2tzLCBEQVRBKSB7XG4gICAgICAgIGlmIChBIDwgMCkge1xuICAgICAgICAgICAgbGV0IHYxID0gdGhpcy5fdmlzaWJsZUNvb3JkcygwLCBCLCBibG9ja3MsIERBVEEpO1xuICAgICAgICAgICAgbGV0IHYyID0gdGhpcy5fdmlzaWJsZUNvb3JkcygzNjAgKyBBLCAzNjAsIGJsb2NrcywgREFUQSk7XG4gICAgICAgICAgICByZXR1cm4gdjEgfHwgdjI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgREFUQS5sZW5ndGggJiYgREFUQVtpbmRleF0gPCBBKSB7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA9PSBEQVRBLmxlbmd0aCkgeyAvKiBjb21wbGV0ZWx5IG5ldyBzaGFkb3cgKi9cbiAgICAgICAgICAgIGlmIChibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBEQVRBLnB1c2goQSwgQik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBpZiAoaW5kZXggJSAyKSB7IC8qIHRoaXMgc2hhZG93IHN0YXJ0cyBpbiBhbiBleGlzdGluZyBzaGFkb3csIG9yIHdpdGhpbiBpdHMgZW5kaW5nIGJvdW5kYXJ5ICovXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBEQVRBLmxlbmd0aCAmJiBEQVRBW2luZGV4XSA8IEIpIHtcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgJSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIERBVEEuc3BsaWNlKGluZGV4IC0gY291bnQsIGNvdW50LCBCKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIERBVEEuc3BsaWNlKGluZGV4IC0gY291bnQsIGNvdW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLyogdGhpcyBzaGFkb3cgc3RhcnRzIG91dHNpZGUgYW4gZXhpc3Rpbmcgc2hhZG93LCBvciB3aXRoaW4gYSBzdGFydGluZyBib3VuZGFyeSAqL1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgREFUQS5sZW5ndGggJiYgREFUQVtpbmRleF0gPCBCKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogdmlzaWJsZSB3aGVuIG91dHNpZGUgYW4gZXhpc3Rpbmcgc2hhZG93LCBvciB3aGVuIG92ZXJsYXBwaW5nICovXG4gICAgICAgICAgICBpZiAoQSA9PSBEQVRBW2luZGV4IC0gY291bnRdICYmIGNvdW50ID09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ICUgMikge1xuICAgICAgICAgICAgICAgICAgICBEQVRBLnNwbGljZShpbmRleCAtIGNvdW50LCBjb3VudCwgQSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBEQVRBLnNwbGljZShpbmRleCAtIGNvdW50LCBjb3VudCwgQSwgQik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgRk9WIGZyb20gXCIuL2Zvdi5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgUHJlY2lzZSBzaGFkb3djYXN0aW5nIGFsZ29yaXRobVxuICogQGF1Z21lbnRzIFJPVC5GT1ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlY2lzZVNoYWRvd2Nhc3RpbmcgZXh0ZW5kcyBGT1Yge1xuICAgIGNvbXB1dGUoeCwgeSwgUiwgY2FsbGJhY2spIHtcbiAgICAgICAgLyogdGhpcyBwbGFjZSBpcyBhbHdheXMgdmlzaWJsZSAqL1xuICAgICAgICBjYWxsYmFjayh4LCB5LCAwLCAxKTtcbiAgICAgICAgLyogc3RhbmRpbmcgaW4gYSBkYXJrIHBsYWNlLiBGSVhNRSBpcyB0aGlzIGEgZ29vZCBpZGVhPyAgKi9cbiAgICAgICAgaWYgKCF0aGlzLl9saWdodFBhc3Nlcyh4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIGxpc3Qgb2YgYWxsIHNoYWRvd3MgKi9cbiAgICAgICAgbGV0IFNIQURPV1MgPSBbXTtcbiAgICAgICAgbGV0IGN4LCBjeSwgYmxvY2tzLCBBMSwgQTIsIHZpc2liaWxpdHk7XG4gICAgICAgIC8qIGFuYWx5emUgc3Vycm91bmRpbmcgY2VsbHMgaW4gY29uY2VudHJpYyByaW5ncywgc3RhcnRpbmcgZnJvbSB0aGUgY2VudGVyICovXG4gICAgICAgIGZvciAobGV0IHIgPSAxOyByIDw9IFI7IHIrKykge1xuICAgICAgICAgICAgbGV0IG5laWdoYm9ycyA9IHRoaXMuX2dldENpcmNsZSh4LCB5LCByKTtcbiAgICAgICAgICAgIGxldCBuZWlnaGJvckNvdW50ID0gbmVpZ2hib3JzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVpZ2hib3JDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3ggPSBuZWlnaGJvcnNbaV1bMF07XG4gICAgICAgICAgICAgICAgY3kgPSBuZWlnaGJvcnNbaV1bMV07XG4gICAgICAgICAgICAgICAgLyogc2hpZnQgaGFsZi1hbi1hbmdsZSBiYWNrd2FyZHMgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3kgb2YgMC10aCBjZWxscyAqL1xuICAgICAgICAgICAgICAgIEExID0gW2kgPyAyICogaSAtIDEgOiAyICogbmVpZ2hib3JDb3VudCAtIDEsIDIgKiBuZWlnaGJvckNvdW50XTtcbiAgICAgICAgICAgICAgICBBMiA9IFsyICogaSArIDEsIDIgKiBuZWlnaGJvckNvdW50XTtcbiAgICAgICAgICAgICAgICBibG9ja3MgPSAhdGhpcy5fbGlnaHRQYXNzZXMoY3gsIGN5KTtcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5ID0gdGhpcy5fY2hlY2tWaXNpYmlsaXR5KEExLCBBMiwgYmxvY2tzLCBTSEFET1dTKTtcbiAgICAgICAgICAgICAgICBpZiAodmlzaWJpbGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjeCwgY3ksIHIsIHZpc2liaWxpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoU0hBRE9XUy5sZW5ndGggPT0gMiAmJiBTSEFET1dTWzBdWzBdID09IDAgJiYgU0hBRE9XU1sxXVswXSA9PSBTSEFET1dTWzFdWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IC8qIGN1dG9mZj8gKi9cbiAgICAgICAgICAgIH0gLyogZm9yIGFsbCBjZWxscyBpbiB0aGlzIHJpbmcgKi9cbiAgICAgICAgfSAvKiBmb3IgYWxsIHJpbmdzICovXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW50WzJdfSBBMSBhcmMgc3RhcnRcbiAgICAgKiBAcGFyYW0ge2ludFsyXX0gQTIgYXJjIGVuZFxuICAgICAqIEBwYXJhbSB7Ym9vbH0gYmxvY2tzIERvZXMgY3VycmVudCBhcmMgYmxvY2sgdmlzaWJpbGl0eT9cbiAgICAgKiBAcGFyYW0ge2ludFtdW119IFNIQURPV1MgbGlzdCBvZiBhY3RpdmUgc2hhZG93c1xuICAgICAqL1xuICAgIF9jaGVja1Zpc2liaWxpdHkoQTEsIEEyLCBibG9ja3MsIFNIQURPV1MpIHtcbiAgICAgICAgaWYgKEExWzBdID4gQTJbMF0pIHsgLyogc3BsaXQgaW50byB0d28gc3ViLWFyY3MgKi9cbiAgICAgICAgICAgIGxldCB2MSA9IHRoaXMuX2NoZWNrVmlzaWJpbGl0eShBMSwgW0ExWzFdLCBBMVsxXV0sIGJsb2NrcywgU0hBRE9XUyk7XG4gICAgICAgICAgICBsZXQgdjIgPSB0aGlzLl9jaGVja1Zpc2liaWxpdHkoWzAsIDFdLCBBMiwgYmxvY2tzLCBTSEFET1dTKTtcbiAgICAgICAgICAgIHJldHVybiAodjEgKyB2MikgLyAyO1xuICAgICAgICB9XG4gICAgICAgIC8qIGluZGV4MTogZmlyc3Qgc2hhZG93ID49IEExICovXG4gICAgICAgIGxldCBpbmRleDEgPSAwLCBlZGdlMSA9IGZhbHNlO1xuICAgICAgICB3aGlsZSAoaW5kZXgxIDwgU0hBRE9XUy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBvbGQgPSBTSEFET1dTW2luZGV4MV07XG4gICAgICAgICAgICBsZXQgZGlmZiA9IG9sZFswXSAqIEExWzFdIC0gQTFbMF0gKiBvbGRbMV07XG4gICAgICAgICAgICBpZiAoZGlmZiA+PSAwKSB7IC8qIG9sZCA+PSBBMSAqL1xuICAgICAgICAgICAgICAgIGlmIChkaWZmID09IDAgJiYgIShpbmRleDEgJSAyKSkge1xuICAgICAgICAgICAgICAgICAgICBlZGdlMSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXgxKys7XG4gICAgICAgIH1cbiAgICAgICAgLyogaW5kZXgyOiBsYXN0IHNoYWRvdyA8PSBBMiAqL1xuICAgICAgICBsZXQgaW5kZXgyID0gU0hBRE9XUy5sZW5ndGgsIGVkZ2UyID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChpbmRleDItLSkge1xuICAgICAgICAgICAgbGV0IG9sZCA9IFNIQURPV1NbaW5kZXgyXTtcbiAgICAgICAgICAgIGxldCBkaWZmID0gQTJbMF0gKiBvbGRbMV0gLSBvbGRbMF0gKiBBMlsxXTtcbiAgICAgICAgICAgIGlmIChkaWZmID49IDApIHsgLyogb2xkIDw9IEEyICovXG4gICAgICAgICAgICAgICAgaWYgKGRpZmYgPT0gMCAmJiAoaW5kZXgyICUgMikpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRnZTIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdmlzaWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChpbmRleDEgPT0gaW5kZXgyICYmIChlZGdlMSB8fCBlZGdlMikpIHsgLyogc3Vic2V0IG9mIGV4aXN0aW5nIHNoYWRvdywgb25lIG9mIHRoZSBlZGdlcyBtYXRjaCAqL1xuICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVkZ2UxICYmIGVkZ2UyICYmIGluZGV4MSArIDEgPT0gaW5kZXgyICYmIChpbmRleDIgJSAyKSkgeyAvKiBjb21wbGV0ZWx5IGVxdWl2YWxlbnQgd2l0aCBleGlzdGluZyBzaGFkb3cgKi9cbiAgICAgICAgICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbmRleDEgPiBpbmRleDIgJiYgKGluZGV4MSAlIDIpKSB7IC8qIHN1YnNldCBvZiBleGlzdGluZyBzaGFkb3csIG5vdCB0b3VjaGluZyAqL1xuICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gLyogZmFzdCBjYXNlOiBub3QgdmlzaWJsZSAqL1xuICAgICAgICBsZXQgdmlzaWJsZUxlbmd0aDtcbiAgICAgICAgLyogY29tcHV0ZSB0aGUgbGVuZ3RoIG9mIHZpc2libGUgYXJjLCBhZGp1c3QgbGlzdCBvZiBzaGFkb3dzIChpZiBibG9ja2luZykgKi9cbiAgICAgICAgbGV0IHJlbW92ZSA9IGluZGV4MiAtIGluZGV4MSArIDE7XG4gICAgICAgIGlmIChyZW1vdmUgJSAyKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXgxICUgMikgeyAvKiBmaXJzdCBlZGdlIHdpdGhpbiBleGlzdGluZyBzaGFkb3csIHNlY29uZCBvdXRzaWRlICovXG4gICAgICAgICAgICAgICAgbGV0IFAgPSBTSEFET1dTW2luZGV4MV07XG4gICAgICAgICAgICAgICAgdmlzaWJsZUxlbmd0aCA9IChBMlswXSAqIFBbMV0gLSBQWzBdICogQTJbMV0pIC8gKFBbMV0gKiBBMlsxXSk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2Nrcykge1xuICAgICAgICAgICAgICAgICAgICBTSEFET1dTLnNwbGljZShpbmRleDEsIHJlbW92ZSwgQTIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvKiBzZWNvbmQgZWRnZSB3aXRoaW4gZXhpc3Rpbmcgc2hhZG93LCBmaXJzdCBvdXRzaWRlICovXG4gICAgICAgICAgICAgICAgbGV0IFAgPSBTSEFET1dTW2luZGV4Ml07XG4gICAgICAgICAgICAgICAgdmlzaWJsZUxlbmd0aCA9IChQWzBdICogQTFbMV0gLSBBMVswXSAqIFBbMV0pIC8gKEExWzFdICogUFsxXSk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2Nrcykge1xuICAgICAgICAgICAgICAgICAgICBTSEFET1dTLnNwbGljZShpbmRleDEsIHJlbW92ZSwgQTEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbmRleDEgJSAyKSB7IC8qIGJvdGggZWRnZXMgd2l0aGluIGV4aXN0aW5nIHNoYWRvd3MgKi9cbiAgICAgICAgICAgICAgICBsZXQgUDEgPSBTSEFET1dTW2luZGV4MV07XG4gICAgICAgICAgICAgICAgbGV0IFAyID0gU0hBRE9XU1tpbmRleDJdO1xuICAgICAgICAgICAgICAgIHZpc2libGVMZW5ndGggPSAoUDJbMF0gKiBQMVsxXSAtIFAxWzBdICogUDJbMV0pIC8gKFAxWzFdICogUDJbMV0pO1xuICAgICAgICAgICAgICAgIGlmIChibG9ja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgU0hBRE9XUy5zcGxpY2UoaW5kZXgxLCByZW1vdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvKiBib3RoIGVkZ2VzIG91dHNpZGUgZXhpc3Rpbmcgc2hhZG93cyAqL1xuICAgICAgICAgICAgICAgIGlmIChibG9ja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgU0hBRE9XUy5zcGxpY2UoaW5kZXgxLCByZW1vdmUsIEExLCBBMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAxOyAvKiB3aG9sZSBhcmMgdmlzaWJsZSEgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgYXJjTGVuZ3RoID0gKEEyWzBdICogQTFbMV0gLSBBMVswXSAqIEEyWzFdKSAvIChBMVsxXSAqIEEyWzFdKTtcbiAgICAgICAgcmV0dXJuIHZpc2libGVMZW5ndGggLyBhcmNMZW5ndGg7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgREVGQVVMVF9XSURUSCwgREVGQVVMVF9IRUlHSFQgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG47XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXAge1xuICAgIC8qKlxuICAgICAqIEBjbGFzcyBCYXNlIG1hcCBnZW5lcmF0b3JcbiAgICAgKiBAcGFyYW0ge2ludH0gW3dpZHRoPVJPVC5ERUZBVUxUX1dJRFRIXVxuICAgICAqIEBwYXJhbSB7aW50fSBbaGVpZ2h0PVJPVC5ERUZBVUxUX0hFSUdIVF1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCA9IERFRkFVTFRfV0lEVEgsIGhlaWdodCA9IERFRkFVTFRfSEVJR0hUKSB7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gICAgO1xuICAgIF9maWxsTWFwKHZhbHVlKSB7XG4gICAgICAgIGxldCBtYXAgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl93aWR0aDsgaSsrKSB7XG4gICAgICAgICAgICBtYXAucHVzaChbXSk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2hlaWdodDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbWFwW2ldLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxufVxuIiwiaW1wb3J0IE1hcCBmcm9tIFwiLi9tYXAuanNcIjtcbi8qKlxuICogQGNsYXNzIER1bmdlb24gbWFwOiBoYXMgcm9vbXMgYW5kIGNvcnJpZG9yc1xuICogQGF1Z21lbnRzIFJPVC5NYXBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHVuZ2VvbiBleHRlbmRzIE1hcCB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fcm9vbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fY29ycmlkb3JzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZ2VuZXJhdGVkIHJvb21zXG4gICAgICogQHJldHVybnMge1JPVC5NYXAuRmVhdHVyZS5Sb29tW119XG4gICAgICovXG4gICAgZ2V0Um9vbXMoKSB7IHJldHVybiB0aGlzLl9yb29tczsgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZ2VuZXJhdGVkIGNvcnJpZG9yc1xuICAgICAqIEByZXR1cm5zIHtST1QuTWFwLkZlYXR1cmUuQ29ycmlkb3JbXX1cbiAgICAgKi9cbiAgICBnZXRDb3JyaWRvcnMoKSB7IHJldHVybiB0aGlzLl9jb3JyaWRvcnM7IH1cbn1cbiIsImltcG9ydCBSTkcgZnJvbSBcIi4uL3JuZy5qc1wiO1xuO1xuLyoqXG4gKiBAY2xhc3MgRHVuZ2VvbiBmZWF0dXJlOyBoYXMgb3duIC5jcmVhdGUoKSBtZXRob2RcbiAqL1xuY2xhc3MgRmVhdHVyZSB7XG59XG4vKipcbiAqIEBjbGFzcyBSb29tXG4gKiBAYXVnbWVudHMgUk9ULk1hcC5GZWF0dXJlXG4gKiBAcGFyYW0ge2ludH0geDFcbiAqIEBwYXJhbSB7aW50fSB5MVxuICogQHBhcmFtIHtpbnR9IHgyXG4gKiBAcGFyYW0ge2ludH0geTJcbiAqIEBwYXJhbSB7aW50fSBbZG9vclhdXG4gKiBAcGFyYW0ge2ludH0gW2Rvb3JZXVxuICovXG5leHBvcnQgY2xhc3MgUm9vbSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKHgxLCB5MSwgeDIsIHkyLCBkb29yWCwgZG9vclkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgdGhpcy5feTIgPSB5MjtcbiAgICAgICAgdGhpcy5fZG9vcnMgPSB7fTtcbiAgICAgICAgaWYgKGRvb3JYICE9PSB1bmRlZmluZWQgJiYgZG9vclkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5hZGREb29yKGRvb3JYLCBkb29yWSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqIFJvb20gb2YgcmFuZG9tIHNpemUsIHdpdGggYSBnaXZlbiBkb29ycyBhbmQgZGlyZWN0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVJhbmRvbUF0KHgsIHksIGR4LCBkeSwgb3B0aW9ucykge1xuICAgICAgICBsZXQgbWluID0gb3B0aW9ucy5yb29tV2lkdGhbMF07XG4gICAgICAgIGxldCBtYXggPSBvcHRpb25zLnJvb21XaWR0aFsxXTtcbiAgICAgICAgbGV0IHdpZHRoID0gUk5HLmdldFVuaWZvcm1JbnQobWluLCBtYXgpO1xuICAgICAgICBtaW4gPSBvcHRpb25zLnJvb21IZWlnaHRbMF07XG4gICAgICAgIG1heCA9IG9wdGlvbnMucm9vbUhlaWdodFsxXTtcbiAgICAgICAgbGV0IGhlaWdodCA9IFJORy5nZXRVbmlmb3JtSW50KG1pbiwgbWF4KTtcbiAgICAgICAgaWYgKGR4ID09IDEpIHsgLyogdG8gdGhlIHJpZ2h0ICovXG4gICAgICAgICAgICBsZXQgeTIgPSB5IC0gTWF0aC5mbG9vcihSTkcuZ2V0VW5pZm9ybSgpICogaGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcyh4ICsgMSwgeTIsIHggKyB3aWR0aCwgeTIgKyBoZWlnaHQgLSAxLCB4LCB5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHggPT0gLTEpIHsgLyogdG8gdGhlIGxlZnQgKi9cbiAgICAgICAgICAgIGxldCB5MiA9IHkgLSBNYXRoLmZsb29yKFJORy5nZXRVbmlmb3JtKCkgKiBoZWlnaHQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHggLSB3aWR0aCwgeTIsIHggLSAxLCB5MiArIGhlaWdodCAtIDEsIHgsIHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkeSA9PSAxKSB7IC8qIHRvIHRoZSBib3R0b20gKi9cbiAgICAgICAgICAgIGxldCB4MiA9IHggLSBNYXRoLmZsb29yKFJORy5nZXRVbmlmb3JtKCkgKiB3aWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMoeDIsIHkgKyAxLCB4MiArIHdpZHRoIC0gMSwgeSArIGhlaWdodCwgeCwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR5ID09IC0xKSB7IC8qIHRvIHRoZSB0b3AgKi9cbiAgICAgICAgICAgIGxldCB4MiA9IHggLSBNYXRoLmZsb29yKFJORy5nZXRVbmlmb3JtKCkgKiB3aWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMoeDIsIHkgLSBoZWlnaHQsIHgyICsgd2lkdGggLSAxLCB5IC0gMSwgeCwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZHggb3IgZHkgbXVzdCBiZSAxIG9yIC0xXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSb29tIG9mIHJhbmRvbSBzaXplLCBwb3NpdGlvbmVkIGFyb3VuZCBjZW50ZXIgY29vcmRzXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVJhbmRvbUNlbnRlcihjeCwgY3ksIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG1pbiA9IG9wdGlvbnMucm9vbVdpZHRoWzBdO1xuICAgICAgICBsZXQgbWF4ID0gb3B0aW9ucy5yb29tV2lkdGhbMV07XG4gICAgICAgIGxldCB3aWR0aCA9IFJORy5nZXRVbmlmb3JtSW50KG1pbiwgbWF4KTtcbiAgICAgICAgbWluID0gb3B0aW9ucy5yb29tSGVpZ2h0WzBdO1xuICAgICAgICBtYXggPSBvcHRpb25zLnJvb21IZWlnaHRbMV07XG4gICAgICAgIGxldCBoZWlnaHQgPSBSTkcuZ2V0VW5pZm9ybUludChtaW4sIG1heCk7XG4gICAgICAgIGxldCB4MSA9IGN4IC0gTWF0aC5mbG9vcihSTkcuZ2V0VW5pZm9ybSgpICogd2lkdGgpO1xuICAgICAgICBsZXQgeTEgPSBjeSAtIE1hdGguZmxvb3IoUk5HLmdldFVuaWZvcm0oKSAqIGhlaWdodCk7XG4gICAgICAgIGxldCB4MiA9IHgxICsgd2lkdGggLSAxO1xuICAgICAgICBsZXQgeTIgPSB5MSArIGhlaWdodCAtIDE7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyh4MSwgeTEsIHgyLCB5Mik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvb20gb2YgcmFuZG9tIHNpemUgd2l0aGluIGEgZ2l2ZW4gZGltZW5zaW9uc1xuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSYW5kb20oYXZhaWxXaWR0aCwgYXZhaWxIZWlnaHQsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG1pbiA9IG9wdGlvbnMucm9vbVdpZHRoWzBdO1xuICAgICAgICBsZXQgbWF4ID0gb3B0aW9ucy5yb29tV2lkdGhbMV07XG4gICAgICAgIGxldCB3aWR0aCA9IFJORy5nZXRVbmlmb3JtSW50KG1pbiwgbWF4KTtcbiAgICAgICAgbWluID0gb3B0aW9ucy5yb29tSGVpZ2h0WzBdO1xuICAgICAgICBtYXggPSBvcHRpb25zLnJvb21IZWlnaHRbMV07XG4gICAgICAgIGxldCBoZWlnaHQgPSBSTkcuZ2V0VW5pZm9ybUludChtaW4sIG1heCk7XG4gICAgICAgIGxldCBsZWZ0ID0gYXZhaWxXaWR0aCAtIHdpZHRoIC0gMTtcbiAgICAgICAgbGV0IHRvcCA9IGF2YWlsSGVpZ2h0IC0gaGVpZ2h0IC0gMTtcbiAgICAgICAgbGV0IHgxID0gMSArIE1hdGguZmxvb3IoUk5HLmdldFVuaWZvcm0oKSAqIGxlZnQpO1xuICAgICAgICBsZXQgeTEgPSAxICsgTWF0aC5mbG9vcihSTkcuZ2V0VW5pZm9ybSgpICogdG9wKTtcbiAgICAgICAgbGV0IHgyID0geDEgKyB3aWR0aCAtIDE7XG4gICAgICAgIGxldCB5MiA9IHkxICsgaGVpZ2h0IC0gMTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHgxLCB5MSwgeDIsIHkyKTtcbiAgICB9XG4gICAgYWRkRG9vcih4LCB5KSB7XG4gICAgICAgIHRoaXMuX2Rvb3JzW3ggKyBcIixcIiArIHldID0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259XG4gICAgICovXG4gICAgZ2V0RG9vcnMoY2IpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuX2Rvb3JzKSB7XG4gICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgY2IocGFyc2VJbnQocGFydHNbMF0pLCBwYXJzZUludChwYXJ0c1sxXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjbGVhckRvb3JzKCkge1xuICAgICAgICB0aGlzLl9kb29ycyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkRG9vcnMoaXNXYWxsQ2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGxlZnQgPSB0aGlzLl94MSAtIDE7XG4gICAgICAgIGxldCByaWdodCA9IHRoaXMuX3gyICsgMTtcbiAgICAgICAgbGV0IHRvcCA9IHRoaXMuX3kxIC0gMTtcbiAgICAgICAgbGV0IGJvdHRvbSA9IHRoaXMuX3kyICsgMTtcbiAgICAgICAgZm9yIChsZXQgeCA9IGxlZnQ7IHggPD0gcmlnaHQ7IHgrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IHRvcDsgeSA8PSBib3R0b207IHkrKykge1xuICAgICAgICAgICAgICAgIGlmICh4ICE9IGxlZnQgJiYgeCAhPSByaWdodCAmJiB5ICE9IHRvcCAmJiB5ICE9IGJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzV2FsbENhbGxiYWNrKHgsIHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFkZERvb3IoeCwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlYnVnKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJvb21cIiwgdGhpcy5feDEsIHRoaXMuX3kxLCB0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgIH1cbiAgICBpc1ZhbGlkKGlzV2FsbENhbGxiYWNrLCBjYW5CZUR1Z0NhbGxiYWNrKSB7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5feDEgLSAxO1xuICAgICAgICBsZXQgcmlnaHQgPSB0aGlzLl94MiArIDE7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLl95MSAtIDE7XG4gICAgICAgIGxldCBib3R0b20gPSB0aGlzLl95MiArIDE7XG4gICAgICAgIGZvciAobGV0IHggPSBsZWZ0OyB4IDw9IHJpZ2h0OyB4KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSB0b3A7IHkgPD0gYm90dG9tOyB5KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoeCA9PSBsZWZ0IHx8IHggPT0gcmlnaHQgfHwgeSA9PSB0b3AgfHwgeSA9PSBib3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1dhbGxDYWxsYmFjayh4LCB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbkJlRHVnQ2FsbGJhY2soeCwgeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZGlnQ2FsbGJhY2sgRGlnIGNhbGxiYWNrIHdpdGggYSBzaWduYXR1cmUgKHgsIHksIHZhbHVlKS4gVmFsdWVzOiAwID0gZW1wdHksIDEgPSB3YWxsLCAyID0gZG9vci4gTXVsdGlwbGUgZG9vcnMgYXJlIGFsbG93ZWQuXG4gICAgICovXG4gICAgY3JlYXRlKGRpZ0NhbGxiYWNrKSB7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5feDEgLSAxO1xuICAgICAgICBsZXQgcmlnaHQgPSB0aGlzLl94MiArIDE7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLl95MSAtIDE7XG4gICAgICAgIGxldCBib3R0b20gPSB0aGlzLl95MiArIDE7XG4gICAgICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgICAgIGZvciAobGV0IHggPSBsZWZ0OyB4IDw9IHJpZ2h0OyB4KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSB0b3A7IHkgPD0gYm90dG9tOyB5KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoeCArIFwiLFwiICsgeSBpbiB0aGlzLl9kb29ycykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHggPT0gbGVmdCB8fCB4ID09IHJpZ2h0IHx8IHkgPT0gdG9wIHx8IHkgPT0gYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlnQ2FsbGJhY2soeCwgeSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldENlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIFtNYXRoLnJvdW5kKCh0aGlzLl94MSArIHRoaXMuX3gyKSAvIDIpLCBNYXRoLnJvdW5kKCh0aGlzLl95MSArIHRoaXMuX3kyKSAvIDIpXTtcbiAgICB9XG4gICAgZ2V0TGVmdCgpIHsgcmV0dXJuIHRoaXMuX3gxOyB9XG4gICAgZ2V0UmlnaHQoKSB7IHJldHVybiB0aGlzLl94MjsgfVxuICAgIGdldFRvcCgpIHsgcmV0dXJuIHRoaXMuX3kxOyB9XG4gICAgZ2V0Qm90dG9tKCkgeyByZXR1cm4gdGhpcy5feTI7IH1cbn1cbi8qKlxuICogQGNsYXNzIENvcnJpZG9yXG4gKiBAYXVnbWVudHMgUk9ULk1hcC5GZWF0dXJlXG4gKiBAcGFyYW0ge2ludH0gc3RhcnRYXG4gKiBAcGFyYW0ge2ludH0gc3RhcnRZXG4gKiBAcGFyYW0ge2ludH0gZW5kWFxuICogQHBhcmFtIHtpbnR9IGVuZFlcbiAqL1xuZXhwb3J0IGNsYXNzIENvcnJpZG9yIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3Ioc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRYID0gc3RhcnRYO1xuICAgICAgICB0aGlzLl9zdGFydFkgPSBzdGFydFk7XG4gICAgICAgIHRoaXMuX2VuZFggPSBlbmRYO1xuICAgICAgICB0aGlzLl9lbmRZID0gZW5kWTtcbiAgICAgICAgdGhpcy5fZW5kc1dpdGhBV2FsbCA9IHRydWU7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVSYW5kb21BdCh4LCB5LCBkeCwgZHksIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG1pbiA9IG9wdGlvbnMuY29ycmlkb3JMZW5ndGhbMF07XG4gICAgICAgIGxldCBtYXggPSBvcHRpb25zLmNvcnJpZG9yTGVuZ3RoWzFdO1xuICAgICAgICBsZXQgbGVuZ3RoID0gUk5HLmdldFVuaWZvcm1JbnQobWluLCBtYXgpO1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoeCwgeSwgeCArIGR4ICogbGVuZ3RoLCB5ICsgZHkgKiBsZW5ndGgpO1xuICAgIH1cbiAgICBkZWJ1ZygpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb3JyaWRvclwiLCB0aGlzLl9zdGFydFgsIHRoaXMuX3N0YXJ0WSwgdGhpcy5fZW5kWCwgdGhpcy5fZW5kWSk7XG4gICAgfVxuICAgIGlzVmFsaWQoaXNXYWxsQ2FsbGJhY2ssIGNhbkJlRHVnQ2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHN4ID0gdGhpcy5fc3RhcnRYO1xuICAgICAgICBsZXQgc3kgPSB0aGlzLl9zdGFydFk7XG4gICAgICAgIGxldCBkeCA9IHRoaXMuX2VuZFggLSBzeDtcbiAgICAgICAgbGV0IGR5ID0gdGhpcy5fZW5kWSAtIHN5O1xuICAgICAgICBsZXQgbGVuZ3RoID0gMSArIE1hdGgubWF4KE1hdGguYWJzKGR4KSwgTWF0aC5hYnMoZHkpKTtcbiAgICAgICAgaWYgKGR4KSB7XG4gICAgICAgICAgICBkeCA9IGR4IC8gTWF0aC5hYnMoZHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkeSkge1xuICAgICAgICAgICAgZHkgPSBkeSAvIE1hdGguYWJzKGR5KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnggPSBkeTtcbiAgICAgICAgbGV0IG55ID0gLWR4O1xuICAgICAgICBsZXQgb2sgPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHN4ICsgaSAqIGR4O1xuICAgICAgICAgICAgbGV0IHkgPSBzeSArIGkgKiBkeTtcbiAgICAgICAgICAgIGlmICghY2FuQmVEdWdDYWxsYmFjayh4LCB5KSkge1xuICAgICAgICAgICAgICAgIG9rID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzV2FsbENhbGxiYWNrKHggKyBueCwgeSArIG55KSkge1xuICAgICAgICAgICAgICAgIG9rID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzV2FsbENhbGxiYWNrKHggLSBueCwgeSAtIG55KSkge1xuICAgICAgICAgICAgICAgIG9rID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gaTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmRYID0geCAtIGR4O1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZFkgPSB5IC0gZHk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSBsZW5ndGggZGVnZW5lcmF0ZWQsIHRoaXMgY29ycmlkb3IgbWlnaHQgYmUgaW52YWxpZFxuICAgICAgICAgKi9cbiAgICAgICAgLyogbm90IHN1cHBvcnRlZCAqL1xuICAgICAgICBpZiAobGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvKiBsZW5ndGggMSBhbGxvd2VkIG9ubHkgaWYgdGhlIG5leHQgc3BhY2UgaXMgZW1wdHkgKi9cbiAgICAgICAgaWYgKGxlbmd0aCA9PSAxICYmIGlzV2FsbENhbGxiYWNrKHRoaXMuX2VuZFggKyBkeCwgdGhpcy5fZW5kWSArIGR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBkbyBub3Qgd2FudCB0aGUgY29ycmlkb3IgdG8gY3Jhc2ggaW50byBhIGNvcm5lciBvZiBhIHJvb207XG4gICAgICAgICAqIGlmIGFueSBvZiB0aGUgZW5kaW5nIGNvcm5lcnMgaXMgZW1wdHksIHRoZSBOKzF0aCBjZWxsIG9mIHRoaXMgY29ycmlkb3IgbXVzdCBiZSBlbXB0eSB0b28uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpdHVhdGlvbjpcbiAgICAgICAgICogIyMjIyMjIzFcbiAgICAgICAgICogLi4uLi4uLj9cbiAgICAgICAgICogIyMjIyMjIzJcbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGNvcnJpZG9yIHdhcyBkdWcgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAgICAgKiAxLCAyIC0gcHJvYmxlbWF0aWMgY29ybmVycywgPyA9IE4rMXRoIGNlbGwgKG5vdCBkdWcpXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgZmlyc3RDb3JuZXJCYWQgPSAhaXNXYWxsQ2FsbGJhY2sodGhpcy5fZW5kWCArIGR4ICsgbngsIHRoaXMuX2VuZFkgKyBkeSArIG55KTtcbiAgICAgICAgbGV0IHNlY29uZENvcm5lckJhZCA9ICFpc1dhbGxDYWxsYmFjayh0aGlzLl9lbmRYICsgZHggLSBueCwgdGhpcy5fZW5kWSArIGR5IC0gbnkpO1xuICAgICAgICB0aGlzLl9lbmRzV2l0aEFXYWxsID0gaXNXYWxsQ2FsbGJhY2sodGhpcy5fZW5kWCArIGR4LCB0aGlzLl9lbmRZICsgZHkpO1xuICAgICAgICBpZiAoKGZpcnN0Q29ybmVyQmFkIHx8IHNlY29uZENvcm5lckJhZCkgJiYgdGhpcy5fZW5kc1dpdGhBV2FsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBkaWdDYWxsYmFjayBEaWcgY2FsbGJhY2sgd2l0aCBhIHNpZ25hdHVyZSAoeCwgeSwgdmFsdWUpLiBWYWx1ZXM6IDAgPSBlbXB0eS5cbiAgICAgKi9cbiAgICBjcmVhdGUoZGlnQ2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHN4ID0gdGhpcy5fc3RhcnRYO1xuICAgICAgICBsZXQgc3kgPSB0aGlzLl9zdGFydFk7XG4gICAgICAgIGxldCBkeCA9IHRoaXMuX2VuZFggLSBzeDtcbiAgICAgICAgbGV0IGR5ID0gdGhpcy5fZW5kWSAtIHN5O1xuICAgICAgICBsZXQgbGVuZ3RoID0gMSArIE1hdGgubWF4KE1hdGguYWJzKGR4KSwgTWF0aC5hYnMoZHkpKTtcbiAgICAgICAgaWYgKGR4KSB7XG4gICAgICAgICAgICBkeCA9IGR4IC8gTWF0aC5hYnMoZHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkeSkge1xuICAgICAgICAgICAgZHkgPSBkeSAvIE1hdGguYWJzKGR5KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHN4ICsgaSAqIGR4O1xuICAgICAgICAgICAgbGV0IHkgPSBzeSArIGkgKiBkeTtcbiAgICAgICAgICAgIGRpZ0NhbGxiYWNrKHgsIHksIDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjcmVhdGVQcmlvcml0eVdhbGxzKHByaW9yaXR5V2FsbENhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5fZW5kc1dpdGhBV2FsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzeCA9IHRoaXMuX3N0YXJ0WDtcbiAgICAgICAgbGV0IHN5ID0gdGhpcy5fc3RhcnRZO1xuICAgICAgICBsZXQgZHggPSB0aGlzLl9lbmRYIC0gc3g7XG4gICAgICAgIGxldCBkeSA9IHRoaXMuX2VuZFkgLSBzeTtcbiAgICAgICAgaWYgKGR4KSB7XG4gICAgICAgICAgICBkeCA9IGR4IC8gTWF0aC5hYnMoZHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkeSkge1xuICAgICAgICAgICAgZHkgPSBkeSAvIE1hdGguYWJzKGR5KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnggPSBkeTtcbiAgICAgICAgbGV0IG55ID0gLWR4O1xuICAgICAgICBwcmlvcml0eVdhbGxDYWxsYmFjayh0aGlzLl9lbmRYICsgZHgsIHRoaXMuX2VuZFkgKyBkeSk7XG4gICAgICAgIHByaW9yaXR5V2FsbENhbGxiYWNrKHRoaXMuX2VuZFggKyBueCwgdGhpcy5fZW5kWSArIG55KTtcbiAgICAgICAgcHJpb3JpdHlXYWxsQ2FsbGJhY2sodGhpcy5fZW5kWCAtIG54LCB0aGlzLl9lbmRZIC0gbnkpO1xuICAgIH1cbn1cbiIsImltcG9ydCBEdW5nZW9uIGZyb20gXCIuL2R1bmdlb24uanNcIjtcbmltcG9ydCB7IFJvb20sIENvcnJpZG9yIH0gZnJvbSBcIi4vZmVhdHVyZXMuanNcIjtcbmltcG9ydCBSTkcgZnJvbSBcIi4uL3JuZy5qc1wiO1xuaW1wb3J0IHsgRElSUyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmNvbnN0IEZFQVRVUkVTID0ge1xuICAgIFwicm9vbVwiOiBSb29tLFxuICAgIFwiY29ycmlkb3JcIjogQ29ycmlkb3Jcbn07XG4vKipcbiAqIFJhbmRvbSBkdW5nZW9uIGdlbmVyYXRvciB1c2luZyBodW1hbi1saWtlIGRpZ2dpbmcgcGF0dGVybnMuXG4gKiBIZWF2aWx5IGJhc2VkIG9uIE1pa2UgQW5kZXJzb24ncyBpZGVhcyBmcm9tIHRoZSBcIlR5cmFudFwiIGFsZ28sIG1lbnRpb25lZCBhdFxuICogaHR0cDovL3d3dy5yb2d1ZWJhc2luLnJvZ3VlbGlrZWRldmVsb3BtZW50Lm9yZy9pbmRleC5waHA/dGl0bGU9RHVuZ2Vvbi1CdWlsZGluZ19BbGdvcml0aG0uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpZ2dlciBleHRlbmRzIER1bmdlb24ge1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgcm9vbVdpZHRoOiBbMywgOV0sXG4gICAgICAgICAgICByb29tSGVpZ2h0OiBbMywgNV0sXG4gICAgICAgICAgICBjb3JyaWRvckxlbmd0aDogWzMsIDEwXSxcbiAgICAgICAgICAgIGR1Z1BlcmNlbnRhZ2U6IDAuMixcbiAgICAgICAgICAgIHRpbWVMaW1pdDogMTAwMCAvKiB3ZSBzdG9wIGFmdGVyIHRoaXMgbXVjaCB0aW1lIGhhcyBwYXNzZWQgKG1zZWMpICovXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9mZWF0dXJlcyA9IHtcbiAgICAgICAgICAgIFwicm9vbVwiOiA0LFxuICAgICAgICAgICAgXCJjb3JyaWRvclwiOiA0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX21hcCA9IFtdO1xuICAgICAgICB0aGlzLl9mZWF0dXJlQXR0ZW1wdHMgPSAyMDsgLyogaG93IG1hbnkgdGltZXMgZG8gd2UgdHJ5IHRvIGNyZWF0ZSBhIGZlYXR1cmUgb24gYSBzdWl0YWJsZSB3YWxsICovXG4gICAgICAgIHRoaXMuX3dhbGxzID0ge307IC8qIHRoZXNlIGFyZSBhdmFpbGFibGUgZm9yIGRpZ2dpbmcgKi9cbiAgICAgICAgdGhpcy5fZHVnID0gMDtcbiAgICAgICAgdGhpcy5fZGlnQ2FsbGJhY2sgPSB0aGlzLl9kaWdDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9jYW5CZUR1Z0NhbGxiYWNrID0gdGhpcy5fY2FuQmVEdWdDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9pc1dhbGxDYWxsYmFjayA9IHRoaXMuX2lzV2FsbENhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaW9yaXR5V2FsbENhbGxiYWNrID0gdGhpcy5fcHJpb3JpdHlXYWxsQ2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICB9XG4gICAgY3JlYXRlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3Jvb21zID0gW107XG4gICAgICAgIHRoaXMuX2NvcnJpZG9ycyA9IFtdO1xuICAgICAgICB0aGlzLl9tYXAgPSB0aGlzLl9maWxsTWFwKDEpO1xuICAgICAgICB0aGlzLl93YWxscyA9IHt9O1xuICAgICAgICB0aGlzLl9kdWcgPSAwO1xuICAgICAgICBsZXQgYXJlYSA9ICh0aGlzLl93aWR0aCAtIDIpICogKHRoaXMuX2hlaWdodCAtIDIpO1xuICAgICAgICB0aGlzLl9maXJzdFJvb20oKTtcbiAgICAgICAgbGV0IHQxID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IHByaW9yaXR5V2FsbHM7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHByaW9yaXR5V2FsbHMgPSAwO1xuICAgICAgICAgICAgbGV0IHQyID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGlmICh0MiAtIHQxID4gdGhpcy5fb3B0aW9ucy50aW1lTGltaXQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGZpbmQgYSBnb29kIHdhbGwgKi9cbiAgICAgICAgICAgIGxldCB3YWxsID0gdGhpcy5fZmluZFdhbGwoKTtcbiAgICAgICAgICAgIGlmICghd2FsbCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSAvKiBubyBtb3JlIHdhbGxzICovXG4gICAgICAgICAgICBsZXQgcGFydHMgPSB3YWxsLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIGxldCB4ID0gcGFyc2VJbnQocGFydHNbMF0pO1xuICAgICAgICAgICAgbGV0IHkgPSBwYXJzZUludChwYXJ0c1sxXSk7XG4gICAgICAgICAgICBsZXQgZGlyID0gdGhpcy5fZ2V0RGlnZ2luZ0RpcmVjdGlvbih4LCB5KTtcbiAgICAgICAgICAgIGlmICghZGlyKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IC8qIHRoaXMgd2FsbCBpcyBub3Qgc3VpdGFibGUgKi9cbiAgICAgICAgICAgIC8vXHRcdGNvbnNvbGUubG9nKFwid2FsbFwiLCB4LCB5KTtcbiAgICAgICAgICAgIC8qIHRyeSBhZGRpbmcgYSBmZWF0dXJlICovXG4gICAgICAgICAgICBsZXQgZmVhdHVyZUF0dGVtcHRzID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlQXR0ZW1wdHMrKztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJ5RmVhdHVyZSh4LCB5LCBkaXJbMF0sIGRpclsxXSkpIHsgLyogZmVhdHVyZSBhZGRlZCAqL1xuICAgICAgICAgICAgICAgICAgICAvL2lmICh0aGlzLl9yb29tcy5sZW5ndGggKyB0aGlzLl9jb3JyaWRvcnMubGVuZ3RoID09IDIpIHsgdGhpcy5fcm9vbXNbMF0uYWRkRG9vcih4LCB5KTsgfSAvKiBmaXJzdCByb29tIG9maWNpYWxseSBoYXMgZG9vcnMgKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3Vycm91bmRpbmdXYWxscyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3Vycm91bmRpbmdXYWxscyh4IC0gZGlyWzBdLCB5IC0gZGlyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAoZmVhdHVyZUF0dGVtcHRzIDwgdGhpcy5fZmVhdHVyZUF0dGVtcHRzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGlkIGluIHRoaXMuX3dhbGxzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dhbGxzW2lkXSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHlXYWxscysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAodGhpcy5fZHVnIC8gYXJlYSA8IHRoaXMuX29wdGlvbnMuZHVnUGVyY2VudGFnZSB8fCBwcmlvcml0eVdhbGxzKTsgLyogZml4bWUgbnVtYmVyIG9mIHByaW9yaXR5IHdhbGxzICovXG4gICAgICAgIHRoaXMuX2FkZERvb3JzKCk7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl93aWR0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9oZWlnaHQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhpLCBqLCB0aGlzLl9tYXBbaV1bal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93YWxscyA9IHt9O1xuICAgICAgICB0aGlzLl9tYXAgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIF9kaWdDYWxsYmFjayh4LCB5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gMCB8fCB2YWx1ZSA9PSAyKSB7IC8qIGVtcHR5ICovXG4gICAgICAgICAgICB0aGlzLl9tYXBbeF1beV0gPSAwO1xuICAgICAgICAgICAgdGhpcy5fZHVnKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8qIHdhbGwgKi9cbiAgICAgICAgICAgIHRoaXMuX3dhbGxzW3ggKyBcIixcIiArIHldID0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaXNXYWxsQ2FsbGJhY2soeCwgeSkge1xuICAgICAgICBpZiAoeCA8IDAgfHwgeSA8IDAgfHwgeCA+PSB0aGlzLl93aWR0aCB8fCB5ID49IHRoaXMuX2hlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5fbWFwW3hdW3ldID09IDEpO1xuICAgIH1cbiAgICBfY2FuQmVEdWdDYWxsYmFjayh4LCB5KSB7XG4gICAgICAgIGlmICh4IDwgMSB8fCB5IDwgMSB8fCB4ICsgMSA+PSB0aGlzLl93aWR0aCB8fCB5ICsgMSA+PSB0aGlzLl9oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMuX21hcFt4XVt5XSA9PSAxKTtcbiAgICB9XG4gICAgX3ByaW9yaXR5V2FsbENhbGxiYWNrKHgsIHkpIHsgdGhpcy5fd2FsbHNbeCArIFwiLFwiICsgeV0gPSAyOyB9XG4gICAgO1xuICAgIF9maXJzdFJvb20oKSB7XG4gICAgICAgIGxldCBjeCA9IE1hdGguZmxvb3IodGhpcy5fd2lkdGggLyAyKTtcbiAgICAgICAgbGV0IGN5ID0gTWF0aC5mbG9vcih0aGlzLl9oZWlnaHQgLyAyKTtcbiAgICAgICAgbGV0IHJvb20gPSBSb29tLmNyZWF0ZVJhbmRvbUNlbnRlcihjeCwgY3ksIHRoaXMuX29wdGlvbnMpO1xuICAgICAgICB0aGlzLl9yb29tcy5wdXNoKHJvb20pO1xuICAgICAgICByb29tLmNyZWF0ZSh0aGlzLl9kaWdDYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHN1aXRhYmxlIHdhbGxcbiAgICAgKi9cbiAgICBfZmluZFdhbGwoKSB7XG4gICAgICAgIGxldCBwcmlvMSA9IFtdO1xuICAgICAgICBsZXQgcHJpbzIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaWQgaW4gdGhpcy5fd2FsbHMpIHtcbiAgICAgICAgICAgIGxldCBwcmlvID0gdGhpcy5fd2FsbHNbaWRdO1xuICAgICAgICAgICAgaWYgKHByaW8gPT0gMikge1xuICAgICAgICAgICAgICAgIHByaW8yLnB1c2goaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJpbzEucHVzaChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyciA9IChwcmlvMi5sZW5ndGggPyBwcmlvMiA6IHByaW8xKTtcbiAgICAgICAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSAvKiBubyB3YWxscyA6LyAqL1xuICAgICAgICBsZXQgaWQgPSBSTkcuZ2V0SXRlbShhcnIuc29ydCgpKTsgLy8gc29ydCB0byBtYWtlIHRoZSBvcmRlciBkZXRlcm1pbmlzdGljXG4gICAgICAgIGRlbGV0ZSB0aGlzLl93YWxsc1tpZF07XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZXMgYWRkaW5nIGEgZmVhdHVyZVxuICAgICAqIEByZXR1cm5zIHtib29sfSB3YXMgdGhpcyBhIHN1Y2Nlc3NmdWwgdHJ5P1xuICAgICAqL1xuICAgIF90cnlGZWF0dXJlKHgsIHksIGR4LCBkeSkge1xuICAgICAgICBsZXQgZmVhdHVyZU5hbWUgPSBSTkcuZ2V0V2VpZ2h0ZWRWYWx1ZSh0aGlzLl9mZWF0dXJlcyk7XG4gICAgICAgIGxldCBjdG9yID0gRkVBVFVSRVNbZmVhdHVyZU5hbWVdO1xuICAgICAgICBsZXQgZmVhdHVyZSA9IGN0b3IuY3JlYXRlUmFuZG9tQXQoeCwgeSwgZHgsIGR5LCB0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgaWYgKCFmZWF0dXJlLmlzVmFsaWQodGhpcy5faXNXYWxsQ2FsbGJhY2ssIHRoaXMuX2NhbkJlRHVnQ2FsbGJhY2spKSB7XG4gICAgICAgICAgICAvL1x0XHRjb25zb2xlLmxvZyhcIm5vdCB2YWxpZFwiKTtcbiAgICAgICAgICAgIC8vXHRcdGZlYXR1cmUuZGVidWcoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmZWF0dXJlLmNyZWF0ZSh0aGlzLl9kaWdDYWxsYmFjayk7XG4gICAgICAgIC8vXHRmZWF0dXJlLmRlYnVnKCk7XG4gICAgICAgIGlmIChmZWF0dXJlIGluc3RhbmNlb2YgUm9vbSkge1xuICAgICAgICAgICAgdGhpcy5fcm9vbXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmVhdHVyZSBpbnN0YW5jZW9mIENvcnJpZG9yKSB7XG4gICAgICAgICAgICBmZWF0dXJlLmNyZWF0ZVByaW9yaXR5V2FsbHModGhpcy5fcHJpb3JpdHlXYWxsQ2FsbGJhY2spO1xuICAgICAgICAgICAgdGhpcy5fY29ycmlkb3JzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9yZW1vdmVTdXJyb3VuZGluZ1dhbGxzKGN4LCBjeSkge1xuICAgICAgICBsZXQgZGVsdGFzID0gRElSU1s0XTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWx0YXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkZWx0YSA9IGRlbHRhc1tpXTtcbiAgICAgICAgICAgIGxldCB4ID0gY3ggKyBkZWx0YVswXTtcbiAgICAgICAgICAgIGxldCB5ID0gY3kgKyBkZWx0YVsxXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl93YWxsc1t4ICsgXCIsXCIgKyB5XTtcbiAgICAgICAgICAgIHggPSBjeCArIDIgKiBkZWx0YVswXTtcbiAgICAgICAgICAgIHkgPSBjeSArIDIgKiBkZWx0YVsxXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl93YWxsc1t4ICsgXCIsXCIgKyB5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZlY3RvciBpbiBcImRpZ2dpbmdcIiBkaXJlY3Rpb24sIG9yIGZhbHNlLCBpZiB0aGlzIGRvZXMgbm90IGV4aXN0IChvciBpcyBub3QgdW5pcXVlKVxuICAgICAqL1xuICAgIF9nZXREaWdnaW5nRGlyZWN0aW9uKGN4LCBjeSkge1xuICAgICAgICBpZiAoY3ggPD0gMCB8fCBjeSA8PSAwIHx8IGN4ID49IHRoaXMuX3dpZHRoIC0gMSB8fCBjeSA+PSB0aGlzLl9oZWlnaHQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgbGV0IGRlbHRhcyA9IERJUlNbNF07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsdGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZGVsdGEgPSBkZWx0YXNbaV07XG4gICAgICAgICAgICBsZXQgeCA9IGN4ICsgZGVsdGFbMF07XG4gICAgICAgICAgICBsZXQgeSA9IGN5ICsgZGVsdGFbMV07XG4gICAgICAgICAgICBpZiAoIXRoaXMuX21hcFt4XVt5XSkgeyAvKiB0aGVyZSBhbHJlYWR5IGlzIGFub3RoZXIgZW1wdHkgbmVpZ2hib3IhICovXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVsdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyogbm8gZW1wdHkgbmVpZ2hib3IgKi9cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbLXJlc3VsdFswXSwgLXJlc3VsdFsxXV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQgZW1wdHkgc3BhY2VzIHN1cnJvdW5kaW5nIHJvb21zLCBhbmQgYXBwbHkgZG9vcnMuXG4gICAgICovXG4gICAgX2FkZERvb3JzKCkge1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuX21hcDtcbiAgICAgICAgZnVuY3Rpb24gaXNXYWxsQ2FsbGJhY2soeCwgeSkge1xuICAgICAgICAgICAgcmV0dXJuIChkYXRhW3hdW3ldID09IDEpO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yb29tcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvb20gPSB0aGlzLl9yb29tc1tpXTtcbiAgICAgICAgICAgIHJvb20uY2xlYXJEb29ycygpO1xuICAgICAgICAgICAgcm9vbS5hZGREb29ycyhpc1dhbGxDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgTWFwIGZyb20gXCIuL21hcC5qc1wiO1xuaW1wb3J0IFJORyBmcm9tIFwiLi4vcm5nLmpzXCI7XG4vKipcbiAqIEpvaW4gbGlzdHMgd2l0aCBcImlcIiBhbmQgXCJpKzFcIlxuICovXG5mdW5jdGlvbiBhZGRUb0xpc3QoaSwgTCwgUikge1xuICAgIFJbTFtpICsgMV1dID0gUltpXTtcbiAgICBMW1JbaV1dID0gTFtpICsgMV07XG4gICAgUltpXSA9IGkgKyAxO1xuICAgIExbaSArIDFdID0gaTtcbn1cbi8qKlxuICogUmVtb3ZlIFwiaVwiIGZyb20gaXRzIGxpc3RcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRnJvbUxpc3QoaSwgTCwgUikge1xuICAgIFJbTFtpXV0gPSBSW2ldO1xuICAgIExbUltpXV0gPSBMW2ldO1xuICAgIFJbaV0gPSBpO1xuICAgIExbaV0gPSBpO1xufVxuLyoqXG4gKiBNYXplIGdlbmVyYXRvciAtIEVsbGVyJ3MgYWxnb3JpdGhtXG4gKiBTZWUgaHR0cDovL2hvbWVwYWdlcy5jd2kubmwvfnRyb21wL21hemUuaHRtbCBmb3IgZXhwbGFuYXRpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxsZXJNYXplIGV4dGVuZHMgTWFwIHtcbiAgICBjcmVhdGUoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IG1hcCA9IHRoaXMuX2ZpbGxNYXAoMSk7XG4gICAgICAgIGxldCB3ID0gTWF0aC5jZWlsKCh0aGlzLl93aWR0aCAtIDIpIC8gMik7XG4gICAgICAgIGxldCByYW5kID0gOSAvIDI0O1xuICAgICAgICBsZXQgTCA9IFtdO1xuICAgICAgICBsZXQgUiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICAgICAgTC5wdXNoKGkpO1xuICAgICAgICAgICAgUi5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIEwucHVzaCh3IC0gMSk7IC8qIGZha2Ugc3RvcC1ibG9jayBhdCB0aGUgcmlnaHQgc2lkZSAqL1xuICAgICAgICBsZXQgajtcbiAgICAgICAgZm9yIChqID0gMTsgaiArIDMgPCB0aGlzLl9oZWlnaHQ7IGogKz0gMikge1xuICAgICAgICAgICAgLyogb25lIHJvdyAqL1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcbiAgICAgICAgICAgICAgICAvKiBjZWxsIGNvb3JkcyAod2lsbCBiZSBhbHdheXMgZW1wdHkpICovXG4gICAgICAgICAgICAgICAgbGV0IHggPSAyICogaSArIDE7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBqO1xuICAgICAgICAgICAgICAgIG1hcFt4XVt5XSA9IDA7XG4gICAgICAgICAgICAgICAgLyogcmlnaHQgY29ubmVjdGlvbiAqL1xuICAgICAgICAgICAgICAgIGlmIChpICE9IExbaSArIDFdICYmIFJORy5nZXRVbmlmb3JtKCkgPiByYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFRvTGlzdChpLCBMLCBSKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwW3ggKyAxXVt5XSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGJvdHRvbSBjb25uZWN0aW9uICovXG4gICAgICAgICAgICAgICAgaWYgKGkgIT0gTFtpXSAmJiBSTkcuZ2V0VW5pZm9ybSgpID4gcmFuZCkge1xuICAgICAgICAgICAgICAgICAgICAvKiByZW1vdmUgY29ubmVjdGlvbiAqL1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVGcm9tTGlzdChpLCBMLCBSKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIGNyZWF0ZSBjb25uZWN0aW9uICovXG4gICAgICAgICAgICAgICAgICAgIG1hcFt4XVt5ICsgMV0gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiBsYXN0IHJvdyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICAgICAgLyogY2VsbCBjb29yZHMgKHdpbGwgYmUgYWx3YXlzIGVtcHR5KSAqL1xuICAgICAgICAgICAgbGV0IHggPSAyICogaSArIDE7XG4gICAgICAgICAgICBsZXQgeSA9IGo7XG4gICAgICAgICAgICBtYXBbeF1beV0gPSAwO1xuICAgICAgICAgICAgLyogcmlnaHQgY29ubmVjdGlvbiAqL1xuICAgICAgICAgICAgaWYgKGkgIT0gTFtpICsgMV0gJiYgKGkgPT0gTFtpXSB8fCBSTkcuZ2V0VW5pZm9ybSgpID4gcmFuZCkpIHtcbiAgICAgICAgICAgICAgICAvKiBkaWcgcmlnaHQgYWxzbyBpZiB0aGUgY2VsbCBpcyBzZXBhcmF0ZWQsIHNvIGl0IGdldHMgY29ubmVjdGVkIHRvIHRoZSByZXN0IG9mIG1hemUgKi9cbiAgICAgICAgICAgICAgICBhZGRUb0xpc3QoaSwgTCwgUik7XG4gICAgICAgICAgICAgICAgbWFwW3ggKyAxXVt5XSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVGcm9tTGlzdChpLCBMLCBSKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3dpZHRoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5faGVpZ2h0OyBqKyspIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpLCBqLCBtYXBbaV1bal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiIsImltcG9ydCBBcmVuYSBmcm9tIFwiLi9hcmVuYS5qc1wiO1xuaW1wb3J0IFVuaWZvcm0gZnJvbSBcIi4vdW5pZm9ybS5qc1wiO1xuaW1wb3J0IENlbGx1bGFyIGZyb20gXCIuL2NlbGx1bGFyLmpzXCI7XG5pbXBvcnQgRGlnZ2VyIGZyb20gXCIuL2RpZ2dlci5qc1wiO1xuaW1wb3J0IEVsbGVyTWF6ZSBmcm9tIFwiLi9lbGxlcm1hemUuanNcIjtcbmltcG9ydCBEaXZpZGVkTWF6ZSBmcm9tIFwiLi9kaXZpZGVkbWF6ZS5qc1wiO1xuaW1wb3J0IEljZXlNYXplIGZyb20gXCIuL2ljZXltYXplLmpzXCI7XG5pbXBvcnQgUm9ndWUgZnJvbSBcIi4vcm9ndWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IHsgQXJlbmEsIFVuaWZvcm0sIENlbGx1bGFyLCBEaWdnZXIsIEVsbGVyTWF6ZSwgRGl2aWRlZE1hemUsIEljZXlNYXplLCBSb2d1ZSB9O1xuIiwiaW1wb3J0IE1hcCBmcm9tIFwiLi9tYXAuanNcIjtcbi8qKlxuICogQGNsYXNzIFNpbXBsZSBlbXB0eSByZWN0YW5ndWxhciByb29tXG4gKiBAYXVnbWVudHMgUk9ULk1hcFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcmVuYSBleHRlbmRzIE1hcCB7XG4gICAgY3JlYXRlKGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCB3ID0gdGhpcy5fd2lkdGggLSAxO1xuICAgICAgICBsZXQgaCA9IHRoaXMuX2hlaWdodCAtIDE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHc7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gaDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVtcHR5ID0gKGkgJiYgaiAmJiBpIDwgdyAmJiBqIDwgaCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaSwgaiwgZW1wdHkgPyAwIDogMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0IER1bmdlb24gZnJvbSBcIi4vZHVuZ2Vvbi5qc1wiO1xuaW1wb3J0IHsgUm9vbSwgQ29ycmlkb3IgfSBmcm9tIFwiLi9mZWF0dXJlcy5qc1wiO1xuaW1wb3J0IFJORyBmcm9tIFwiLi4vcm5nLmpzXCI7XG47XG4vKipcbiAqIEBjbGFzcyBEdW5nZW9uIGdlbmVyYXRvciB3aGljaCB0cmllcyB0byBmaWxsIHRoZSBzcGFjZSBldmVubHkuIEdlbmVyYXRlcyBpbmRlcGVuZGVudCByb29tcyBhbmQgdHJpZXMgdG8gY29ubmVjdCB0aGVtLlxuICogQGF1Z21lbnRzIFJPVC5NYXAuRHVuZ2VvblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbmlmb3JtIGV4dGVuZHMgRHVuZ2VvbiB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJvb21XaWR0aDogWzMsIDldLFxuICAgICAgICAgICAgcm9vbUhlaWdodDogWzMsIDVdLFxuICAgICAgICAgICAgcm9vbUR1Z1BlcmNlbnRhZ2U6IDAuMSxcbiAgICAgICAgICAgIHRpbWVMaW1pdDogMTAwMCAvKiB3ZSBzdG9wIGFmdGVyIHRoaXMgbXVjaCB0aW1lIGhhcyBwYXNzZWQgKG1zZWMpICovXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX21hcCA9IFtdO1xuICAgICAgICB0aGlzLl9kdWcgPSAwO1xuICAgICAgICB0aGlzLl9yb29tQXR0ZW1wdHMgPSAyMDsgLyogbmV3IHJvb20gaXMgY3JlYXRlZCBOLXRpbWVzIHVudGlsIGlzIGNvbnNpZGVyZWQgYXMgaW1wb3NzaWJsZSB0byBnZW5lcmF0ZSAqL1xuICAgICAgICB0aGlzLl9jb3JyaWRvckF0dGVtcHRzID0gMjA7IC8qIGNvcnJpZG9ycyBhcmUgdHJpZWQgTi10aW1lcyB1bnRpbCB0aGUgbGV2ZWwgaXMgY29uc2lkZXJlZCBhcyBpbXBvc3NpYmxlIHRvIGNvbm5lY3QgKi9cbiAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gW107IC8qIGxpc3Qgb2YgYWxyZWFkeSBjb25uZWN0ZWQgcm9vbXMgKi9cbiAgICAgICAgdGhpcy5fdW5jb25uZWN0ZWQgPSBbXTsgLyogbGlzdCBvZiByZW1haW5pbmcgdW5jb25uZWN0ZWQgcm9vbXMgKi9cbiAgICAgICAgdGhpcy5fZGlnQ2FsbGJhY2sgPSB0aGlzLl9kaWdDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9jYW5CZUR1Z0NhbGxiYWNrID0gdGhpcy5fY2FuQmVEdWdDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9pc1dhbGxDYWxsYmFjayA9IHRoaXMuX2lzV2FsbENhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG1hcC4gSWYgdGhlIHRpbWUgbGltaXQgaGFzIGJlZW4gaGl0LCByZXR1cm5zIG51bGwuXG4gICAgICogQHNlZSBST1QuTWFwI2NyZWF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZShjYWxsYmFjaykge1xuICAgICAgICBsZXQgdDEgPSBEYXRlLm5vdygpO1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgbGV0IHQyID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGlmICh0MiAtIHQxID4gdGhpcy5fb3B0aW9ucy50aW1lTGltaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0gLyogdGltZSBsaW1pdCEgKi9cbiAgICAgICAgICAgIHRoaXMuX21hcCA9IHRoaXMuX2ZpbGxNYXAoMSk7XG4gICAgICAgICAgICB0aGlzLl9kdWcgPSAwO1xuICAgICAgICAgICAgdGhpcy5fcm9vbXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3VuY29ubmVjdGVkID0gW107XG4gICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZVJvb21zKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fcm9vbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2dlbmVyYXRlQ29ycmlkb3JzKCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fd2lkdGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5faGVpZ2h0OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soaSwgaiwgdGhpcy5fbWFwW2ldW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHN1aXRhYmxlIGFtb3VudCBvZiByb29tc1xuICAgICAqL1xuICAgIF9nZW5lcmF0ZVJvb21zKCkge1xuICAgICAgICBsZXQgdyA9IHRoaXMuX3dpZHRoIC0gMjtcbiAgICAgICAgbGV0IGggPSB0aGlzLl9oZWlnaHQgLSAyO1xuICAgICAgICBsZXQgcm9vbTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgcm9vbSA9IHRoaXMuX2dlbmVyYXRlUm9vbSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2R1ZyAvICh3ICogaCkgPiB0aGlzLl9vcHRpb25zLnJvb21EdWdQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IC8qIGFjaGlldmVkIHJlcXVlc3RlZCBhbW91bnQgb2YgZnJlZSBzcGFjZSAqL1xuICAgICAgICB9IHdoaWxlIChyb29tKTtcbiAgICAgICAgLyogZWl0aGVyIGVub3VnaCByb29tcywgb3Igbm90IGFibGUgdG8gZ2VuZXJhdGUgbW9yZSBvZiB0aGVtIDopICovXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyeSB0byBnZW5lcmF0ZSBvbmUgcm9vbVxuICAgICAqL1xuICAgIF9nZW5lcmF0ZVJvb20oKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHdoaWxlIChjb3VudCA8IHRoaXMuX3Jvb21BdHRlbXB0cykge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIGxldCByb29tID0gUm9vbS5jcmVhdGVSYW5kb20odGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCwgdGhpcy5fb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoIXJvb20uaXNWYWxpZCh0aGlzLl9pc1dhbGxDYWxsYmFjaywgdGhpcy5fY2FuQmVEdWdDYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvb20uY3JlYXRlKHRoaXMuX2RpZ0NhbGxiYWNrKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb21zLnB1c2gocm9vbSk7XG4gICAgICAgICAgICByZXR1cm4gcm9vbTtcbiAgICAgICAgfVxuICAgICAgICAvKiBubyByb29tIHdhcyBnZW5lcmF0ZWQgaW4gYSBnaXZlbiBudW1iZXIgb2YgYXR0ZW1wdHMgKi9cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBjb25uZWN0b3JzIGJld2VlbiByb29tc1xuICAgICAqIEByZXR1cm5zIHtib29sfSBzdWNjZXNzIFdhcyB0aGlzIGF0dGVtcHQgc3VjY2Vzc2Z1bGw/XG4gICAgICovXG4gICAgX2dlbmVyYXRlQ29ycmlkb3JzKCkge1xuICAgICAgICBsZXQgY250ID0gMDtcbiAgICAgICAgd2hpbGUgKGNudCA8IHRoaXMuX2NvcnJpZG9yQXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIGNudCsrO1xuICAgICAgICAgICAgdGhpcy5fY29ycmlkb3JzID0gW107XG4gICAgICAgICAgICAvKiBkaWcgcm9vbXMgaW50byBhIGNsZWFyIG1hcCAqL1xuICAgICAgICAgICAgdGhpcy5fbWFwID0gdGhpcy5fZmlsbE1hcCgxKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcm9vbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcm9vbSA9IHRoaXMuX3Jvb21zW2ldO1xuICAgICAgICAgICAgICAgIHJvb20uY2xlYXJEb29ycygpO1xuICAgICAgICAgICAgICAgIHJvb20uY3JlYXRlKHRoaXMuX2RpZ0NhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3VuY29ubmVjdGVkID0gUk5HLnNodWZmbGUodGhpcy5fcm9vbXMuc2xpY2UoKSk7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLl91bmNvbm5lY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQucHVzaCh0aGlzLl91bmNvbm5lY3RlZC5wb3AoKSk7XG4gICAgICAgICAgICB9IC8qIGZpcnN0IG9uZSBpcyBhbHdheXMgY29ubmVjdGVkICovXG4gICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgIC8qIDEuIHBpY2sgcmFuZG9tIGNvbm5lY3RlZCByb29tICovXG4gICAgICAgICAgICAgICAgbGV0IGNvbm5lY3RlZCA9IFJORy5nZXRJdGVtKHRoaXMuX2Nvbm5lY3RlZCk7XG4gICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIDIuIGZpbmQgY2xvc2VzdCB1bmNvbm5lY3RlZCAqL1xuICAgICAgICAgICAgICAgIGxldCByb29tMSA9IHRoaXMuX2Nsb3Nlc3RSb29tKHRoaXMuX3VuY29ubmVjdGVkLCBjb25uZWN0ZWQpO1xuICAgICAgICAgICAgICAgIGlmICghcm9vbTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIDMuIGNvbm5lY3QgaXQgdG8gY2xvc2VzdCBjb25uZWN0ZWQgKi9cbiAgICAgICAgICAgICAgICBsZXQgcm9vbTIgPSB0aGlzLl9jbG9zZXN0Um9vbSh0aGlzLl9jb25uZWN0ZWQsIHJvb20xKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJvb20yKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgb2sgPSB0aGlzLl9jb25uZWN0Um9vbXMocm9vbTEsIHJvb20yKTtcbiAgICAgICAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gLyogc3RvcCBjb25uZWN0aW5nLCByZS1zaHVmZmxlICovXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl91bmNvbm5lY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSAvKiBkb25lOyBubyByb29tcyByZW1haW4gKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBGb3IgYSBnaXZlbiByb29tLCBmaW5kIHRoZSBjbG9zZXN0IG9uZSBmcm9tIHRoZSBsaXN0XG4gICAgICovXG4gICAgX2Nsb3Nlc3RSb29tKHJvb21zLCByb29tKSB7XG4gICAgICAgIGxldCBkaXN0ID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBjZW50ZXIgPSByb29tLmdldENlbnRlcigpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb29tcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHIgPSByb29tc1tpXTtcbiAgICAgICAgICAgIGxldCBjID0gci5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgIGxldCBkeCA9IGNbMF0gLSBjZW50ZXJbMF07XG4gICAgICAgICAgICBsZXQgZHkgPSBjWzFdIC0gY2VudGVyWzFdO1xuICAgICAgICAgICAgbGV0IGQgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgICAgIGlmIChkIDwgZGlzdCkge1xuICAgICAgICAgICAgICAgIGRpc3QgPSBkO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX2Nvbm5lY3RSb29tcyhyb29tMSwgcm9vbTIpIHtcbiAgICAgICAgLypcbiAgICAgICAgICAgIHJvb20xLmRlYnVnKCk7XG4gICAgICAgICAgICByb29tMi5kZWJ1ZygpO1xuICAgICAgICAqL1xuICAgICAgICBsZXQgY2VudGVyMSA9IHJvb20xLmdldENlbnRlcigpO1xuICAgICAgICBsZXQgY2VudGVyMiA9IHJvb20yLmdldENlbnRlcigpO1xuICAgICAgICBsZXQgZGlmZlggPSBjZW50ZXIyWzBdIC0gY2VudGVyMVswXTtcbiAgICAgICAgbGV0IGRpZmZZID0gY2VudGVyMlsxXSAtIGNlbnRlcjFbMV07XG4gICAgICAgIGxldCBzdGFydDtcbiAgICAgICAgbGV0IGVuZDtcbiAgICAgICAgbGV0IGRpckluZGV4MSwgZGlySW5kZXgyLCBtaW4sIG1heCwgaW5kZXg7XG4gICAgICAgIGlmIChNYXRoLmFicyhkaWZmWCkgPCBNYXRoLmFicyhkaWZmWSkpIHsgLyogZmlyc3QgdHJ5IGNvbm5lY3Rpbmcgbm9ydGgtc291dGggd2FsbHMgKi9cbiAgICAgICAgICAgIGRpckluZGV4MSA9IChkaWZmWSA+IDAgPyAyIDogMCk7XG4gICAgICAgICAgICBkaXJJbmRleDIgPSAoZGlySW5kZXgxICsgMikgJSA0O1xuICAgICAgICAgICAgbWluID0gcm9vbTIuZ2V0TGVmdCgpO1xuICAgICAgICAgICAgbWF4ID0gcm9vbTIuZ2V0UmlnaHQoKTtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLyogZmlyc3QgdHJ5IGNvbm5lY3RpbmcgZWFzdC13ZXN0IHdhbGxzICovXG4gICAgICAgICAgICBkaXJJbmRleDEgPSAoZGlmZlggPiAwID8gMSA6IDMpO1xuICAgICAgICAgICAgZGlySW5kZXgyID0gKGRpckluZGV4MSArIDIpICUgNDtcbiAgICAgICAgICAgIG1pbiA9IHJvb20yLmdldFRvcCgpO1xuICAgICAgICAgICAgbWF4ID0gcm9vbTIuZ2V0Qm90dG9tKCk7XG4gICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnQgPSB0aGlzLl9wbGFjZUluV2FsbChyb29tMSwgZGlySW5kZXgxKTsgLyogY29ycmlkb3Igd2lsbCBzdGFydCBoZXJlICovXG4gICAgICAgIGlmICghc3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRbaW5kZXhdID49IG1pbiAmJiBzdGFydFtpbmRleF0gPD0gbWF4KSB7IC8qIHBvc3NpYmxlIHRvIGNvbm5lY3Qgd2l0aCBzdHJhaWdodCBsaW5lIChJLWxpa2UpICovXG4gICAgICAgICAgICBlbmQgPSBzdGFydC5zbGljZSgpO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gMDtcbiAgICAgICAgICAgIHN3aXRjaCAoZGlySW5kZXgyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJvb20yLmdldFRvcCgpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJvb20yLmdldFJpZ2h0KCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcm9vbTIuZ2V0Qm90dG9tKCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcm9vbTIuZ2V0TGVmdCgpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmRbKGluZGV4ICsgMSkgJSAyXSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fZGlnTGluZShbc3RhcnQsIGVuZF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXJ0W2luZGV4XSA8IG1pbiAtIDEgfHwgc3RhcnRbaW5kZXhdID4gbWF4ICsgMSkgeyAvKiBuZWVkIHRvIHN3aXRjaCB0YXJnZXQgd2FsbCAoTC1saWtlKSAqL1xuICAgICAgICAgICAgbGV0IGRpZmYgPSBzdGFydFtpbmRleF0gLSBjZW50ZXIyW2luZGV4XTtcbiAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgICAgICAgICBzd2l0Y2ggKGRpckluZGV4Mikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gKGRpZmYgPCAwID8gMyA6IDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IChkaWZmIDwgMCA/IDEgOiAzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJJbmRleDIgPSAoZGlySW5kZXgyICsgcm90YXRpb24pICUgNDtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuX3BsYWNlSW5XYWxsKHJvb20yLCBkaXJJbmRleDIpO1xuICAgICAgICAgICAgaWYgKCFlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbWlkID0gWzAsIDBdO1xuICAgICAgICAgICAgbWlkW2luZGV4XSA9IHN0YXJ0W2luZGV4XTtcbiAgICAgICAgICAgIGxldCBpbmRleDIgPSAoaW5kZXggKyAxKSAlIDI7XG4gICAgICAgICAgICBtaWRbaW5kZXgyXSA9IGVuZFtpbmRleDJdO1xuICAgICAgICAgICAgdGhpcy5fZGlnTGluZShbc3RhcnQsIG1pZCwgZW5kXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8qIHVzZSBjdXJyZW50IHdhbGwgcGFpciwgYnV0IGFkanVzdCB0aGUgbGluZSBpbiB0aGUgbWlkZGxlIChTLWxpa2UpICovXG4gICAgICAgICAgICBsZXQgaW5kZXgyID0gKGluZGV4ICsgMSkgJSAyO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5fcGxhY2VJbldhbGwocm9vbTIsIGRpckluZGV4Mik7XG4gICAgICAgICAgICBpZiAoIWVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBtaWQgPSBNYXRoLnJvdW5kKChlbmRbaW5kZXgyXSArIHN0YXJ0W2luZGV4Ml0pIC8gMik7XG4gICAgICAgICAgICBsZXQgbWlkMSA9IFswLCAwXTtcbiAgICAgICAgICAgIGxldCBtaWQyID0gWzAsIDBdO1xuICAgICAgICAgICAgbWlkMVtpbmRleF0gPSBzdGFydFtpbmRleF07XG4gICAgICAgICAgICBtaWQxW2luZGV4Ml0gPSBtaWQ7XG4gICAgICAgICAgICBtaWQyW2luZGV4XSA9IGVuZFtpbmRleF07XG4gICAgICAgICAgICBtaWQyW2luZGV4Ml0gPSBtaWQ7XG4gICAgICAgICAgICB0aGlzLl9kaWdMaW5lKFtzdGFydCwgbWlkMSwgbWlkMiwgZW5kXSk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vbTEuYWRkRG9vcihzdGFydFswXSwgc3RhcnRbMV0pO1xuICAgICAgICByb29tMi5hZGREb29yKGVuZFswXSwgZW5kWzFdKTtcbiAgICAgICAgaW5kZXggPSB0aGlzLl91bmNvbm5lY3RlZC5pbmRleE9mKHJvb20xKTtcbiAgICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl91bmNvbm5lY3RlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkLnB1c2gocm9vbTEpO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gdGhpcy5fdW5jb25uZWN0ZWQuaW5kZXhPZihyb29tMik7XG4gICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fdW5jb25uZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZC5wdXNoKHJvb20yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BsYWNlSW5XYWxsKHJvb20sIGRpckluZGV4KSB7XG4gICAgICAgIGxldCBzdGFydCA9IFswLCAwXTtcbiAgICAgICAgbGV0IGRpciA9IFswLCAwXTtcbiAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgIHN3aXRjaCAoZGlySW5kZXgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBkaXIgPSBbMSwgMF07XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBbcm9vbS5nZXRMZWZ0KCksIHJvb20uZ2V0VG9wKCkgLSAxXTtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSByb29tLmdldFJpZ2h0KCkgLSByb29tLmdldExlZnQoKSArIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgZGlyID0gWzAsIDFdO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gW3Jvb20uZ2V0UmlnaHQoKSArIDEsIHJvb20uZ2V0VG9wKCldO1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHJvb20uZ2V0Qm90dG9tKCkgLSByb29tLmdldFRvcCgpICsgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBkaXIgPSBbMSwgMF07XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBbcm9vbS5nZXRMZWZ0KCksIHJvb20uZ2V0Qm90dG9tKCkgKyAxXTtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSByb29tLmdldFJpZ2h0KCkgLSByb29tLmdldExlZnQoKSArIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZGlyID0gWzAsIDFdO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gW3Jvb20uZ2V0TGVmdCgpIC0gMSwgcm9vbS5nZXRUb3AoKV07XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gcm9vbS5nZXRCb3R0b20oKSAtIHJvb20uZ2V0VG9wKCkgKyAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhdmFpbCA9IFtdO1xuICAgICAgICBsZXQgbGFzdEJhZEluZGV4ID0gLTI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4ID0gc3RhcnRbMF0gKyBpICogZGlyWzBdO1xuICAgICAgICAgICAgbGV0IHkgPSBzdGFydFsxXSArIGkgKiBkaXJbMV07XG4gICAgICAgICAgICBhdmFpbC5wdXNoKG51bGwpO1xuICAgICAgICAgICAgbGV0IGlzV2FsbCA9ICh0aGlzLl9tYXBbeF1beV0gPT0gMSk7XG4gICAgICAgICAgICBpZiAoaXNXYWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RCYWRJbmRleCAhPSBpIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBhdmFpbFtpXSA9IFt4LCB5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYXN0QmFkSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF2YWlsW2kgLSAxXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBhdmFpbC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKCFhdmFpbFtpXSkge1xuICAgICAgICAgICAgICAgIGF2YWlsLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGF2YWlsLmxlbmd0aCA/IFJORy5nZXRJdGVtKGF2YWlsKSA6IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaWcgYSBwb2x5bGluZS5cbiAgICAgKi9cbiAgICBfZGlnTGluZShwb2ludHMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHBvaW50c1tpIC0gMV07XG4gICAgICAgICAgICBsZXQgZW5kID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgbGV0IGNvcnJpZG9yID0gbmV3IENvcnJpZG9yKHN0YXJ0WzBdLCBzdGFydFsxXSwgZW5kWzBdLCBlbmRbMV0pO1xuICAgICAgICAgICAgY29ycmlkb3IuY3JlYXRlKHRoaXMuX2RpZ0NhbGxiYWNrKTtcbiAgICAgICAgICAgIHRoaXMuX2NvcnJpZG9ycy5wdXNoKGNvcnJpZG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGlnQ2FsbGJhY2soeCwgeSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFwW3hdW3ldID0gdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9kdWcrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaXNXYWxsQ2FsbGJhY2soeCwgeSkge1xuICAgICAgICBpZiAoeCA8IDAgfHwgeSA8IDAgfHwgeCA+PSB0aGlzLl93aWR0aCB8fCB5ID49IHRoaXMuX2hlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5fbWFwW3hdW3ldID09IDEpO1xuICAgIH1cbiAgICBfY2FuQmVEdWdDYWxsYmFjayh4LCB5KSB7XG4gICAgICAgIGlmICh4IDwgMSB8fCB5IDwgMSB8fCB4ICsgMSA+PSB0aGlzLl93aWR0aCB8fCB5ICsgMSA+PSB0aGlzLl9oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMuX21hcFt4XVt5XSA9PSAxKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgTWFwIGZyb20gXCIuL21hcC5qc1wiO1xuaW1wb3J0IHsgRElSUyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCBSTkcgZnJvbSBcIi4uL3JuZy5qc1wiO1xuO1xuLyoqXG4gKiBAY2xhc3MgQ2VsbHVsYXIgYXV0b21hdG9uIG1hcCBnZW5lcmF0b3JcbiAqIEBhdWdtZW50cyBST1QuTWFwXG4gKiBAcGFyYW0ge2ludH0gW3dpZHRoPVJPVC5ERUZBVUxUX1dJRFRIXVxuICogQHBhcmFtIHtpbnR9IFtoZWlnaHQ9Uk9ULkRFRkFVTFRfSEVJR0hUXVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zXG4gKiBAcGFyYW0ge2ludFtdfSBbb3B0aW9ucy5ib3JuXSBMaXN0IG9mIG5laWdoYm9yIGNvdW50cyBmb3IgYSBuZXcgY2VsbCB0byBiZSBib3JuIGluIGVtcHR5IHNwYWNlXG4gKiBAcGFyYW0ge2ludFtdfSBbb3B0aW9ucy5zdXJ2aXZlXSBMaXN0IG9mIG5laWdoYm9yIGNvdW50cyBmb3IgYW4gZXhpc3RpbmcgIGNlbGwgdG8gc3Vydml2ZVxuICogQHBhcmFtIHtpbnR9IFtvcHRpb25zLnRvcG9sb2d5XSBUb3BvbG9neSA0IG9yIDYgb3IgOFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDZWxsdWxhciBleHRlbmRzIE1hcCB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgICAgICAgYm9ybjogWzUsIDYsIDcsIDhdLFxuICAgICAgICAgICAgc3Vydml2ZTogWzQsIDUsIDYsIDcsIDhdLFxuICAgICAgICAgICAgdG9wb2xvZ3k6IDhcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9kaXJzID0gRElSU1t0aGlzLl9vcHRpb25zLnRvcG9sb2d5XTtcbiAgICAgICAgdGhpcy5fbWFwID0gdGhpcy5fZmlsbE1hcCgwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsbCB0aGUgbWFwIHdpdGggcmFuZG9tIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7ZmxvYXR9IHByb2JhYmlsaXR5IFByb2JhYmlsaXR5IGZvciBhIGNlbGwgdG8gYmVjb21lIGFsaXZlOyAwID0gYWxsIGVtcHR5LCAxID0gYWxsIGZ1bGxcbiAgICAgKi9cbiAgICByYW5kb21pemUocHJvYmFiaWxpdHkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl93aWR0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2hlaWdodDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwW2ldW2pdID0gKFJORy5nZXRVbmlmb3JtKCkgPCBwcm9iYWJpbGl0eSA/IDEgOiAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIG9wdGlvbnMuXG4gICAgICogQHNlZSBST1QuTWFwLkNlbGx1bGFyXG4gICAgICovXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7IE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7IH1cbiAgICBzZXQoeCwgeSwgdmFsdWUpIHsgdGhpcy5fbWFwW3hdW3ldID0gdmFsdWU7IH1cbiAgICBjcmVhdGUoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IG5ld01hcCA9IHRoaXMuX2ZpbGxNYXAoMCk7XG4gICAgICAgIGxldCBib3JuID0gdGhpcy5fb3B0aW9ucy5ib3JuO1xuICAgICAgICBsZXQgc3Vydml2ZSA9IHRoaXMuX29wdGlvbnMuc3Vydml2ZTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9oZWlnaHQ7IGorKykge1xuICAgICAgICAgICAgbGV0IHdpZHRoU3RlcCA9IDE7XG4gICAgICAgICAgICBsZXQgd2lkdGhTdGFydCA9IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50b3BvbG9neSA9PSA2KSB7XG4gICAgICAgICAgICAgICAgd2lkdGhTdGVwID0gMjtcbiAgICAgICAgICAgICAgICB3aWR0aFN0YXJ0ID0gaiAlIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gd2lkdGhTdGFydDsgaSA8IHRoaXMuX3dpZHRoOyBpICs9IHdpZHRoU3RlcCkge1xuICAgICAgICAgICAgICAgIGxldCBjdXIgPSB0aGlzLl9tYXBbaV1bal07XG4gICAgICAgICAgICAgICAgbGV0IG5jb3VudCA9IHRoaXMuX2dldE5laWdoYm9ycyhpLCBqKTtcbiAgICAgICAgICAgICAgICBpZiAoY3VyICYmIHN1cnZpdmUuaW5kZXhPZihuY291bnQpICE9IC0xKSB7IC8qIHN1cnZpdmUgKi9cbiAgICAgICAgICAgICAgICAgICAgbmV3TWFwW2ldW2pdID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWN1ciAmJiBib3JuLmluZGV4T2YobmNvdW50KSAhPSAtMSkgeyAvKiBib3JuICovXG4gICAgICAgICAgICAgICAgICAgIG5ld01hcFtpXVtqXSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgICAgY2FsbGJhY2sgJiYgdGhpcy5fc2VydmljZUNhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgX3NlcnZpY2VDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2hlaWdodDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgd2lkdGhTdGVwID0gMTtcbiAgICAgICAgICAgIGxldCB3aWR0aFN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRvcG9sb2d5ID09IDYpIHtcbiAgICAgICAgICAgICAgICB3aWR0aFN0ZXAgPSAyO1xuICAgICAgICAgICAgICAgIHdpZHRoU3RhcnQgPSBqICUgMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB3aWR0aFN0YXJ0OyBpIDwgdGhpcy5fd2lkdGg7IGkgKz0gd2lkdGhTdGVwKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaSwgaiwgdGhpcy5fbWFwW2ldW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgbmVpZ2hib3IgY291bnQgYXQgW2ksal0gaW4gdGhpcy5fbWFwXG4gICAgICovXG4gICAgX2dldE5laWdoYm9ycyhjeCwgY3kpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZGlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRpciA9IHRoaXMuX2RpcnNbaV07XG4gICAgICAgICAgICBsZXQgeCA9IGN4ICsgZGlyWzBdO1xuICAgICAgICAgICAgbGV0IHkgPSBjeSArIGRpclsxXTtcbiAgICAgICAgICAgIGlmICh4IDwgMCB8fCB4ID49IHRoaXMuX3dpZHRoIHx8IHkgPCAwIHx8IHkgPj0gdGhpcy5faGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gKHRoaXMuX21hcFt4XVt5XSA9PSAxID8gMSA6IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSBldmVyeSBub24td2FsbCBzcGFjZSBpcyBhY2Nlc3NpYmxlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIHRvIGNhbGwgdG8gZGlzcGxheSBtYXAgd2hlbiBkb1xuICAgICAqIEBwYXJhbSB7aW50fSB2YWx1ZSB0byBjb25zaWRlciBlbXB0eSBzcGFjZSAtIGRlZmF1bHRzIHRvIDBcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayB0byBjYWxsIHdoZW4gYSBuZXcgY29ubmVjdGlvbiBpcyBtYWRlXG4gICAgICovXG4gICAgY29ubmVjdChjYWxsYmFjaywgdmFsdWUsIGNvbm5lY3Rpb25DYWxsYmFjaykge1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICBsZXQgYWxsRnJlZVNwYWNlID0gW107XG4gICAgICAgIGxldCBub3RDb25uZWN0ZWQgPSB7fTtcbiAgICAgICAgLy8gZmluZCBhbGwgZnJlZSBzcGFjZVxuICAgICAgICBsZXQgd2lkdGhTdGVwID0gMTtcbiAgICAgICAgbGV0IHdpZHRoU3RhcnRzID0gWzAsIDBdO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50b3BvbG9neSA9PSA2KSB7XG4gICAgICAgICAgICB3aWR0aFN0ZXAgPSAyO1xuICAgICAgICAgICAgd2lkdGhTdGFydHMgPSBbMCwgMV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLl9oZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IHdpZHRoU3RhcnRzW3kgJSAyXTsgeCA8IHRoaXMuX3dpZHRoOyB4ICs9IHdpZHRoU3RlcCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmVlU3BhY2UoeCwgeSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gW3gsIHldO1xuICAgICAgICAgICAgICAgICAgICBub3RDb25uZWN0ZWRbdGhpcy5fcG9pbnRLZXkocCldID0gcDtcbiAgICAgICAgICAgICAgICAgICAgYWxsRnJlZVNwYWNlLnB1c2goW3gsIHldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0ID0gYWxsRnJlZVNwYWNlW1JORy5nZXRVbmlmb3JtSW50KDAsIGFsbEZyZWVTcGFjZS5sZW5ndGggLSAxKV07XG4gICAgICAgIGxldCBrZXkgPSB0aGlzLl9wb2ludEtleShzdGFydCk7XG4gICAgICAgIGxldCBjb25uZWN0ZWQgPSB7fTtcbiAgICAgICAgY29ubmVjdGVkW2tleV0gPSBzdGFydDtcbiAgICAgICAgZGVsZXRlIG5vdENvbm5lY3RlZFtrZXldO1xuICAgICAgICAvLyBmaW5kIHdoYXQncyBjb25uZWN0ZWQgdG8gdGhlIHN0YXJ0aW5nIHBvaW50XG4gICAgICAgIHRoaXMuX2ZpbmRDb25uZWN0ZWQoY29ubmVjdGVkLCBub3RDb25uZWN0ZWQsIFtzdGFydF0sIGZhbHNlLCB2YWx1ZSk7XG4gICAgICAgIHdoaWxlIChPYmplY3Qua2V5cyhub3RDb25uZWN0ZWQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGZpbmQgdHdvIHBvaW50cyBmcm9tIG5vdENvbm5lY3RlZCB0byBjb25uZWN0ZWRcbiAgICAgICAgICAgIGxldCBwID0gdGhpcy5fZ2V0RnJvbVRvKGNvbm5lY3RlZCwgbm90Q29ubmVjdGVkKTtcbiAgICAgICAgICAgIGxldCBmcm9tID0gcFswXTsgLy8gbm90Q29ubmVjdGVkXG4gICAgICAgICAgICBsZXQgdG8gPSBwWzFdOyAvLyBjb25uZWN0ZWRcbiAgICAgICAgICAgIC8vIGZpbmQgZXZlcnl0aGluZyBjb25uZWN0ZWQgdG8gdGhlIHN0YXJ0aW5nIHBvaW50XG4gICAgICAgICAgICBsZXQgbG9jYWwgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsW3RoaXMuX3BvaW50S2V5KGZyb20pXSA9IGZyb207XG4gICAgICAgICAgICB0aGlzLl9maW5kQ29ubmVjdGVkKGxvY2FsLCBub3RDb25uZWN0ZWQsIFtmcm9tXSwgdHJ1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgLy8gY29ubmVjdCB0byBhIGNvbm5lY3RlZCBjZWxsXG4gICAgICAgICAgICBsZXQgdHVubmVsRm4gPSAodGhpcy5fb3B0aW9ucy50b3BvbG9neSA9PSA2ID8gdGhpcy5fdHVubmVsVG9Db25uZWN0ZWQ2IDogdGhpcy5fdHVubmVsVG9Db25uZWN0ZWQpO1xuICAgICAgICAgICAgdHVubmVsRm4uY2FsbCh0aGlzLCB0bywgZnJvbSwgY29ubmVjdGVkLCBub3RDb25uZWN0ZWQsIHZhbHVlLCBjb25uZWN0aW9uQ2FsbGJhY2spO1xuICAgICAgICAgICAgLy8gbm93IGFsbCBvZiBsb2NhbCBpcyBjb25uZWN0ZWRcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gbG9jYWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHAgPSBsb2NhbFtrXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXBbcHBbMF1dW3BwWzFdXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbm5lY3RlZFtrXSA9IHBwO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBub3RDb25uZWN0ZWRba107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sgJiYgdGhpcy5fc2VydmljZUNhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCByYW5kb20gcG9pbnRzIHRvIGNvbm5lY3QuIFNlYXJjaCBmb3IgdGhlIGNsb3Nlc3QgcG9pbnQgaW4gdGhlIGxhcmdlciBzcGFjZS5cbiAgICAgKiBUaGlzIGlzIHRvIG1pbmltaXplIHRoZSBsZW5ndGggb2YgdGhlIHBhc3NhZ2Ugd2hpbGUgbWFpbnRhaW5pbmcgZ29vZCBwZXJmb3JtYW5jZS5cbiAgICAgKi9cbiAgICBfZ2V0RnJvbVRvKGNvbm5lY3RlZCwgbm90Q29ubmVjdGVkKSB7XG4gICAgICAgIGxldCBmcm9tID0gWzAsIDBdLCB0byA9IFswLCAwXSwgZDtcbiAgICAgICAgbGV0IGNvbm5lY3RlZEtleXMgPSBPYmplY3Qua2V5cyhjb25uZWN0ZWQpO1xuICAgICAgICBsZXQgbm90Q29ubmVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKG5vdENvbm5lY3RlZCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGVkS2V5cy5sZW5ndGggPCBub3RDb25uZWN0ZWRLZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCBrZXlzID0gY29ubmVjdGVkS2V5cztcbiAgICAgICAgICAgICAgICB0byA9IGNvbm5lY3RlZFtrZXlzW1JORy5nZXRVbmlmb3JtSW50KDAsIGtleXMubGVuZ3RoIC0gMSldXTtcbiAgICAgICAgICAgICAgICBmcm9tID0gdGhpcy5fZ2V0Q2xvc2VzdCh0bywgbm90Q29ubmVjdGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBrZXlzID0gbm90Q29ubmVjdGVkS2V5cztcbiAgICAgICAgICAgICAgICBmcm9tID0gbm90Q29ubmVjdGVkW2tleXNbUk5HLmdldFVuaWZvcm1JbnQoMCwga2V5cy5sZW5ndGggLSAxKV1dO1xuICAgICAgICAgICAgICAgIHRvID0gdGhpcy5fZ2V0Q2xvc2VzdChmcm9tLCBjb25uZWN0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZCA9IChmcm9tWzBdIC0gdG9bMF0pICogKGZyb21bMF0gLSB0b1swXSkgKyAoZnJvbVsxXSAtIHRvWzFdKSAqIChmcm9tWzFdIC0gdG9bMV0pO1xuICAgICAgICAgICAgaWYgKGQgPCA2NCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiPj4+IGNvbm5lY3RlZD1cIiArIHRvICsgXCIgbm90Q29ubmVjdGVkPVwiICsgZnJvbSArIFwiIGRpc3Q9XCIgKyBkKTtcbiAgICAgICAgcmV0dXJuIFtmcm9tLCB0b107XG4gICAgfVxuICAgIF9nZXRDbG9zZXN0KHBvaW50LCBzcGFjZSkge1xuICAgICAgICBsZXQgbWluUG9pbnQgPSBudWxsO1xuICAgICAgICBsZXQgbWluRGlzdCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGsgaW4gc3BhY2UpIHtcbiAgICAgICAgICAgIGxldCBwID0gc3BhY2Vba107XG4gICAgICAgICAgICBsZXQgZCA9IChwWzBdIC0gcG9pbnRbMF0pICogKHBbMF0gLSBwb2ludFswXSkgKyAocFsxXSAtIHBvaW50WzFdKSAqIChwWzFdIC0gcG9pbnRbMV0pO1xuICAgICAgICAgICAgaWYgKG1pbkRpc3QgPT0gbnVsbCB8fCBkIDwgbWluRGlzdCkge1xuICAgICAgICAgICAgICAgIG1pbkRpc3QgPSBkO1xuICAgICAgICAgICAgICAgIG1pblBvaW50ID0gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluUG9pbnQ7XG4gICAgfVxuICAgIF9maW5kQ29ubmVjdGVkKGNvbm5lY3RlZCwgbm90Q29ubmVjdGVkLCBzdGFjaywga2VlcE5vdENvbm5lY3RlZCwgdmFsdWUpIHtcbiAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBwID0gc3RhY2suc3BsaWNlKDAsIDEpWzBdO1xuICAgICAgICAgICAgbGV0IHRlc3RzO1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudG9wb2xvZ3kgPT0gNikge1xuICAgICAgICAgICAgICAgIHRlc3RzID0gW1xuICAgICAgICAgICAgICAgICAgICBbcFswXSArIDIsIHBbMV1dLFxuICAgICAgICAgICAgICAgICAgICBbcFswXSArIDEsIHBbMV0gLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgW3BbMF0gLSAxLCBwWzFdIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgIFtwWzBdIC0gMiwgcFsxXV0sXG4gICAgICAgICAgICAgICAgICAgIFtwWzBdIC0gMSwgcFsxXSArIDFdLFxuICAgICAgICAgICAgICAgICAgICBbcFswXSArIDEsIHBbMV0gKyAxXSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGVzdHMgPSBbXG4gICAgICAgICAgICAgICAgICAgIFtwWzBdICsgMSwgcFsxXV0sXG4gICAgICAgICAgICAgICAgICAgIFtwWzBdIC0gMSwgcFsxXV0sXG4gICAgICAgICAgICAgICAgICAgIFtwWzBdLCBwWzFdICsgMV0sXG4gICAgICAgICAgICAgICAgICAgIFtwWzBdLCBwWzFdIC0gMV1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSB0aGlzLl9wb2ludEtleSh0ZXN0c1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3RlZFtrZXldID09IG51bGwgJiYgdGhpcy5fZnJlZVNwYWNlKHRlc3RzW2ldWzBdLCB0ZXN0c1tpXVsxXSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RlZFtrZXldID0gdGVzdHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICgha2VlcE5vdENvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vdENvbm5lY3RlZFtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGVzdHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfdHVubmVsVG9Db25uZWN0ZWQodG8sIGZyb20sIGNvbm5lY3RlZCwgbm90Q29ubmVjdGVkLCB2YWx1ZSwgY29ubmVjdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBhLCBiO1xuICAgICAgICBpZiAoZnJvbVswXSA8IHRvWzBdKSB7XG4gICAgICAgICAgICBhID0gZnJvbTtcbiAgICAgICAgICAgIGIgPSB0bztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGEgPSB0bztcbiAgICAgICAgICAgIGIgPSBmcm9tO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHh4ID0gYVswXTsgeHggPD0gYlswXTsgeHgrKykge1xuICAgICAgICAgICAgdGhpcy5fbWFwW3h4XVthWzFdXSA9IHZhbHVlO1xuICAgICAgICAgICAgbGV0IHAgPSBbeHgsIGFbMV1dO1xuICAgICAgICAgICAgbGV0IHBrZXkgPSB0aGlzLl9wb2ludEtleShwKTtcbiAgICAgICAgICAgIGNvbm5lY3RlZFtwa2V5XSA9IHA7XG4gICAgICAgICAgICBkZWxldGUgbm90Q29ubmVjdGVkW3BrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25uZWN0aW9uQ2FsbGJhY2sgJiYgYVswXSA8IGJbMF0pIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DYWxsYmFjayhhLCBbYlswXSwgYVsxXV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHggaXMgbm93IGZpeGVkXG4gICAgICAgIGxldCB4ID0gYlswXTtcbiAgICAgICAgaWYgKGZyb21bMV0gPCB0b1sxXSkge1xuICAgICAgICAgICAgYSA9IGZyb207XG4gICAgICAgICAgICBiID0gdG87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhID0gdG87XG4gICAgICAgICAgICBiID0gZnJvbTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB5eSA9IGFbMV07IHl5IDwgYlsxXTsgeXkrKykge1xuICAgICAgICAgICAgdGhpcy5fbWFwW3hdW3l5XSA9IHZhbHVlO1xuICAgICAgICAgICAgbGV0IHAgPSBbeCwgeXldO1xuICAgICAgICAgICAgbGV0IHBrZXkgPSB0aGlzLl9wb2ludEtleShwKTtcbiAgICAgICAgICAgIGNvbm5lY3RlZFtwa2V5XSA9IHA7XG4gICAgICAgICAgICBkZWxldGUgbm90Q29ubmVjdGVkW3BrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25uZWN0aW9uQ2FsbGJhY2sgJiYgYVsxXSA8IGJbMV0pIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DYWxsYmFjayhbYlswXSwgYVsxXV0sIFtiWzBdLCBiWzFdXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3R1bm5lbFRvQ29ubmVjdGVkNih0bywgZnJvbSwgY29ubmVjdGVkLCBub3RDb25uZWN0ZWQsIHZhbHVlLCBjb25uZWN0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGEsIGI7XG4gICAgICAgIGlmIChmcm9tWzBdIDwgdG9bMF0pIHtcbiAgICAgICAgICAgIGEgPSBmcm9tO1xuICAgICAgICAgICAgYiA9IHRvO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYSA9IHRvO1xuICAgICAgICAgICAgYiA9IGZyb207XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHVubmVsIGRpYWdvbmFsbHkgdW50aWwgaG9yaXpvbnRhbGx5IGxldmVsXG4gICAgICAgIGxldCB4eCA9IGFbMF07XG4gICAgICAgIGxldCB5eSA9IGFbMV07XG4gICAgICAgIHdoaWxlICghKHh4ID09IGJbMF0gJiYgeXkgPT0gYlsxXSkpIHtcbiAgICAgICAgICAgIGxldCBzdGVwV2lkdGggPSAyO1xuICAgICAgICAgICAgaWYgKHl5IDwgYlsxXSkge1xuICAgICAgICAgICAgICAgIHl5Kys7XG4gICAgICAgICAgICAgICAgc3RlcFdpZHRoID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHl5ID4gYlsxXSkge1xuICAgICAgICAgICAgICAgIHl5LS07XG4gICAgICAgICAgICAgICAgc3RlcFdpZHRoID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4eCA8IGJbMF0pIHtcbiAgICAgICAgICAgICAgICB4eCArPSBzdGVwV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh4eCA+IGJbMF0pIHtcbiAgICAgICAgICAgICAgICB4eCAtPSBzdGVwV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiWzFdICUgMikge1xuICAgICAgICAgICAgICAgIC8vIFdvbid0IHN0ZXAgb3V0c2lkZSBtYXAgaWYgZGVzdGluYXRpb24gb24gaXMgbWFwJ3MgcmlnaHQgZWRnZVxuICAgICAgICAgICAgICAgIHh4IC09IHN0ZXBXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRpdHRvIGZvciBsZWZ0IGVkZ2VcbiAgICAgICAgICAgICAgICB4eCArPSBzdGVwV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXBbeHhdW3l5XSA9IHZhbHVlO1xuICAgICAgICAgICAgbGV0IHAgPSBbeHgsIHl5XTtcbiAgICAgICAgICAgIGxldCBwa2V5ID0gdGhpcy5fcG9pbnRLZXkocCk7XG4gICAgICAgICAgICBjb25uZWN0ZWRbcGtleV0gPSBwO1xuICAgICAgICAgICAgZGVsZXRlIG5vdENvbm5lY3RlZFtwa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29ubmVjdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uQ2FsbGJhY2soZnJvbSwgdG8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9mcmVlU3BhY2UoeCwgeSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHggPj0gMCAmJiB4IDwgdGhpcy5fd2lkdGggJiYgeSA+PSAwICYmIHkgPCB0aGlzLl9oZWlnaHQgJiYgdGhpcy5fbWFwW3hdW3ldID09IHZhbHVlO1xuICAgIH1cbiAgICBfcG9pbnRLZXkocCkgeyByZXR1cm4gcFswXSArIFwiLlwiICsgcFsxXTsgfVxufVxuIiwiaW1wb3J0IE1hcCBmcm9tIFwiLi9tYXAuanNcIjtcbmltcG9ydCBSTkcgZnJvbSBcIi4uL3JuZy5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgUmVjdXJzaXZlbHkgZGl2aWRlZCBtYXplLCBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01hemVfZ2VuZXJhdGlvbl9hbGdvcml0aG0jUmVjdXJzaXZlX2RpdmlzaW9uX21ldGhvZFxuICogQGF1Z21lbnRzIFJPVC5NYXBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGl2aWRlZE1hemUgZXh0ZW5kcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9zdGFjayA9IFtdO1xuICAgICAgICB0aGlzLl9tYXAgPSBbXTtcbiAgICB9XG4gICAgY3JlYXRlKGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCB3ID0gdGhpcy5fd2lkdGg7XG4gICAgICAgIGxldCBoID0gdGhpcy5faGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXAgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5wdXNoKFtdKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJvcmRlciA9IChpID09IDAgfHwgaiA9PSAwIHx8IGkgKyAxID09IHcgfHwgaiArIDEgPT0gaCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwW2ldLnB1c2goYm9yZGVyID8gMSA6IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YWNrID0gW1xuICAgICAgICAgICAgWzEsIDEsIHcgLSAyLCBoIC0gMl1cbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpLCBqLCB0aGlzLl9tYXBbaV1bal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcCA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgX3Byb2Nlc3MoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9zdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCByb29tID0gdGhpcy5fc3RhY2suc2hpZnQoKTsgLyogW2xlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbV0gKi9cbiAgICAgICAgICAgIHRoaXMuX3BhcnRpdGlvblJvb20ocm9vbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3BhcnRpdGlvblJvb20ocm9vbSkge1xuICAgICAgICBsZXQgYXZhaWxYID0gW107XG4gICAgICAgIGxldCBhdmFpbFkgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvb21bMF0gKyAxOyBpIDwgcm9vbVsyXTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdG9wID0gdGhpcy5fbWFwW2ldW3Jvb21bMV0gLSAxXTtcbiAgICAgICAgICAgIGxldCBib3R0b20gPSB0aGlzLl9tYXBbaV1bcm9vbVszXSArIDFdO1xuICAgICAgICAgICAgaWYgKHRvcCAmJiBib3R0b20gJiYgIShpICUgMikpIHtcbiAgICAgICAgICAgICAgICBhdmFpbFgucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBqID0gcm9vbVsxXSArIDE7IGogPCByb29tWzNdOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBsZWZ0ID0gdGhpcy5fbWFwW3Jvb21bMF0gLSAxXVtqXTtcbiAgICAgICAgICAgIGxldCByaWdodCA9IHRoaXMuX21hcFtyb29tWzJdICsgMV1bal07XG4gICAgICAgICAgICBpZiAobGVmdCAmJiByaWdodCAmJiAhKGogJSAyKSkge1xuICAgICAgICAgICAgICAgIGF2YWlsWS5wdXNoKGopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYXZhaWxYLmxlbmd0aCB8fCAhYXZhaWxZLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4ID0gUk5HLmdldEl0ZW0oYXZhaWxYKTtcbiAgICAgICAgbGV0IHkgPSBSTkcuZ2V0SXRlbShhdmFpbFkpO1xuICAgICAgICB0aGlzLl9tYXBbeF1beV0gPSAxO1xuICAgICAgICBsZXQgd2FsbHMgPSBbXTtcbiAgICAgICAgbGV0IHcgPSBbXTtcbiAgICAgICAgd2FsbHMucHVzaCh3KTsgLyogbGVmdCBwYXJ0ICovXG4gICAgICAgIGZvciAobGV0IGkgPSByb29tWzBdOyBpIDwgeDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXBbaV1beV0gPSAxO1xuICAgICAgICAgICAgdy5wdXNoKFtpLCB5XSk7XG4gICAgICAgIH1cbiAgICAgICAgdyA9IFtdO1xuICAgICAgICB3YWxscy5wdXNoKHcpOyAvKiByaWdodCBwYXJ0ICovXG4gICAgICAgIGZvciAobGV0IGkgPSB4ICsgMTsgaSA8PSByb29tWzJdOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX21hcFtpXVt5XSA9IDE7XG4gICAgICAgICAgICB3LnB1c2goW2ksIHldKTtcbiAgICAgICAgfVxuICAgICAgICB3ID0gW107XG4gICAgICAgIHdhbGxzLnB1c2godyk7IC8qIHRvcCBwYXJ0ICovXG4gICAgICAgIGZvciAobGV0IGogPSByb29tWzFdOyBqIDwgeTsgaisrKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXBbeF1bal0gPSAxO1xuICAgICAgICAgICAgdy5wdXNoKFt4LCBqXSk7XG4gICAgICAgIH1cbiAgICAgICAgdyA9IFtdO1xuICAgICAgICB3YWxscy5wdXNoKHcpOyAvKiBib3R0b20gcGFydCAqL1xuICAgICAgICBmb3IgKGxldCBqID0geSArIDE7IGogPD0gcm9vbVszXTsgaisrKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXBbeF1bal0gPSAxO1xuICAgICAgICAgICAgdy5wdXNoKFt4LCBqXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvbGlkID0gUk5HLmdldEl0ZW0od2FsbHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdhbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdyA9IHdhbGxzW2ldO1xuICAgICAgICAgICAgaWYgKHcgPT0gc29saWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBob2xlID0gUk5HLmdldEl0ZW0odyk7XG4gICAgICAgICAgICB0aGlzLl9tYXBbaG9sZVswXV1baG9sZVsxXV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YWNrLnB1c2goW3Jvb21bMF0sIHJvb21bMV0sIHggLSAxLCB5IC0gMV0pOyAvKiBsZWZ0IHRvcCAqL1xuICAgICAgICB0aGlzLl9zdGFjay5wdXNoKFt4ICsgMSwgcm9vbVsxXSwgcm9vbVsyXSwgeSAtIDFdKTsgLyogcmlnaHQgdG9wICovXG4gICAgICAgIHRoaXMuX3N0YWNrLnB1c2goW3Jvb21bMF0sIHkgKyAxLCB4IC0gMSwgcm9vbVszXV0pOyAvKiBsZWZ0IGJvdHRvbSAqL1xuICAgICAgICB0aGlzLl9zdGFjay5wdXNoKFt4ICsgMSwgeSArIDEsIHJvb21bMl0sIHJvb21bM11dKTsgLyogcmlnaHQgYm90dG9tICovXG4gICAgfVxufVxuIiwiaW1wb3J0IE1hcCBmcm9tIFwiLi9tYXAuanNcIjtcbmltcG9ydCBSTkcgZnJvbSBcIi4uL3JuZy5qc1wiO1xuLyoqXG4gKiBJY2V5J3MgTWF6ZSBnZW5lcmF0b3JcbiAqIFNlZSBodHRwOi8vd3d3LnJvZ3VlYmFzaW4ucm9ndWVsaWtlZGV2ZWxvcG1lbnQub3JnL2luZGV4LnBocD90aXRsZT1TaW1wbGVfbWF6ZSBmb3IgZXhwbGFuYXRpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNleU1hemUgZXh0ZW5kcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHJlZ3VsYXJpdHkgPSAwKSB7XG4gICAgICAgIHN1cGVyKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLl9yZWd1bGFyaXR5ID0gcmVndWxhcml0eTtcbiAgICAgICAgdGhpcy5fbWFwID0gW107XG4gICAgfVxuICAgIGNyZWF0ZShjYWxsYmFjaykge1xuICAgICAgICBsZXQgd2lkdGggPSB0aGlzLl93aWR0aDtcbiAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMuX2hlaWdodDtcbiAgICAgICAgbGV0IG1hcCA9IHRoaXMuX2ZpbGxNYXAoMSk7XG4gICAgICAgIHdpZHRoIC09ICh3aWR0aCAlIDIgPyAxIDogMik7XG4gICAgICAgIGhlaWdodCAtPSAoaGVpZ2h0ICUgMiA/IDEgOiAyKTtcbiAgICAgICAgbGV0IGN4ID0gMDtcbiAgICAgICAgbGV0IGN5ID0gMDtcbiAgICAgICAgbGV0IG54ID0gMDtcbiAgICAgICAgbGV0IG55ID0gMDtcbiAgICAgICAgbGV0IGRvbmUgPSAwO1xuICAgICAgICBsZXQgYmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZGlycyA9IFtcbiAgICAgICAgICAgIFswLCAwXSxcbiAgICAgICAgICAgIFswLCAwXSxcbiAgICAgICAgICAgIFswLCAwXSxcbiAgICAgICAgICAgIFswLCAwXVxuICAgICAgICBdO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjeCA9IDEgKyAyICogTWF0aC5mbG9vcihSTkcuZ2V0VW5pZm9ybSgpICogKHdpZHRoIC0gMSkgLyAyKTtcbiAgICAgICAgICAgIGN5ID0gMSArIDIgKiBNYXRoLmZsb29yKFJORy5nZXRVbmlmb3JtKCkgKiAoaGVpZ2h0IC0gMSkgLyAyKTtcbiAgICAgICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgICAgICAgIG1hcFtjeF1bY3ldID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWFwW2N4XVtjeV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yYW5kb21pemUoZGlycyk7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5mbG9vcihSTkcuZ2V0VW5pZm9ybSgpICogKHRoaXMuX3JlZ3VsYXJpdHkgKyAxKSkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZG9taXplKGRpcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnggPSBjeCArIGRpcnNbaV1bMF0gKiAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnkgPSBjeSArIGRpcnNbaV1bMV0gKiAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzRnJlZShtYXAsIG54LCBueSwgd2lkdGgsIGhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBbbnhdW255XSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwW2N4ICsgZGlyc1tpXVswXV1bY3kgKyBkaXJzW2ldWzFdXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3ggPSBueDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjeSA9IG55O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlICghYmxvY2tlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGRvbmUgKyAxIDwgd2lkdGggKiBoZWlnaHQgLyA0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl93aWR0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2hlaWdodDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaSwgaiwgbWFwW2ldW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXAgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIF9yYW5kb21pemUoZGlycykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgZGlyc1tpXVswXSA9IDA7XG4gICAgICAgICAgICBkaXJzW2ldWzFdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKE1hdGguZmxvb3IoUk5HLmdldFVuaWZvcm0oKSAqIDQpKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZGlyc1swXVswXSA9IC0xO1xuICAgICAgICAgICAgICAgIGRpcnNbMV1bMF0gPSAxO1xuICAgICAgICAgICAgICAgIGRpcnNbMl1bMV0gPSAtMTtcbiAgICAgICAgICAgICAgICBkaXJzWzNdWzFdID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBkaXJzWzNdWzBdID0gLTE7XG4gICAgICAgICAgICAgICAgZGlyc1syXVswXSA9IDE7XG4gICAgICAgICAgICAgICAgZGlyc1sxXVsxXSA9IC0xO1xuICAgICAgICAgICAgICAgIGRpcnNbMF1bMV0gPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGRpcnNbMl1bMF0gPSAtMTtcbiAgICAgICAgICAgICAgICBkaXJzWzNdWzBdID0gMTtcbiAgICAgICAgICAgICAgICBkaXJzWzBdWzFdID0gLTE7XG4gICAgICAgICAgICAgICAgZGlyc1sxXVsxXSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZGlyc1sxXVswXSA9IC0xO1xuICAgICAgICAgICAgICAgIGRpcnNbMF1bMF0gPSAxO1xuICAgICAgICAgICAgICAgIGRpcnNbM11bMV0gPSAtMTtcbiAgICAgICAgICAgICAgICBkaXJzWzJdWzFdID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaXNGcmVlKG1hcCwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAoeCA8IDEgfHwgeSA8IDEgfHwgeCA+PSB3aWR0aCB8fCB5ID49IGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBbeF1beV07XG4gICAgfVxufVxuIiwiaW1wb3J0IE1hcCBmcm9tIFwiLi9tYXAuanNcIjtcbmltcG9ydCBSTkcgZnJvbSBcIi4uL3JuZy5qc1wiO1xuaW1wb3J0IHsgRElSUyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbi8qKlxuICogRHVuZ2VvbiBnZW5lcmF0b3Igd2hpY2ggdXNlcyB0aGUgXCJvcmdpbmFsXCIgUm9ndWUgZHVuZ2VvbiBnZW5lcmF0aW9uIGFsZ29yaXRobS4gU2VlIGh0dHA6Ly9rdW9pLmNvbS9+a2FtaWthemUvR2FtZURlc2lnbi9hcnQwN19yb2d1ZV9kdW5nZW9uLnBocFxuICogQGF1dGhvciBoeWFrdWdlaVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2d1ZSBleHRlbmRzIE1hcCB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5tYXAgPSBbXTtcbiAgICAgICAgdGhpcy5yb29tcyA9IFtdO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZENlbGxzID0gW107XG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGNlbGxXaWR0aDogMyxcbiAgICAgICAgICAgIGNlbGxIZWlnaHQ6IDMgLy8gICAgIGllLiBhcyBhbiBhcnJheSB3aXRoIG1pbi1tYXggdmFsdWVzIGZvciBlYWNoIGRpcmVjdGlvbi4uLi5cbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIC8qXG4gICAgICAgIFNldCB0aGUgcm9vbSBzaXplcyBhY2NvcmRpbmcgdG8gdGhlIG92ZXItYWxsIHdpZHRoIG9mIHRoZSBtYXAsXG4gICAgICAgIGFuZCB0aGUgY2VsbCBzaXplcy5cbiAgICAgICAgKi9cbiAgICAgICAgaWYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KFwicm9vbVdpZHRoXCIpKSB7XG4gICAgICAgICAgICBvcHRpb25zW1wicm9vbVdpZHRoXCJdID0gdGhpcy5fY2FsY3VsYXRlUm9vbVNpemUodGhpcy5fd2lkdGgsIG9wdGlvbnNbXCJjZWxsV2lkdGhcIl0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcInJvb21IZWlnaHRcIikpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbXCJyb29tSGVpZ2h0XCJdID0gdGhpcy5fY2FsY3VsYXRlUm9vbVNpemUodGhpcy5faGVpZ2h0LCBvcHRpb25zW1wiY2VsbEhlaWdodFwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGNyZWF0ZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm1hcCA9IHRoaXMuX2ZpbGxNYXAoMSk7XG4gICAgICAgIHRoaXMucm9vbXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDZWxscyA9IFtdO1xuICAgICAgICB0aGlzLl9pbml0Um9vbXMoKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdFJvb21zKCk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RVbmNvbm5lY3RlZFJvb21zKCk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVJhbmRvbVJvb21Db25uZWN0aW9ucygpO1xuICAgICAgICB0aGlzLl9jcmVhdGVSb29tcygpO1xuICAgICAgICB0aGlzLl9jcmVhdGVDb3JyaWRvcnMoKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3dpZHRoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2hlaWdodDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGksIGosIHRoaXMubWFwW2ldW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIF9jYWxjdWxhdGVSb29tU2l6ZShzaXplLCBjZWxsKSB7XG4gICAgICAgIGxldCBtYXggPSBNYXRoLmZsb29yKChzaXplIC8gY2VsbCkgKiAwLjgpO1xuICAgICAgICBsZXQgbWluID0gTWF0aC5mbG9vcigoc2l6ZSAvIGNlbGwpICogMC4yNSk7XG4gICAgICAgIGlmIChtaW4gPCAyKSB7XG4gICAgICAgICAgICBtaW4gPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXggPCAyKSB7XG4gICAgICAgICAgICBtYXggPSAyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbWluLCBtYXhdO1xuICAgIH1cbiAgICBfaW5pdFJvb21zKCkge1xuICAgICAgICAvLyBjcmVhdGUgcm9vbXMgYXJyYXkuIFRoaXMgaXMgdGhlIFwiZ3JpZFwiIGxpc3QgZnJvbSB0aGUgYWxnby5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcHRpb25zLmNlbGxXaWR0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnJvb21zLnB1c2goW10pO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9vcHRpb25zLmNlbGxIZWlnaHQ7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbXNbaV0ucHVzaCh7IFwieFwiOiAwLCBcInlcIjogMCwgXCJ3aWR0aFwiOiAwLCBcImhlaWdodFwiOiAwLCBcImNvbm5lY3Rpb25zXCI6IFtdLCBcImNlbGx4XCI6IGksIFwiY2VsbHlcIjogaiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY29ubmVjdFJvb21zKCkge1xuICAgICAgICAvL3BpY2sgcmFuZG9tIHN0YXJ0aW5nIGdyaWRcbiAgICAgICAgbGV0IGNneCA9IFJORy5nZXRVbmlmb3JtSW50KDAsIHRoaXMuX29wdGlvbnMuY2VsbFdpZHRoIC0gMSk7XG4gICAgICAgIGxldCBjZ3kgPSBSTkcuZ2V0VW5pZm9ybUludCgwLCB0aGlzLl9vcHRpb25zLmNlbGxIZWlnaHQgLSAxKTtcbiAgICAgICAgbGV0IGlkeDtcbiAgICAgICAgbGV0IG5jZ3g7XG4gICAgICAgIGxldCBuY2d5O1xuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHJvb207XG4gICAgICAgIGxldCBvdGhlclJvb207XG4gICAgICAgIGxldCBkaXJUb0NoZWNrO1xuICAgICAgICAvLyBmaW5kICB1bmNvbm5lY3RlZCBuZWlnaGJvdXIgY2VsbHNcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy9kaXJUb0NoZWNrID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDddO1xuICAgICAgICAgICAgZGlyVG9DaGVjayA9IFswLCAyLCA0LCA2XTtcbiAgICAgICAgICAgIGRpclRvQ2hlY2sgPSBSTkcuc2h1ZmZsZShkaXJUb0NoZWNrKTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlkeCA9IGRpclRvQ2hlY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgbmNneCA9IGNneCArIERJUlNbOF1baWR4XVswXTtcbiAgICAgICAgICAgICAgICBuY2d5ID0gY2d5ICsgRElSU1s4XVtpZHhdWzFdO1xuICAgICAgICAgICAgICAgIGlmIChuY2d4IDwgMCB8fCBuY2d4ID49IHRoaXMuX29wdGlvbnMuY2VsbFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmNneSA8IDAgfHwgbmNneSA+PSB0aGlzLl9vcHRpb25zLmNlbGxIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvb20gPSB0aGlzLnJvb21zW2NneF1bY2d5XTtcbiAgICAgICAgICAgICAgICBpZiAocm9vbVtcImNvbm5lY3Rpb25zXCJdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgbG9uZyBhcyB0aGlzIHJvb20gZG9lc24ndCBhbHJlYWR5IGNvb25lY3QgdG8gbWUsIHdlIGFyZSBvayB3aXRoIGl0LlxuICAgICAgICAgICAgICAgICAgICBpZiAocm9vbVtcImNvbm5lY3Rpb25zXCJdWzBdWzBdID09IG5jZ3ggJiYgcm9vbVtcImNvbm5lY3Rpb25zXCJdWzBdWzFdID09IG5jZ3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG90aGVyUm9vbSA9IHRoaXMucm9vbXNbbmNneF1bbmNneV07XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyUm9vbVtcImNvbm5lY3Rpb25zXCJdLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyUm9vbVtcImNvbm5lY3Rpb25zXCJdLnB1c2goW2NneCwgY2d5XSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkQ2VsbHMucHVzaChbbmNneCwgbmNneV0pO1xuICAgICAgICAgICAgICAgICAgICBjZ3ggPSBuY2d4O1xuICAgICAgICAgICAgICAgICAgICBjZ3kgPSBuY2d5O1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAoZGlyVG9DaGVjay5sZW5ndGggPiAwICYmIGZvdW5kID09IGZhbHNlKTtcbiAgICAgICAgfSB3aGlsZSAoZGlyVG9DaGVjay5sZW5ndGggPiAwKTtcbiAgICB9XG4gICAgX2Nvbm5lY3RVbmNvbm5lY3RlZFJvb21zKCkge1xuICAgICAgICAvL1doaWxlIHRoZXJlIGFyZSB1bmNvbm5lY3RlZCByb29tcywgdHJ5IHRvIGNvbm5lY3QgdGhlbSB0byBhIHJhbmRvbSBjb25uZWN0ZWQgbmVpZ2hib3JcbiAgICAgICAgLy8oaWYgYSByb29tIGhhcyBubyBjb25uZWN0ZWQgbmVpZ2hib3JzIHlldCwganVzdCBrZWVwIGN5Y2xpbmcsIHlvdSdsbCBmaWxsIG91dCB0byBpdCBldmVudHVhbGx5KS5cbiAgICAgICAgbGV0IGN3ID0gdGhpcy5fb3B0aW9ucy5jZWxsV2lkdGg7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuX29wdGlvbnMuY2VsbEhlaWdodDtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDZWxscyA9IFJORy5zaHVmZmxlKHRoaXMuY29ubmVjdGVkQ2VsbHMpO1xuICAgICAgICBsZXQgcm9vbTtcbiAgICAgICAgbGV0IG90aGVyUm9vbTtcbiAgICAgICAgbGV0IHZhbGlkUm9vbTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcHRpb25zLmNlbGxXaWR0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX29wdGlvbnMuY2VsbEhlaWdodDsgaisrKSB7XG4gICAgICAgICAgICAgICAgcm9vbSA9IHRoaXMucm9vbXNbaV1bal07XG4gICAgICAgICAgICAgICAgaWYgKHJvb21bXCJjb25uZWN0aW9uc1wiXS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGlyZWN0aW9ucyA9IFswLCAyLCA0LCA2XTtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucyA9IFJORy5zaHVmZmxlKGRpcmVjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZFJvb20gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpcklkeCA9IGRpcmVjdGlvbnMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3SSA9IGkgKyBESVJTWzhdW2RpcklkeF1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3SiA9IGogKyBESVJTWzhdW2RpcklkeF1bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3SSA8IDAgfHwgbmV3SSA+PSBjdyB8fCBuZXdKIDwgMCB8fCBuZXdKID49IGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlclJvb20gPSB0aGlzLnJvb21zW25ld0ldW25ld0pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRSb29tID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdGhlclJvb21bXCJjb25uZWN0aW9uc1wiXS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBvdGhlclJvb21bXCJjb25uZWN0aW9uc1wiXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdGhlclJvb21bXCJjb25uZWN0aW9uc1wiXVtrXVswXSA9PSBpICYmIG90aGVyUm9vbVtcImNvbm5lY3Rpb25zXCJdW2tdWzFdID09IGopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRSb29tID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZFJvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoZGlyZWN0aW9ucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRSb29tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb29tW1wiY29ubmVjdGlvbnNcIl0ucHVzaChbb3RoZXJSb29tW1wiY2VsbHhcIl0sIG90aGVyUm9vbVtcImNlbGx5XCJdXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tIFVuYWJsZSB0byBjb25uZWN0IHJvb20uXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9jcmVhdGVSYW5kb21Sb29tQ29ubmVjdGlvbnMoKSB7XG4gICAgICAgIC8vIEVtcHR5IGZvciBub3cuXG4gICAgfVxuICAgIF9jcmVhdGVSb29tcygpIHtcbiAgICAgICAgbGV0IHcgPSB0aGlzLl93aWR0aDtcbiAgICAgICAgbGV0IGggPSB0aGlzLl9oZWlnaHQ7XG4gICAgICAgIGxldCBjdyA9IHRoaXMuX29wdGlvbnMuY2VsbFdpZHRoO1xuICAgICAgICBsZXQgY2ggPSB0aGlzLl9vcHRpb25zLmNlbGxIZWlnaHQ7XG4gICAgICAgIGxldCBjd3AgPSBNYXRoLmZsb29yKHRoaXMuX3dpZHRoIC8gY3cpO1xuICAgICAgICBsZXQgY2hwID0gTWF0aC5mbG9vcih0aGlzLl9oZWlnaHQgLyBjaCk7XG4gICAgICAgIGxldCByb29tdztcbiAgICAgICAgbGV0IHJvb21oO1xuICAgICAgICBsZXQgcm9vbVdpZHRoID0gdGhpcy5fb3B0aW9uc1tcInJvb21XaWR0aFwiXTtcbiAgICAgICAgbGV0IHJvb21IZWlnaHQgPSB0aGlzLl9vcHRpb25zW1wicm9vbUhlaWdodFwiXTtcbiAgICAgICAgbGV0IHN4O1xuICAgICAgICBsZXQgc3k7XG4gICAgICAgIGxldCBvdGhlclJvb207XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3c7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaDsgaisrKSB7XG4gICAgICAgICAgICAgICAgc3ggPSBjd3AgKiBpO1xuICAgICAgICAgICAgICAgIHN5ID0gY2hwICogajtcbiAgICAgICAgICAgICAgICBpZiAoc3ggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzeCA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzeSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN5ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm9vbXcgPSBSTkcuZ2V0VW5pZm9ybUludChyb29tV2lkdGhbMF0sIHJvb21XaWR0aFsxXSk7XG4gICAgICAgICAgICAgICAgcm9vbWggPSBSTkcuZ2V0VW5pZm9ybUludChyb29tSGVpZ2h0WzBdLCByb29tSGVpZ2h0WzFdKTtcbiAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJSb29tID0gdGhpcy5yb29tc1tpXVtqIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzeSAtIChvdGhlclJvb21bXCJ5XCJdICsgb3RoZXJSb29tW1wiaGVpZ2h0XCJdKSA8IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyUm9vbSA9IHRoaXMucm9vbXNbaSAtIDFdW2pdO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3ggLSAob3RoZXJSb29tW1wieFwiXSArIG90aGVyUm9vbVtcIndpZHRoXCJdKSA8IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHN4T2Zmc2V0ID0gTWF0aC5yb3VuZChSTkcuZ2V0VW5pZm9ybUludCgwLCBjd3AgLSByb29tdykgLyAyKTtcbiAgICAgICAgICAgICAgICBsZXQgc3lPZmZzZXQgPSBNYXRoLnJvdW5kKFJORy5nZXRVbmlmb3JtSW50KDAsIGNocCAtIHJvb21oKSAvIDIpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzeCArIHN4T2Zmc2V0ICsgcm9vbXcgPj0gdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3hPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN4T2Zmc2V0LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb29tdy0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChzeSArIHN5T2Zmc2V0ICsgcm9vbWggPj0gaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3lPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5T2Zmc2V0LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb29taC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN4ID0gc3ggKyBzeE9mZnNldDtcbiAgICAgICAgICAgICAgICBzeSA9IHN5ICsgc3lPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yb29tc1tpXVtqXVtcInhcIl0gPSBzeDtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb21zW2ldW2pdW1wieVwiXSA9IHN5O1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbXNbaV1bal1bXCJ3aWR0aFwiXSA9IHJvb213O1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbXNbaV1bal1bXCJoZWlnaHRcIl0gPSByb29taDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IHN4OyBpaSA8IHN4ICsgcm9vbXc7IGlpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgamogPSBzeTsgamogPCBzeSArIHJvb21oOyBqaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFtpaV1bampdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0V2FsbFBvc2l0aW9uKGFSb29tLCBhRGlyZWN0aW9uKSB7XG4gICAgICAgIGxldCByeDtcbiAgICAgICAgbGV0IHJ5O1xuICAgICAgICBsZXQgZG9vcjtcbiAgICAgICAgaWYgKGFEaXJlY3Rpb24gPT0gMSB8fCBhRGlyZWN0aW9uID09IDMpIHtcbiAgICAgICAgICAgIHJ4ID0gUk5HLmdldFVuaWZvcm1JbnQoYVJvb21bXCJ4XCJdICsgMSwgYVJvb21bXCJ4XCJdICsgYVJvb21bXCJ3aWR0aFwiXSAtIDIpO1xuICAgICAgICAgICAgaWYgKGFEaXJlY3Rpb24gPT0gMSkge1xuICAgICAgICAgICAgICAgIHJ5ID0gYVJvb21bXCJ5XCJdIC0gMjtcbiAgICAgICAgICAgICAgICBkb29yID0gcnkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcnkgPSBhUm9vbVtcInlcIl0gKyBhUm9vbVtcImhlaWdodFwiXSArIDE7XG4gICAgICAgICAgICAgICAgZG9vciA9IHJ5IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWFwW3J4XVtkb29yXSA9IDA7IC8vIGknbSBub3Qgc2V0dGluZyBhIHNwZWNpZmljICdkb29yJyB0aWxlIHZhbHVlIHJpZ2h0IG5vdywganVzdCBlbXB0eSBzcGFjZS5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJ5ID0gUk5HLmdldFVuaWZvcm1JbnQoYVJvb21bXCJ5XCJdICsgMSwgYVJvb21bXCJ5XCJdICsgYVJvb21bXCJoZWlnaHRcIl0gLSAyKTtcbiAgICAgICAgICAgIGlmIChhRGlyZWN0aW9uID09IDIpIHtcbiAgICAgICAgICAgICAgICByeCA9IGFSb29tW1wieFwiXSArIGFSb29tW1wid2lkdGhcIl0gKyAxO1xuICAgICAgICAgICAgICAgIGRvb3IgPSByeCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByeCA9IGFSb29tW1wieFwiXSAtIDI7XG4gICAgICAgICAgICAgICAgZG9vciA9IHJ4ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWFwW2Rvb3JdW3J5XSA9IDA7IC8vIGknbSBub3Qgc2V0dGluZyBhIHNwZWNpZmljICdkb29yJyB0aWxlIHZhbHVlIHJpZ2h0IG5vdywganVzdCBlbXB0eSBzcGFjZS5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3J4LCByeV07XG4gICAgfVxuICAgIF9kcmF3Q29ycmlkb3Ioc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24pIHtcbiAgICAgICAgbGV0IHhPZmZzZXQgPSBlbmRQb3NpdGlvblswXSAtIHN0YXJ0UG9zaXRpb25bMF07XG4gICAgICAgIGxldCB5T2Zmc2V0ID0gZW5kUG9zaXRpb25bMV0gLSBzdGFydFBvc2l0aW9uWzFdO1xuICAgICAgICBsZXQgeHBvcyA9IHN0YXJ0UG9zaXRpb25bMF07XG4gICAgICAgIGxldCB5cG9zID0gc3RhcnRQb3NpdGlvblsxXTtcbiAgICAgICAgbGV0IHRlbXBEaXN0O1xuICAgICAgICBsZXQgeERpcjtcbiAgICAgICAgbGV0IHlEaXI7XG4gICAgICAgIGxldCBtb3ZlOyAvLyAyIGVsZW1lbnQgYXJyYXksIGVsZW1lbnQgMCBpcyB0aGUgZGlyZWN0aW9uLCBlbGVtZW50IDEgaXMgdGhlIHRvdGFsIHZhbHVlIHRvIG1vdmUuXG4gICAgICAgIGxldCBtb3ZlcyA9IFtdOyAvLyBhIGxpc3Qgb2YgMiBlbGVtZW50IGFycmF5c1xuICAgICAgICBsZXQgeEFicyA9IE1hdGguYWJzKHhPZmZzZXQpO1xuICAgICAgICBsZXQgeUFicyA9IE1hdGguYWJzKHlPZmZzZXQpO1xuICAgICAgICBsZXQgcGVyY2VudCA9IFJORy5nZXRVbmlmb3JtKCk7IC8vIHVzZWQgdG8gc3BsaXQgdGhlIG1vdmUgYXQgZGlmZmVyZW50IHBsYWNlcyBhbG9uZyB0aGUgbG9uZyBheGlzXG4gICAgICAgIGxldCBmaXJzdEhhbGYgPSBwZXJjZW50O1xuICAgICAgICBsZXQgc2Vjb25kSGFsZiA9IDEgLSBwZXJjZW50O1xuICAgICAgICB4RGlyID0geE9mZnNldCA+IDAgPyAyIDogNjtcbiAgICAgICAgeURpciA9IHlPZmZzZXQgPiAwID8gNCA6IDA7XG4gICAgICAgIGlmICh4QWJzIDwgeUFicykge1xuICAgICAgICAgICAgLy8gbW92ZSBmaXJzdEhhbGYgb2YgdGhlIHkgb2Zmc2V0XG4gICAgICAgICAgICB0ZW1wRGlzdCA9IE1hdGguY2VpbCh5QWJzICogZmlyc3RIYWxmKTtcbiAgICAgICAgICAgIG1vdmVzLnB1c2goW3lEaXIsIHRlbXBEaXN0XSk7XG4gICAgICAgICAgICAvLyBtb3ZlIGFsbCB0aGUgeCBvZmZzZXRcbiAgICAgICAgICAgIG1vdmVzLnB1c2goW3hEaXIsIHhBYnNdKTtcbiAgICAgICAgICAgIC8vIG1vdmUgc2VuZEhhbGYgb2YgdGhlICB5IG9mZnNldFxuICAgICAgICAgICAgdGVtcERpc3QgPSBNYXRoLmZsb29yKHlBYnMgKiBzZWNvbmRIYWxmKTtcbiAgICAgICAgICAgIG1vdmVzLnB1c2goW3lEaXIsIHRlbXBEaXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyAgbW92ZSBmaXJzdEhhbGYgb2YgdGhlIHggb2Zmc2V0XG4gICAgICAgICAgICB0ZW1wRGlzdCA9IE1hdGguY2VpbCh4QWJzICogZmlyc3RIYWxmKTtcbiAgICAgICAgICAgIG1vdmVzLnB1c2goW3hEaXIsIHRlbXBEaXN0XSk7XG4gICAgICAgICAgICAvLyBtb3ZlIGFsbCB0aGUgeSBvZmZzZXRcbiAgICAgICAgICAgIG1vdmVzLnB1c2goW3lEaXIsIHlBYnNdKTtcbiAgICAgICAgICAgIC8vIG1vdmUgc2Vjb25kSGFsZiBvZiB0aGUgeCBvZmZzZXQuXG4gICAgICAgICAgICB0ZW1wRGlzdCA9IE1hdGguZmxvb3IoeEFicyAqIHNlY29uZEhhbGYpO1xuICAgICAgICAgICAgbW92ZXMucHVzaChbeERpciwgdGVtcERpc3RdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcFt4cG9zXVt5cG9zXSA9IDA7XG4gICAgICAgIHdoaWxlIChtb3Zlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBtb3ZlID0gbW92ZXMucG9wKCk7XG4gICAgICAgICAgICB3aGlsZSAobW92ZVsxXSA+IDApIHtcbiAgICAgICAgICAgICAgICB4cG9zICs9IERJUlNbOF1bbW92ZVswXV1bMF07XG4gICAgICAgICAgICAgICAgeXBvcyArPSBESVJTWzhdW21vdmVbMF1dWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwW3hwb3NdW3lwb3NdID0gMDtcbiAgICAgICAgICAgICAgICBtb3ZlWzFdID0gbW92ZVsxXSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NyZWF0ZUNvcnJpZG9ycygpIHtcbiAgICAgICAgLy8gRHJhdyBDb3JyaWRvcnMgYmV0d2VlbiBjb25uZWN0ZWQgcm9vbXNcbiAgICAgICAgbGV0IGN3ID0gdGhpcy5fb3B0aW9ucy5jZWxsV2lkdGg7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuX29wdGlvbnMuY2VsbEhlaWdodDtcbiAgICAgICAgbGV0IHJvb207XG4gICAgICAgIGxldCBjb25uZWN0aW9uO1xuICAgICAgICBsZXQgb3RoZXJSb29tO1xuICAgICAgICBsZXQgd2FsbDtcbiAgICAgICAgbGV0IG90aGVyV2FsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdzsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoOyBqKyspIHtcbiAgICAgICAgICAgICAgICByb29tID0gdGhpcy5yb29tc1tpXVtqXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJvb21bXCJjb25uZWN0aW9uc1wiXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gcm9vbVtcImNvbm5lY3Rpb25zXCJdW2tdO1xuICAgICAgICAgICAgICAgICAgICBvdGhlclJvb20gPSB0aGlzLnJvb21zW2Nvbm5lY3Rpb25bMF1dW2Nvbm5lY3Rpb25bMV1dO1xuICAgICAgICAgICAgICAgICAgICAvLyBmaWd1cmUgb3V0IHdoYXQgd2FsbCBvdXIgY29ycmlkb3Igd2lsbCBzdGFydCBvbmUuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpZ3VyZSBvdXQgd2hhdCB3YWxsIG91ciBjb3JyaWRvciB3aWxsIGVuZCBvbi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyUm9vbVtcImNlbGx4XCJdID4gcm9vbVtcImNlbGx4XCJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyV2FsbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3RoZXJSb29tW1wiY2VsbHhcIl0gPCByb29tW1wiY2VsbHhcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhbGwgPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJXYWxsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdGhlclJvb21bXCJjZWxseVwiXSA+IHJvb21bXCJjZWxseVwiXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FsbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlcldhbGwgPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FsbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlcldhbGwgPSAzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDb3JyaWRvcih0aGlzLl9nZXRXYWxsUG9zaXRpb24ocm9vbSwgd2FsbCksIHRoaXMuX2dldFdhbGxQb3NpdGlvbihvdGhlclJvb20sIG90aGVyV2FsbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qKlxuICogQmFzZSBub2lzZSBnZW5lcmF0b3JcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9pc2Uge1xufVxuIiwiaW1wb3J0IE5vaXNlIGZyb20gXCIuL25vaXNlLmpzXCI7XG5pbXBvcnQgUk5HIGZyb20gXCIuLi9ybmcuanNcIjtcbmltcG9ydCB7IG1vZCB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5jb25zdCBGMiA9IDAuNSAqIChNYXRoLnNxcnQoMykgLSAxKTtcbmNvbnN0IEcyID0gKDMgLSBNYXRoLnNxcnQoMykpIC8gNjtcbi8qKlxuICogQSBzaW1wbGUgMmQgaW1wbGVtZW50YXRpb24gb2Ygc2ltcGxleCBub2lzZSBieSBPbmRyZWogWmFyYVxuICpcbiAqIEJhc2VkIG9uIGEgc3BlZWQtaW1wcm92ZWQgc2ltcGxleCBub2lzZSBhbGdvcml0aG0gZm9yIDJELCAzRCBhbmQgNEQgaW4gSmF2YS5cbiAqIFdoaWNoIGlzIGJhc2VkIG9uIGV4YW1wbGUgY29kZSBieSBTdGVmYW4gR3VzdGF2c29uIChzdGVndUBpdG4ubGl1LnNlKS5cbiAqIFdpdGggT3B0aW1pc2F0aW9ucyBieSBQZXRlciBFYXN0bWFuIChwZWFzdG1hbkBkcml6emxlLnN0YW5mb3JkLmVkdSkuXG4gKiBCZXR0ZXIgcmFuayBvcmRlcmluZyBtZXRob2QgYnkgU3RlZmFuIEd1c3RhdnNvbiBpbiAyMDEyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW1wbGV4IGV4dGVuZHMgTm9pc2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBncmFkaWVudHMgUmFuZG9tIGdyYWRpZW50c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdyYWRpZW50cyA9IDI1Nikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9ncmFkaWVudHMgPSBbXG4gICAgICAgICAgICBbMCwgLTFdLFxuICAgICAgICAgICAgWzEsIC0xXSxcbiAgICAgICAgICAgIFsxLCAwXSxcbiAgICAgICAgICAgIFsxLCAxXSxcbiAgICAgICAgICAgIFswLCAxXSxcbiAgICAgICAgICAgIFstMSwgMV0sXG4gICAgICAgICAgICBbLTEsIDBdLFxuICAgICAgICAgICAgWy0xLCAtMV1cbiAgICAgICAgXTtcbiAgICAgICAgbGV0IHBlcm11dGF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYWRpZW50czsgaSsrKSB7XG4gICAgICAgICAgICBwZXJtdXRhdGlvbnMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICBwZXJtdXRhdGlvbnMgPSBSTkcuc2h1ZmZsZShwZXJtdXRhdGlvbnMpO1xuICAgICAgICB0aGlzLl9wZXJtcyA9IFtdO1xuICAgICAgICB0aGlzLl9pbmRleGVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMiAqIGdyYWRpZW50czsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9wZXJtcy5wdXNoKHBlcm11dGF0aW9uc1tpICUgZ3JhZGllbnRzXSk7XG4gICAgICAgICAgICB0aGlzLl9pbmRleGVzLnB1c2godGhpcy5fcGVybXNbaV0gJSB0aGlzLl9ncmFkaWVudHMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoeGluLCB5aW4pIHtcbiAgICAgICAgbGV0IHBlcm1zID0gdGhpcy5fcGVybXM7XG4gICAgICAgIGxldCBpbmRleGVzID0gdGhpcy5faW5kZXhlcztcbiAgICAgICAgbGV0IGNvdW50ID0gcGVybXMubGVuZ3RoIC8gMjtcbiAgICAgICAgbGV0IG4wID0gMCwgbjEgPSAwLCBuMiA9IDAsIGdpOyAvLyBOb2lzZSBjb250cmlidXRpb25zIGZyb20gdGhlIHRocmVlIGNvcm5lcnNcbiAgICAgICAgLy8gU2tldyB0aGUgaW5wdXQgc3BhY2UgdG8gZGV0ZXJtaW5lIHdoaWNoIHNpbXBsZXggY2VsbCB3ZSdyZSBpblxuICAgICAgICBsZXQgcyA9ICh4aW4gKyB5aW4pICogRjI7IC8vIEhhaXJ5IGZhY3RvciBmb3IgMkRcbiAgICAgICAgbGV0IGkgPSBNYXRoLmZsb29yKHhpbiArIHMpO1xuICAgICAgICBsZXQgaiA9IE1hdGguZmxvb3IoeWluICsgcyk7XG4gICAgICAgIGxldCB0ID0gKGkgKyBqKSAqIEcyO1xuICAgICAgICBsZXQgWDAgPSBpIC0gdDsgLy8gVW5za2V3IHRoZSBjZWxsIG9yaWdpbiBiYWNrIHRvICh4LHkpIHNwYWNlXG4gICAgICAgIGxldCBZMCA9IGogLSB0O1xuICAgICAgICBsZXQgeDAgPSB4aW4gLSBYMDsgLy8gVGhlIHgseSBkaXN0YW5jZXMgZnJvbSB0aGUgY2VsbCBvcmlnaW5cbiAgICAgICAgbGV0IHkwID0geWluIC0gWTA7XG4gICAgICAgIC8vIEZvciB0aGUgMkQgY2FzZSwgdGhlIHNpbXBsZXggc2hhcGUgaXMgYW4gZXF1aWxhdGVyYWwgdHJpYW5nbGUuXG4gICAgICAgIC8vIERldGVybWluZSB3aGljaCBzaW1wbGV4IHdlIGFyZSBpbi5cbiAgICAgICAgbGV0IGkxLCBqMTsgLy8gT2Zmc2V0cyBmb3Igc2Vjb25kIChtaWRkbGUpIGNvcm5lciBvZiBzaW1wbGV4IGluIChpLGopIGNvb3Jkc1xuICAgICAgICBpZiAoeDAgPiB5MCkge1xuICAgICAgICAgICAgaTEgPSAxO1xuICAgICAgICAgICAgajEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBsb3dlciB0cmlhbmdsZSwgWFkgb3JkZXI6ICgwLDApLT4oMSwwKS0+KDEsMSlcbiAgICAgICAgICAgIGkxID0gMDtcbiAgICAgICAgICAgIGoxID0gMTtcbiAgICAgICAgfSAvLyB1cHBlciB0cmlhbmdsZSwgWVggb3JkZXI6ICgwLDApLT4oMCwxKS0+KDEsMSlcbiAgICAgICAgLy8gQSBzdGVwIG9mICgxLDApIGluIChpLGopIG1lYW5zIGEgc3RlcCBvZiAoMS1jLC1jKSBpbiAoeCx5KSwgYW5kXG4gICAgICAgIC8vIGEgc3RlcCBvZiAoMCwxKSBpbiAoaSxqKSBtZWFucyBhIHN0ZXAgb2YgKC1jLDEtYykgaW4gKHgseSksIHdoZXJlXG4gICAgICAgIC8vIGMgPSAoMy1zcXJ0KDMpKS82XG4gICAgICAgIGxldCB4MSA9IHgwIC0gaTEgKyBHMjsgLy8gT2Zmc2V0cyBmb3IgbWlkZGxlIGNvcm5lciBpbiAoeCx5KSB1bnNrZXdlZCBjb29yZHNcbiAgICAgICAgbGV0IHkxID0geTAgLSBqMSArIEcyO1xuICAgICAgICBsZXQgeDIgPSB4MCAtIDEgKyAyICogRzI7IC8vIE9mZnNldHMgZm9yIGxhc3QgY29ybmVyIGluICh4LHkpIHVuc2tld2VkIGNvb3Jkc1xuICAgICAgICBsZXQgeTIgPSB5MCAtIDEgKyAyICogRzI7XG4gICAgICAgIC8vIFdvcmsgb3V0IHRoZSBoYXNoZWQgZ3JhZGllbnQgaW5kaWNlcyBvZiB0aGUgdGhyZWUgc2ltcGxleCBjb3JuZXJzXG4gICAgICAgIGxldCBpaSA9IG1vZChpLCBjb3VudCk7XG4gICAgICAgIGxldCBqaiA9IG1vZChqLCBjb3VudCk7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29udHJpYnV0aW9uIGZyb20gdGhlIHRocmVlIGNvcm5lcnNcbiAgICAgICAgbGV0IHQwID0gMC41IC0geDAgKiB4MCAtIHkwICogeTA7XG4gICAgICAgIGlmICh0MCA+PSAwKSB7XG4gICAgICAgICAgICB0MCAqPSB0MDtcbiAgICAgICAgICAgIGdpID0gaW5kZXhlc1tpaSArIHBlcm1zW2pqXV07XG4gICAgICAgICAgICBsZXQgZ3JhZCA9IHRoaXMuX2dyYWRpZW50c1tnaV07XG4gICAgICAgICAgICBuMCA9IHQwICogdDAgKiAoZ3JhZFswXSAqIHgwICsgZ3JhZFsxXSAqIHkwKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdDEgPSAwLjUgLSB4MSAqIHgxIC0geTEgKiB5MTtcbiAgICAgICAgaWYgKHQxID49IDApIHtcbiAgICAgICAgICAgIHQxICo9IHQxO1xuICAgICAgICAgICAgZ2kgPSBpbmRleGVzW2lpICsgaTEgKyBwZXJtc1tqaiArIGoxXV07XG4gICAgICAgICAgICBsZXQgZ3JhZCA9IHRoaXMuX2dyYWRpZW50c1tnaV07XG4gICAgICAgICAgICBuMSA9IHQxICogdDEgKiAoZ3JhZFswXSAqIHgxICsgZ3JhZFsxXSAqIHkxKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdDIgPSAwLjUgLSB4MiAqIHgyIC0geTIgKiB5MjtcbiAgICAgICAgaWYgKHQyID49IDApIHtcbiAgICAgICAgICAgIHQyICo9IHQyO1xuICAgICAgICAgICAgZ2kgPSBpbmRleGVzW2lpICsgMSArIHBlcm1zW2pqICsgMV1dO1xuICAgICAgICAgICAgbGV0IGdyYWQgPSB0aGlzLl9ncmFkaWVudHNbZ2ldO1xuICAgICAgICAgICAgbjIgPSB0MiAqIHQyICogKGdyYWRbMF0gKiB4MiArIGdyYWRbMV0gKiB5Mik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGNvbnRyaWJ1dGlvbnMgZnJvbSBlYWNoIGNvcm5lciB0byBnZXQgdGhlIGZpbmFsIG5vaXNlIHZhbHVlLlxuICAgICAgICAvLyBUaGUgcmVzdWx0IGlzIHNjYWxlZCB0byByZXR1cm4gdmFsdWVzIGluIHRoZSBpbnRlcnZhbCBbLTEsMV0uXG4gICAgICAgIHJldHVybiA3MCAqIChuMCArIG4xICsgbjIpO1xuICAgIH1cbn1cbiIsImltcG9ydCBTaW1wbGV4IGZyb20gXCIuL3NpbXBsZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IHsgU2ltcGxleCB9O1xuIiwiaW1wb3J0IHsgRElSUyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbi8qKlxuICogQGNsYXNzIEFic3RyYWN0IHBhdGhmaW5kZXJcbiAqIEBwYXJhbSB7aW50fSB0b1ggVGFyZ2V0IFggY29vcmRcbiAqIEBwYXJhbSB7aW50fSB0b1kgVGFyZ2V0IFkgY29vcmRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHBhc3NhYmxlQ2FsbGJhY2sgQ2FsbGJhY2sgdG8gZGV0ZXJtaW5lIG1hcCBwYXNzYWJpbGl0eVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtpbnR9IFtvcHRpb25zLnRvcG9sb2d5PThdXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHRvWCwgdG9ZLCBwYXNzYWJsZUNhbGxiYWNrLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fdG9YID0gdG9YO1xuICAgICAgICB0aGlzLl90b1kgPSB0b1k7XG4gICAgICAgIHRoaXMuX3Bhc3NhYmxlQ2FsbGJhY2sgPSBwYXNzYWJsZUNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICB0b3BvbG9neTogOFxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZGlycyA9IERJUlNbdGhpcy5fb3B0aW9ucy50b3BvbG9neV07XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRvcG9sb2d5ID09IDgpIHsgLyogcmVvcmRlciBkaXJzIGZvciBtb3JlIGFlc3RoZXRpYyByZXN1bHQgKHZlcnRpY2FsL2hvcml6b250YWwgZmlyc3QpICovXG4gICAgICAgICAgICB0aGlzLl9kaXJzID0gW1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpcnNbMF0sXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlyc1syXSxcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXJzWzRdLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RpcnNbNl0sXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlyc1sxXSxcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXJzWzNdLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RpcnNbNV0sXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlyc1s3XVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0TmVpZ2hib3JzKGN4LCBjeSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZGlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRpciA9IHRoaXMuX2RpcnNbaV07XG4gICAgICAgICAgICBsZXQgeCA9IGN4ICsgZGlyWzBdO1xuICAgICAgICAgICAgbGV0IHkgPSBjeSArIGRpclsxXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fcGFzc2FibGVDYWxsYmFjayh4LCB5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goW3gsIHldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiIsImltcG9ydCBEaWprc3RyYSBmcm9tIFwiLi9kaWprc3RyYS5qc1wiO1xuaW1wb3J0IEFTdGFyIGZyb20gXCIuL2FzdGFyLmpzXCI7XG5leHBvcnQgZGVmYXVsdCB7IERpamtzdHJhLCBBU3RhciB9O1xuIiwiaW1wb3J0IFBhdGggZnJvbSBcIi4vcGF0aC5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgU2ltcGxpZmllZCBEaWprc3RyYSdzIGFsZ29yaXRobTogYWxsIGVkZ2VzIGhhdmUgYSB2YWx1ZSBvZiAxXG4gKiBAYXVnbWVudHMgUk9ULlBhdGhcbiAqIEBzZWUgUk9ULlBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlqa3N0cmEgZXh0ZW5kcyBQYXRoIHtcbiAgICBjb25zdHJ1Y3Rvcih0b1gsIHRvWSwgcGFzc2FibGVDYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih0b1gsIHRvWSwgcGFzc2FibGVDYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2NvbXB1dGVkID0ge307XG4gICAgICAgIHRoaXMuX3RvZG8gPSBbXTtcbiAgICAgICAgdGhpcy5fYWRkKHRvWCwgdG9ZLCBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBhIHBhdGggZnJvbSBhIGdpdmVuIHBvaW50XG4gICAgICogQHNlZSBST1QuUGF0aCNjb21wdXRlXG4gICAgICovXG4gICAgY29tcHV0ZShmcm9tWCwgZnJvbVksIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBrZXkgPSBmcm9tWCArIFwiLFwiICsgZnJvbVk7XG4gICAgICAgIGlmICghKGtleSBpbiB0aGlzLl9jb21wdXRlZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGUoZnJvbVgsIGZyb21ZKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShrZXkgaW4gdGhpcy5fY29tcHV0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9jb21wdXRlZFtrZXldO1xuICAgICAgICB3aGlsZSAoaXRlbSkge1xuICAgICAgICAgICAgY2FsbGJhY2soaXRlbS54LCBpdGVtLnkpO1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW0ucHJldjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgbm9uLWNhY2hlZCB2YWx1ZVxuICAgICAqL1xuICAgIF9jb21wdXRlKGZyb21YLCBmcm9tWSkge1xuICAgICAgICB3aGlsZSAodGhpcy5fdG9kby5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gdGhpcy5fdG9kby5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGl0ZW0ueCA9PSBmcm9tWCAmJiBpdGVtLnkgPT0gZnJvbVkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmVpZ2hib3JzID0gdGhpcy5fZ2V0TmVpZ2hib3JzKGl0ZW0ueCwgaXRlbS55KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5laWdoYm9yID0gbmVpZ2hib3JzW2ldO1xuICAgICAgICAgICAgICAgIGxldCB4ID0gbmVpZ2hib3JbMF07XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBuZWlnaGJvclsxXTtcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSB4ICsgXCIsXCIgKyB5O1xuICAgICAgICAgICAgICAgIGlmIChpZCBpbiB0aGlzLl9jb21wdXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IC8qIGFscmVhZHkgZG9uZSAqL1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZCh4LCB5LCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfYWRkKHgsIHksIHByZXYpIHtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgcHJldjogcHJldlxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jb21wdXRlZFt4ICsgXCIsXCIgKyB5XSA9IG9iajtcbiAgICAgICAgdGhpcy5fdG9kby5wdXNoKG9iaik7XG4gICAgfVxufVxuIiwiaW1wb3J0IFBhdGggZnJvbSBcIi4vcGF0aC5qc1wiO1xuLyoqXG4gKiBAY2xhc3MgU2ltcGxpZmllZCBBKiBhbGdvcml0aG06IGFsbCBlZGdlcyBoYXZlIGEgdmFsdWUgb2YgMVxuICogQGF1Z21lbnRzIFJPVC5QYXRoXG4gKiBAc2VlIFJPVC5QYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFTdGFyIGV4dGVuZHMgUGF0aCB7XG4gICAgY29uc3RydWN0b3IodG9YLCB0b1ksIHBhc3NhYmxlQ2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcih0b1gsIHRvWSwgcGFzc2FibGVDYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3RvZG8gPSBbXTtcbiAgICAgICAgdGhpcy5fZG9uZSA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgcGF0aCBmcm9tIGEgZ2l2ZW4gcG9pbnRcbiAgICAgKiBAc2VlIFJPVC5QYXRoI2NvbXB1dGVcbiAgICAgKi9cbiAgICBjb21wdXRlKGZyb21YLCBmcm9tWSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fdG9kbyA9IFtdO1xuICAgICAgICB0aGlzLl9kb25lID0ge307XG4gICAgICAgIHRoaXMuX2Zyb21YID0gZnJvbVg7XG4gICAgICAgIHRoaXMuX2Zyb21ZID0gZnJvbVk7XG4gICAgICAgIHRoaXMuX2FkZCh0aGlzLl90b1gsIHRoaXMuX3RvWSwgbnVsbCk7XG4gICAgICAgIHdoaWxlICh0aGlzLl90b2RvLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl90b2RvLnNoaWZ0KCk7XG4gICAgICAgICAgICBsZXQgaWQgPSBpdGVtLnggKyBcIixcIiArIGl0ZW0ueTtcbiAgICAgICAgICAgIGlmIChpZCBpbiB0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kb25lW2lkXSA9IGl0ZW07XG4gICAgICAgICAgICBpZiAoaXRlbS54ID09IGZyb21YICYmIGl0ZW0ueSA9PSBmcm9tWSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5laWdoYm9ycyA9IHRoaXMuX2dldE5laWdoYm9ycyhpdGVtLngsIGl0ZW0ueSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5laWdoYm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IG5laWdoYm9yWzBdO1xuICAgICAgICAgICAgICAgIGxldCB5ID0gbmVpZ2hib3JbMV07XG4gICAgICAgICAgICAgICAgbGV0IGlkID0geCArIFwiLFwiICsgeTtcbiAgICAgICAgICAgICAgICBpZiAoaWQgaW4gdGhpcy5fZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkKHgsIHksIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5fZG9uZVtmcm9tWCArIFwiLFwiICsgZnJvbVldO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaXRlbSkge1xuICAgICAgICAgICAgY2FsbGJhY2soaXRlbS54LCBpdGVtLnkpO1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW0ucHJldjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYWRkKHgsIHksIHByZXYpIHtcbiAgICAgICAgbGV0IGggPSB0aGlzLl9kaXN0YW5jZSh4LCB5KTtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgcHJldjogcHJldixcbiAgICAgICAgICAgIGc6IChwcmV2ID8gcHJldi5nICsgMSA6IDApLFxuICAgICAgICAgICAgaDogaFxuICAgICAgICB9O1xuICAgICAgICAvKiBpbnNlcnQgaW50byBwcmlvcml0eSBxdWV1ZSAqL1xuICAgICAgICBsZXQgZiA9IG9iai5nICsgb2JqLmg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdG9kby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl90b2RvW2ldO1xuICAgICAgICAgICAgbGV0IGl0ZW1GID0gaXRlbS5nICsgaXRlbS5oO1xuICAgICAgICAgICAgaWYgKGYgPCBpdGVtRiB8fCAoZiA9PSBpdGVtRiAmJiBoIDwgaXRlbS5oKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvZG8uc3BsaWNlKGksIDAsIG9iaik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RvZG8ucHVzaChvYmopO1xuICAgIH1cbiAgICBfZGlzdGFuY2UoeCwgeSkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX29wdGlvbnMudG9wb2xvZ3kpIHtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKE1hdGguYWJzKHggLSB0aGlzLl9mcm9tWCkgKyBNYXRoLmFicyh5IC0gdGhpcy5fZnJvbVkpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBsZXQgZHggPSBNYXRoLmFicyh4IC0gdGhpcy5fZnJvbVgpO1xuICAgICAgICAgICAgICAgIGxldCBkeSA9IE1hdGguYWJzKHkgLSB0aGlzLl9mcm9tWSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGR5ICsgTWF0aC5tYXgoMCwgKGR4IC0gZHkpIC8gMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGguYWJzKHggLSB0aGlzLl9mcm9tWCksIE1hdGguYWJzKHkgLSB0aGlzLl9mcm9tWSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAY2xhc3MgQXN5bmNocm9ub3VzIG1haW4gbG9vcFxuICogQHBhcmFtIHtST1QuU2NoZWR1bGVyfSBzY2hlZHVsZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5naW5lIHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLl9sb2NrID0gMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgdGhlIG1haW4gbG9vcC4gV2hlbiB0aGlzIGNhbGwgcmV0dXJucywgdGhlIGxvb3AgaXMgbG9ja2VkLlxuICAgICAqL1xuICAgIHN0YXJ0KCkgeyByZXR1cm4gdGhpcy51bmxvY2soKTsgfVxuICAgIC8qKlxuICAgICAqIEludGVycnVwdCB0aGUgZW5naW5lIGJ5IGFuIGFzeW5jaHJvbm91cyBhY3Rpb25cbiAgICAgKi9cbiAgICBsb2NrKCkge1xuICAgICAgICB0aGlzLl9sb2NrKys7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXN1bWUgZXhlY3V0aW9uIChwYXVzZWQgYnkgYSBwcmV2aW91cyBsb2NrKVxuICAgICAqL1xuICAgIHVubG9jaygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdW5sb2NrIHVubG9ja2VkIGVuZ2luZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sb2NrLS07XG4gICAgICAgIHdoaWxlICghdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgbGV0IGFjdG9yID0gdGhpcy5fc2NoZWR1bGVyLm5leHQoKTtcbiAgICAgICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NrKCk7XG4gICAgICAgICAgICB9IC8qIG5vIGFjdG9ycyAqL1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGFjdG9yLmFjdCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikgeyAvKiBhY3RvciByZXR1cm5lZCBhIFwidGhlbmFibGVcIiwgbG9va3MgbGlrZSBhIFByb21pc2UgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmxvY2soKTtcbiAgICAgICAgICAgICAgICByZXN1bHQudGhlbih0aGlzLnVubG9jay5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBDb2xvciBmcm9tIFwiLi9jb2xvci5qc1wiO1xuO1xuO1xuO1xuO1xuLyoqXG4gKiBMaWdodGluZyBjb21wdXRhdGlvbiwgYmFzZWQgb24gYSB0cmFkaXRpb25hbCBGT1YgZm9yIG11bHRpcGxlIGxpZ2h0IHNvdXJjZXMgYW5kIG11bHRpcGxlIHBhc3Nlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRpbmcge1xuICAgIGNvbnN0cnVjdG9yKHJlZmxlY3Rpdml0eUNhbGxiYWNrLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fcmVmbGVjdGl2aXR5Q2FsbGJhY2sgPSByZWZsZWN0aXZpdHlDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHt9O1xuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBwYXNzZXM6IDEsXG4gICAgICAgICAgICBlbWlzc2lvblRocmVzaG9sZDogMTAwLFxuICAgICAgICAgICAgcmFuZ2U6IDEwXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9saWdodHMgPSB7fTtcbiAgICAgICAgdGhpcy5fcmVmbGVjdGl2aXR5Q2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fZm92Q2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGp1c3Qgb3B0aW9ucyBhdCBydW50aW1lXG4gICAgICovXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB1c2VkIEZpZWxkLU9mLVZpZXcgYWxnb1xuICAgICAqL1xuICAgIHNldEZPVihmb3YpIHtcbiAgICAgICAgdGhpcy5fZm92ID0gZm92O1xuICAgICAgICB0aGlzLl9mb3ZDYWNoZSA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IChvciByZW1vdmUpIGEgbGlnaHQgc291cmNlXG4gICAgICovXG4gICAgc2V0TGlnaHQoeCwgeSwgY29sb3IpIHtcbiAgICAgICAgbGV0IGtleSA9IHggKyBcIixcIiArIHk7XG4gICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgdGhpcy5fbGlnaHRzW2tleV0gPSAodHlwZW9mIChjb2xvcikgPT0gXCJzdHJpbmdcIiA/IENvbG9yLmZyb21TdHJpbmcoY29sb3IpIDogY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xpZ2h0c1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGxpZ2h0IHNvdXJjZXNcbiAgICAgKi9cbiAgICBjbGVhckxpZ2h0cygpIHsgdGhpcy5fbGlnaHRzID0ge307IH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgcHJlLWNvbXB1dGVkIHRvcG9sb2d5IHZhbHVlcy4gQ2FsbCB3aGVuZXZlciB0aGUgdW5kZXJseWluZyBtYXAgY2hhbmdlcyBpdHMgbGlnaHQtcGFzc2FiaWxpdHkuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3JlZmxlY3Rpdml0eUNhY2hlID0ge307XG4gICAgICAgIHRoaXMuX2ZvdkNhY2hlID0ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBsaWdodGluZ1xuICAgICAqL1xuICAgIGNvbXB1dGUobGlnaHRpbmdDYWxsYmFjaykge1xuICAgICAgICBsZXQgZG9uZUNlbGxzID0ge307XG4gICAgICAgIGxldCBlbWl0dGluZ0NlbGxzID0ge307XG4gICAgICAgIGxldCBsaXRDZWxscyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fbGlnaHRzKSB7IC8qIHByZXBhcmUgZW1pdHRlcnMgZm9yIGZpcnN0IHBhc3MgKi9cbiAgICAgICAgICAgIGxldCBsaWdodCA9IHRoaXMuX2xpZ2h0c1trZXldO1xuICAgICAgICAgICAgZW1pdHRpbmdDZWxsc1trZXldID0gWzAsIDAsIDBdO1xuICAgICAgICAgICAgQ29sb3IuYWRkXyhlbWl0dGluZ0NlbGxzW2tleV0sIGxpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX29wdGlvbnMucGFzc2VzOyBpKyspIHsgLyogbWFpbiBsb29wICovXG4gICAgICAgICAgICB0aGlzLl9lbWl0TGlnaHQoZW1pdHRpbmdDZWxscywgbGl0Q2VsbHMsIGRvbmVDZWxscyk7XG4gICAgICAgICAgICBpZiAoaSArIDEgPT0gdGhpcy5fb3B0aW9ucy5wYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gLyogbm90IGZvciB0aGUgbGFzdCBwYXNzICovXG4gICAgICAgICAgICBlbWl0dGluZ0NlbGxzID0gdGhpcy5fY29tcHV0ZUVtaXR0ZXJzKGxpdENlbGxzLCBkb25lQ2VsbHMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGxpdEtleSBpbiBsaXRDZWxscykgeyAvKiBsZXQgdGhlIHVzZXIga25vdyB3aGF0IGFuZCBob3cgaXMgbGl0ICovXG4gICAgICAgICAgICBsZXQgcGFydHMgPSBsaXRLZXkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XG4gICAgICAgICAgICBsZXQgeSA9IHBhcnNlSW50KHBhcnRzWzFdKTtcbiAgICAgICAgICAgIGxpZ2h0aW5nQ2FsbGJhY2soeCwgeSwgbGl0Q2VsbHNbbGl0S2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgb25lIGl0ZXJhdGlvbiBmcm9tIGFsbCBlbWl0dGluZyBjZWxsc1xuICAgICAqIEBwYXJhbSBlbWl0dGluZ0NlbGxzIFRoZXNlIGVtaXQgbGlnaHRcbiAgICAgKiBAcGFyYW0gbGl0Q2VsbHMgQWRkIHByb2plY3RlZCBsaWdodCB0byB0aGVzZVxuICAgICAqIEBwYXJhbSBkb25lQ2VsbHMgVGhlc2UgYWxyZWFkeSBlbWl0dGVkLCBmb3JiaWQgdGhlbSBmcm9tIGZ1cnRoZXIgY2FsY3VsYXRpb25zXG4gICAgICovXG4gICAgX2VtaXRMaWdodChlbWl0dGluZ0NlbGxzLCBsaXRDZWxscywgZG9uZUNlbGxzKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBlbWl0dGluZ0NlbGxzKSB7XG4gICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1swXSk7XG4gICAgICAgICAgICBsZXQgeSA9IHBhcnNlSW50KHBhcnRzWzFdKTtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRMaWdodEZyb21DZWxsKHgsIHksIGVtaXR0aW5nQ2VsbHNba2V5XSwgbGl0Q2VsbHMpO1xuICAgICAgICAgICAgZG9uZUNlbGxzW2tleV0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIGEgbGlzdCBvZiBlbWl0dGVycyBmb3IgbmV4dCBwYXNzXG4gICAgICovXG4gICAgX2NvbXB1dGVFbWl0dGVycyhsaXRDZWxscywgZG9uZUNlbGxzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGxpdENlbGxzKSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluIGRvbmVDZWxscykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSAvKiBhbHJlYWR5IGVtaXR0ZWQgKi9cbiAgICAgICAgICAgIGxldCBjb2xvciA9IGxpdENlbGxzW2tleV07XG4gICAgICAgICAgICBsZXQgcmVmbGVjdGl2aXR5O1xuICAgICAgICAgICAgaWYgKGtleSBpbiB0aGlzLl9yZWZsZWN0aXZpdHlDYWNoZSkge1xuICAgICAgICAgICAgICAgIHJlZmxlY3Rpdml0eSA9IHRoaXMuX3JlZmxlY3Rpdml0eUNhY2hlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFydHMgPSBrZXkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgIGxldCB4ID0gcGFyc2VJbnQocGFydHNbMF0pO1xuICAgICAgICAgICAgICAgIGxldCB5ID0gcGFyc2VJbnQocGFydHNbMV0pO1xuICAgICAgICAgICAgICAgIHJlZmxlY3Rpdml0eSA9IHRoaXMuX3JlZmxlY3Rpdml0eUNhbGxiYWNrKHgsIHkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlZmxlY3Rpdml0eUNhY2hlW2tleV0gPSByZWZsZWN0aXZpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVmbGVjdGl2aXR5ID09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gLyogd2lsbCBub3QgcmVmbGVjdCBhdCBhbGwgKi9cbiAgICAgICAgICAgIC8qIGNvbXB1dGUgZW1pc3Npb24gY29sb3IgKi9cbiAgICAgICAgICAgIGxldCBlbWlzc2lvbiA9IFswLCAwLCAwXTtcbiAgICAgICAgICAgIGxldCBpbnRlbnNpdHkgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFydCA9IE1hdGgucm91bmQoY29sb3JbaV0gKiByZWZsZWN0aXZpdHkpO1xuICAgICAgICAgICAgICAgIGVtaXNzaW9uW2ldID0gcGFydDtcbiAgICAgICAgICAgICAgICBpbnRlbnNpdHkgKz0gcGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnRlbnNpdHkgPiB0aGlzLl9vcHRpb25zLmVtaXNzaW9uVGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBlbWlzc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIG9uZSBpdGVyYXRpb24gZnJvbSBvbmUgY2VsbFxuICAgICAqL1xuICAgIF9lbWl0TGlnaHRGcm9tQ2VsbCh4LCB5LCBjb2xvciwgbGl0Q2VsbHMpIHtcbiAgICAgICAgbGV0IGtleSA9IHggKyBcIixcIiArIHk7XG4gICAgICAgIGxldCBmb3Y7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5fZm92Q2FjaGUpIHtcbiAgICAgICAgICAgIGZvdiA9IHRoaXMuX2ZvdkNhY2hlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3YgPSB0aGlzLl91cGRhdGVGT1YoeCwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgZm92S2V5IGluIGZvdikge1xuICAgICAgICAgICAgbGV0IGZvcm1GYWN0b3IgPSBmb3ZbZm92S2V5XTtcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoZm92S2V5IGluIGxpdENlbGxzKSB7IC8qIGFscmVhZHkgbGl0ICovXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGl0Q2VsbHNbZm92S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvKiBuZXdseSBsaXQgKi9cbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbMCwgMCwgMF07XG4gICAgICAgICAgICAgICAgbGl0Q2VsbHNbZm92S2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldICs9IE1hdGgucm91bmQoY29sb3JbaV0gKiBmb3JtRmFjdG9yKTtcbiAgICAgICAgICAgIH0gLyogYWRkIGxpZ2h0IGNvbG9yICovXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgRk9WIChcImZvcm0gZmFjdG9yXCIpIGZvciBhIHBvdGVudGlhbCBsaWdodCBzb3VyY2UgYXQgW3gseV1cbiAgICAgKi9cbiAgICBfdXBkYXRlRk9WKHgsIHkpIHtcbiAgICAgICAgbGV0IGtleTEgPSB4ICsgXCIsXCIgKyB5O1xuICAgICAgICBsZXQgY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fZm92Q2FjaGVba2V5MV0gPSBjYWNoZTtcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5fb3B0aW9ucy5yYW5nZTtcbiAgICAgICAgZnVuY3Rpb24gY2IoeCwgeSwgciwgdmlzKSB7XG4gICAgICAgICAgICBsZXQga2V5MiA9IHggKyBcIixcIiArIHk7XG4gICAgICAgICAgICBsZXQgZm9ybUZhY3RvciA9IHZpcyAqICgxIC0gciAvIHJhbmdlKTtcbiAgICAgICAgICAgIGlmIChmb3JtRmFjdG9yID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZVtrZXkyXSA9IGZvcm1GYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgO1xuICAgICAgICB0aGlzLl9mb3YuY29tcHV0ZSh4LCB5LCByYW5nZSwgY2IuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IGFzIFJORyB9IGZyb20gXCIuL3JuZy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEaXNwbGF5IH0gZnJvbSBcIi4vZGlzcGxheS9kaXNwbGF5LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0cmluZ0dlbmVyYXRvciB9IGZyb20gXCIuL3N0cmluZ2dlbmVyYXRvci5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFdmVudFF1ZXVlIH0gZnJvbSBcIi4vZXZlbnRxdWV1ZS5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTY2hlZHVsZXIgfSBmcm9tIFwiLi9zY2hlZHVsZXIvaW5kZXguanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRk9WIH0gZnJvbSBcIi4vZm92L2luZGV4LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1hcCB9IGZyb20gXCIuL21hcC9pbmRleC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOb2lzZSB9IGZyb20gXCIuL25vaXNlL2luZGV4LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFBhdGggfSBmcm9tIFwiLi9wYXRoL2luZGV4LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEVuZ2luZSB9IGZyb20gXCIuL2VuZ2luZS5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaWdodGluZyB9IGZyb20gXCIuL2xpZ2h0aW5nLmpzXCI7XG5leHBvcnQgeyBERUZBVUxUX1dJRFRILCBERUZBVUxUX0hFSUdIVCwgRElSUywgS0VZUyB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi91dGlsLmpzXCI7XG5leHBvcnQgY29uc3QgVXRpbCA9IHV0aWw7XG5pbXBvcnQgKiBhcyBjb2xvciBmcm9tIFwiLi9jb2xvci5qc1wiO1xuZXhwb3J0IGNvbnN0IENvbG9yID0gY29sb3I7XG5pbXBvcnQgKiBhcyB0ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmV4cG9ydCBjb25zdCBUZXh0ID0gdGV4dDtcbiIsImltcG9ydCBqc29uIGZyb20gXCIuLi9sZXZlbHMvY29ucXVlci5qc29uXCI7XHJcbi8vIGltcG9ydCBqc29uIGZyb20gJy4uL2xldmVscy9sZXZlbC5qc29uJ1xyXG5pbXBvcnQgTGV2ZWwgZnJvbSBcIi4vTGV2ZWxcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vR2FtZVwiO1xyXG5cclxuZG9jdW1lbnQuYm9keS5vbmxvYWQgPSAoKTogdm9pZCA9PiB7XHJcbiAgY29uc3QgbGV2ZWwgPSBMZXZlbC5pbXBvcnRKU09OKGpzb24pO1xyXG4gIG5ldyBHYW1lKGxldmVsKTtcclxufTtcclxuIiwiLy8gTEVWRUwgQ0xBU1NcclxuLy8gTGV2ZWxzIGFyZSBsb2FkZWQgYXMgd29ya2luZyBzb2x1dGlvbnMgdG8gdGhlIHB1enpsZVxyXG4vLyBUaGVuIHRoZSBmcm96ZW4gZWxlbWVudHMgYXJlIHJlbW92ZWQgYW5kIHB1dCBpbiB0aGUgdG9vbGJveFxyXG5cclxuaW1wb3J0IENvb3JkIGZyb20gXCIuL0Nvb3JkXCI7XHJcbmltcG9ydCBDZWxsIGZyb20gXCIuL0NlbGxcIjtcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSBcIi4vRWxlbWVudFwiO1xyXG5pbXBvcnQgR3JpZCBmcm9tIFwiLi9HcmlkXCI7XHJcbmltcG9ydCBIaW50IGZyb20gXCIuL0hpbnRcIjtcclxuaW1wb3J0IEdvYWwgZnJvbSBcIi4vR29hbFwiO1xyXG5pbXBvcnQgSW52ZW50b3J5IGZyb20gXCIuL0ludmVudG9yeVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWwge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGdyb3VwOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBncmlkOiBHcmlkO1xyXG4gIGdvYWxzOiBHb2FsW107XHJcbiAgaGludHM6IEhpbnRbXTtcclxuICB0b29sYm94OiBJbnZlbnRvcnk7XHJcbiAgY29tcGxldGVkOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGlkOiBudW1iZXIsXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBncm91cDogc3RyaW5nLFxyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgIGdyaWQ6IEdyaWQgPSBuZXcgR3JpZCg4LCA4KSxcclxuICAgIGdvYWxzOiBHb2FsW10sXHJcbiAgICBoaW50czogSGludFtdLFxyXG4gICAgY29tcGxldGVkOiBib29sZWFuXHJcbiAgKSB7XHJcbiAgICAvLyBCYXNpYyBpbmZvc1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5ncm91cCA9IGdyb3VwO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIC8vIEJhc2ljIGdyaWQgZGVmaW5pdGlvblxyXG4gICAgdGhpcy5ncmlkID0gZ3JpZDtcclxuICAgIHRoaXMuZ29hbHMgPSBnb2FscztcclxuICAgIHRoaXMuaGludHMgPSBoaW50cztcclxuICAgIHRoaXMuY29tcGxldGVkID0gY29tcGxldGVkO1xyXG5cclxuICAgIC8vIEV4dHJhY3Qgbm9uIGZyb3plbiBlbGVtZW50cyBhbmQgcHV0IHRoZW0gaW4gdGhlIHRvb2xib3hcclxuICAgIC8vIGNvbnN0IHVuZnJvemVuQ2VsbHMgPSB0aGlzLmdyaWQuY2VsbHMuZmlsdGVyKChjZWxsKSA9PiAhY2VsbC5mcm96ZW4pLm1hcCgoY2VsbCkgPT4gY2VsbC5lbGVtZW50Lm5hbWUpXHJcbiAgfVxyXG5cclxuICAvLyBPdmVycmlkZSB0b1N0cmluZyBtZXRob2QgaW4gb3JkZXIgdG8gZGlzcGxheSBhc2NpaSBsZXZlbFxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYFxcXHJcbkxFVkVMOiAke3RoaXMubmFtZX0gWyR7dGhpcy5ncmlkLmNvbHN9eCR7dGhpcy5ncmlkLnJvd3N9XVxcblxcXHJcbkRFU0M6ICR7dGhpcy5kZXNjcmlwdGlvbn1cXG5cXFxyXG5HUk9VUDogJHt0aGlzLmdyb3VwfVxcblxcXHJcbiR7dGhpcy5ncmlkLmFzY2lpUmVuZGVyKCl9XFxuXFxcclxuR09BTFM6ICR7dGhpcy5nb2Fscy5tYXAoaSA9PiBpLnRvU3RyaW5nKCkpfVxcblxcXHJcbkdPQUxTOiAke3RoaXMuY29tcGxldGVkID8gXCJDT01QTEVURVwiIDogXCJJTiBQUk9HUkVTU1wifVxcblxcXHJcbkhJTlRTOiAke3RoaXMuaGludHMubWFwKGkgPT4gaS50b1N0cmluZygpKX1cXG5cclxuVE9PTEJPWDogJHtKU09OLnN0cmluZ2lmeSh0aGlzLnRvb2xib3gpfVxcblxyXG5gO1xyXG4gIH1cclxuXHJcbiAgLy8gZXhwb3J0IEpTT04gZmlsZSB0byBzYXZlIHN0YXRlIG9pIHRoZSBnYW1lXHJcbiAgZXhwb3J0SlNPTigpOiB7fSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICBncm91cDogdGhpcy5ncm91cCxcclxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXHJcbiAgICAgIGNvbHM6IHRoaXMuZ3JpZC5jb2xzLFxyXG4gICAgICByb3dzOiB0aGlzLmdyaWQucm93cyxcclxuICAgICAgY2VsbHM6IHRoaXMuZ3JpZC5jZWxscy5mbGF0TWFwKGNlbGwgPT4gSlNPTi5zdHJpbmdpZnkoY2VsbCkpLFxyXG4gICAgICBoaW50czogdGhpcy5oaW50cy5mbGF0TWFwKGhpbnQgPT4gSlNPTi5zdHJpbmdpZnkoaGludCkpLFxyXG4gICAgICBnb2FsczogdGhpcy5nb2Fscy5mbGF0TWFwKGdvYWwgPT4gSlNPTi5zdHJpbmdpZnkoZ29hbCkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gaW1wb3J0IEpTT04gZmlsZVxyXG4gIHN0YXRpYyBpbXBvcnRKU09OKGpzb246IHtcclxuICAgIGNvbHM6IG51bWJlcjtcclxuICAgIHJvd3M6IG51bWJlcjtcclxuICAgIGNlbGxzOiB7XHJcbiAgICAgIHk6IG51bWJlcjtcclxuICAgICAgeDogbnVtYmVyO1xyXG4gICAgICBlbGVtZW50OiBzdHJpbmc7XHJcbiAgICAgIHJvdGF0aW9uOiBudW1iZXI7XHJcbiAgICAgIGZyb3plbjogYm9vbGVhbjtcclxuICAgIH1bXTtcclxuICAgIGdvYWxzOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB0aHJlc2hvbGQ6IG51bWJlciB9W107XHJcbiAgICBoaW50czogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgbWVzc2FnZTogc3RyaW5nIH1bXTtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBncm91cDogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICB9KTogTGV2ZWwge1xyXG4gICAgY29uc3QgZ3JpZCA9IG5ldyBHcmlkKGpzb24uY29scywganNvbi5yb3dzKTtcclxuICAgIGdyaWQuaW1wb3J0SlNPTihqc29uLmNlbGxzKTtcclxuICAgIC8vIGNvbnN0IGdvYWxzID0gR29hbC5pbXBvcnRKU09OKGpzb24uZ29hbHMpO1xyXG4gICAgLy8gY29uc3QgaGludHMgPSBIaW50LmltcG9ydEpTT04oanNvbi5oaW50cyk7XHJcbiAgICBjb25zdCBnb2FsczogR29hbFtdID0gW107XHJcbiAgICBjb25zdCBoaW50czogSGludFtdID0gW107XHJcbiAgICByZXR1cm4gbmV3IExldmVsKFxyXG4gICAgICBqc29uLmlkLFxyXG4gICAgICBqc29uLm5hbWUsXHJcbiAgICAgIGpzb24uZ3JvdXAsXHJcbiAgICAgIGpzb24uZGVzY3JpcHRpb24sXHJcbiAgICAgIGdyaWQsXHJcbiAgICAgIGdvYWxzLFxyXG4gICAgICBoaW50cyxcclxuICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBpbXBvcnQgSlNPTiBmaWxlXHJcbiAgc3RhdGljIGltcG9ydFYxSlNPTihqc29uOiB7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBncm91cDogc3RyaW5nO1xyXG4gICAgdGlsZXM6IHt9W107XHJcbiAgfSk6IExldmVsIHtcclxuICAgIGNvbnN0IGdyaWQgPSBuZXcgR3JpZChqc29uLndpZHRoLCBqc29uLmhlaWdodCk7XHJcbiAgICBjb25zdCBjZWxsczogQ2VsbFtdID0gW107XHJcbiAgICBqc29uLnRpbGVzLmZvckVhY2goXHJcbiAgICAgICh0aWxlOiB7XHJcbiAgICAgICAgaTogbnVtYmVyO1xyXG4gICAgICAgIGo6IG51bWJlcjtcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgcm90YXRpb246IG51bWJlcjtcclxuICAgICAgICBmcm96ZW46IGJvb2xlYW47XHJcbiAgICAgIH0pID0+IHtcclxuICAgICAgICBjb25zdCBjb29yZCA9IG5ldyBDb29yZCh0aWxlLmksIHRpbGUuaik7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IEVsZW1lbnQuZnJvbU5hbWUodGlsZS5uYW1lLCAxKTtcclxuICAgICAgICBjb25zdCByb3RhdGlvbiA9IGVsZW1lbnQucm90YXRpb25BbmdsZSAqIHRpbGUucm90YXRpb247XHJcbiAgICAgICAgY2VsbHMucHVzaChuZXcgQ2VsbChjb29yZCwgZWxlbWVudCwgcm90YXRpb24sIHRpbGUuZnJvemVuKSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICBncmlkLnNldE1hbnkoLi4uY2VsbHMpO1xyXG4gICAgY29uc3QgZ29hbHM6IEdvYWxbXSA9IFtdO1xyXG4gICAgZ3JpZC5kZXRlY3RvcnMuZm9yRWFjaChkZXRlY3RvciA9PiB7XHJcbiAgICAgIGdvYWxzLnB1c2gobmV3IEdvYWwoZGV0ZWN0b3IuY29vcmQsIDEpKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaGludHM6IEhpbnRbXSA9IFtdO1xyXG4gICAgcmV0dXJuIG5ldyBMZXZlbChcclxuICAgICAgMCxcclxuICAgICAganNvbi5uYW1lLFxyXG4gICAgICBqc29uLmdyb3VwLFxyXG4gICAgICBcIlYxIGxldmVsIGltcG9ydGVkXCIsXHJcbiAgICAgIGdyaWQsXHJcbiAgICAgIGdvYWxzLFxyXG4gICAgICBoaW50cyxcclxuICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuZXhwb3J0IGNvbnN0IGpzb25FbGVtZW50cyA9IFtcclxuICB7XHJcbiAgICBpZDogMCxcclxuICAgIG5hbWU6IFwidm9pZFwiLFxyXG4gICAgbmFtZXYxOiBcIlZvaWRcIixcclxuICAgIGFzY2lpOiBbXCIgXCJdLFxyXG4gICAgZ3JvdXA6IFwiQmFzaWNcIixcclxuICAgIGRlc2NyaXB0aW9uOiBcIlRoZSB2b2lkLi4uXCIsXHJcbiAgICBsaW5rOiBcIi4vZWxlbWVudHMvdm9pZFwiLFxyXG4gICAgYWN0aXZlOiBmYWxzZSxcclxuICAgIHRpbGVzOiBcIlwiLFxyXG4gICAgYWJzb3JwdGlvbjogMCxcclxuICAgIHBoYXNlOiAwLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzJlMDA2YVwiLFxyXG4gICAgbWF0cml4OiBbXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6IDEsXHJcbiAgICBuYW1lOiBcImxhc2VyXCIsXHJcbiAgICBuYW1ldjE6IFwiU291cmNlXCIsXHJcbiAgICBhc2NpaTogW1wiXlwiLCBcIj5cIiwgXCJ2XCIsIFwiPFwiXSxcclxuICAgIGdyb3VwOiBcIkVtaXR0ZXJcIixcclxuICAgIGRlc2NyaXB0aW9uOiBcIkEgb25lLXBob3RvbiBsYXNlciBzb3VyY2VcIixcclxuICAgIGxpbms6IFwiLi9lbGVtZW50cy9sYXNlclwiLFxyXG4gICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgdGlsZXM6IFwiXCIsXHJcbiAgICBhYnNvcnB0aW9uOiAwLFxyXG4gICAgcGhhc2U6IDAsXHJcbiAgICBmb3JlZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcclxuICAgIGJhY2tncm91bmRDb2xvcjogXCJibGFja1wiLFxyXG4gICAgbWF0cml4OiBbXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6IDIsXHJcbiAgICBuYW1lOiBcIm1pcnJvclwiLFxyXG4gICAgbmFtZXYxOiBcIlRoaW5NaXJyb3JcIixcclxuICAgIGFzY2lpOiBbXCJ8XCIsIFwiL1wiLCBcIi1cIiwgXCJcXFxcXCIsIFwifFwiLCBcIi9cIiwgXCItXCIsIFwiXFxcXFwiXSxcclxuICAgIGdyb3VwOiBcIkRpcmVjdGlvblwiLFxyXG4gICAgZGVzY3JpcHRpb246IFwiQSBzaW1wbGUgcmVmbGVjdGluZyBtaXJyb3JcIixcclxuICAgIGxpbms6IFwiLi9lbGVtZW50cy9taXJyb3JcIixcclxuICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICB0aWxlczogXCJcIixcclxuICAgIGFic29ycHRpb246IDAsXHJcbiAgICBwaGFzZTogMCxcclxuICAgIGZvcmVncm91bmRDb2xvcjogXCJ3aGl0ZVwiLFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIsXHJcbiAgICBtYXRyaXg6IFtdXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogMyxcclxuICAgIG5hbWU6IFwiZGV0ZWN0b3JcIixcclxuICAgIG5hbWV2MTogXCJEZXRlY3RvclwiLFxyXG4gICAgYXNjaWk6IFtcIuKHkVwiLCBcIuKHklwiLCBcIuKHk1wiLCBcIuKHkFwiXSxcclxuICAgIGdyb3VwOiBcIkFic29yYmVyXCIsXHJcbiAgICBkZXNjcmlwdGlvbjogXCJBIG9uZS1waG90b24gZGV0ZWN0b3JcIixcclxuICAgIGxpbms6IFwiLi9lbGVtZW50cy9kZXRlY3RvclwiLFxyXG4gICAgYWN0aXZlOiBmYWxzZSxcclxuICAgIHRpbGVzOiBcIlwiLFxyXG4gICAgYWJzb3JwdGlvbjogMSxcclxuICAgIHBoYXNlOiAwLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIixcclxuICAgIG1hdHJpeDogW11cclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiA0LFxyXG4gICAgbmFtZTogXCJyb2NrXCIsXHJcbiAgICBuYW1ldjE6IFwiUm9ja1wiLFxyXG4gICAgYXNjaWk6IFtcIiNcIl0sXHJcbiAgICBncm91cDogXCJBYnNvcmJlclwiLFxyXG4gICAgZGVzY3JpcHRpb246IFwiQW4gYWJzb3JiaW5nIHBldCByb2NrXCIsXHJcbiAgICBsaW5rOiBcIi4vZWxlbWVudHMvcm9ja1wiLFxyXG4gICAgYWN0aXZlOiBmYWxzZSxcclxuICAgIHRpbGVzOiBcIlwiLFxyXG4gICAgYWJzb3JwdGlvbjogMSxcclxuICAgIHBoYXNlOiAwLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIixcclxuICAgIG1hdHJpeDogW11cclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiA1LFxyXG4gICAgbmFtZTogXCJtaW5lXCIsXHJcbiAgICBuYW1ldjE6IFwiTWluZVwiLFxyXG4gICAgYXNjaWk6IFtcIiFcIl0sXHJcbiAgICBncm91cDogXCJBYnNvcmJlclwiLFxyXG4gICAgZGVzY3JpcHRpb246IFwiQW4gZXhwbG9zaXZlIG1pbmUgKGRpc2FybSBKZWFuKVwiLFxyXG4gICAgbGluazogXCIuL2VsZW1lbnRzL21pbmVcIixcclxuICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICB0aWxlczogXCJcIixcclxuICAgIGFic29ycHRpb246IDEsXHJcbiAgICBwaGFzZTogMCxcclxuICAgIGZvcmVncm91bmRDb2xvcjogXCJ3aGl0ZVwiLFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIsXHJcbiAgICBtYXRyaXg6IFtdXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogNixcclxuICAgIG5hbWU6IFwiYmVhbXNwbGl0dGVyXCIsXHJcbiAgICBuYW1ldjE6IFwiVGhpblNwbGl0dGVyXCIsXHJcbiAgICBhc2NpaTogW1wi4oaRXCIsIFwi4oaXXCIsIFwi4oaSXCIsIFwi4oaYXCIsIFwi4oaTXCIsIFwi4oaZXCIsIFwi4oaQXCIsIFwi4oaWXCJdLFxyXG4gICAgZ3JvdXA6IFwiRGlyZWN0aW9uXCIsXHJcbiAgICBkZXNjcmlwdGlvbjogXCJBIGJlYW1zcGxpdHRlclwiLFxyXG4gICAgbGluazogXCIuL2VsZW1lbnRzL2JlYW1zcGxpdHRlclwiLFxyXG4gICAgYWN0aXZlOiBmYWxzZSxcclxuICAgIHRpbGVzOiBcIlwiLFxyXG4gICAgYWJzb3JwdGlvbjogMCxcclxuICAgIHBoYXNlOiAwLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIixcclxuICAgIG1hdHJpeDogW11cclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiA3LFxyXG4gICAgbmFtZTogXCJmaWx0ZXJcIixcclxuICAgIG5hbWV2MTogXCJBYnNvcmJlclwiLFxyXG4gICAgYXNjaWk6IFtcIi1cIl0sXHJcbiAgICBncm91cDogXCJBYnNvcmJlclwiLFxyXG4gICAgZGVzY3JpcHRpb246IFwiQSBuZXV0cmFsIGRlbnNpdHkgZmlsdGVyXCIsXHJcbiAgICBsaW5rOiBcIi4vZWxlbWVudHMvYWJzb3JiZXJcIixcclxuICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICB0aWxlczogXCJcIixcclxuICAgIGFic29ycHRpb246IDAuNSxcclxuICAgIHBoYXNlOiAwLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIixcclxuICAgIG1hdHJpeDogW11cclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiA4LFxyXG4gICAgbmFtZTogXCJwaGFzZWluY1wiLFxyXG4gICAgbmFtZXYxOiBcIlZhY3V1bUphclwiLFxyXG4gICAgYXNjaWk6IFtcIuKGnVwiXSxcclxuICAgIGdyb3VwOiBcIlBoYXNlXCIsXHJcbiAgICBkZXNjcmlwdGlvbjogXCJBIGdsYXNzIHNsYWIgdGhhdCBpbmNyZWFzZXMgcGhhc2UuXCIsXHJcbiAgICBsaW5rOiBcIi4vZWxlbWVudHMvcGhhc2VpbmNcIixcclxuICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICB0aWxlczogXCJcIixcclxuICAgIGFic29ycHRpb246IDAsXHJcbiAgICBwaGFzZTogMC4yNSxcclxuICAgIGZvcmVncm91bmRDb2xvcjogXCJ3aGl0ZVwiLFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIsXHJcbiAgICBtYXRyaXg6IFtdXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogOSxcclxuICAgIG5hbWU6IFwicGhhc2VkZWNcIixcclxuICAgIG5hbWV2MTogXCJHbGFzc1wiLFxyXG4gICAgYXNjaWk6IFtcIuKGnFwiXSxcclxuICAgIGdyb3VwOiBcIlBoYXNlXCIsXHJcbiAgICBkZXNjcmlwdGlvbjogXCJWb2lkIHRoYXQgZGVjcmVhc2VzIHBoYXNlLlwiLFxyXG4gICAgbGluazogXCIuL2VsZW1lbnRzL3BoYXNlZGVjXCIsXHJcbiAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgdGlsZXM6IFwiXCIsXHJcbiAgICBhYnNvcnB0aW9uOiAwLFxyXG4gICAgcGhhc2U6IC0wLjI1LFxyXG4gICAgZm9yZWdyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIixcclxuICAgIG1hdHJpeDogW11cclxuICB9XHJcbl07XHJcbiIsIi8vIEdSSUQgQ0xBU1NcclxuLy8gRklYTUU6IEZpZ3VyZSBhIHdheSB0byBoYXZlIHVpZCBhbmQgY29vcmQgYWNjZXNzIHRvIGNlbGxzXHJcbi8vIEZJWE1FOiBGaWd1cmUgb3V0IGJsYW5rIGNlbGxzIGluIGNvbnN0cnVjdG9yXHJcbmltcG9ydCBDZWxsIGZyb20gXCIuL0NlbGxcIjtcclxuaW1wb3J0IENsdXN0ZXIgZnJvbSBcIi4vQ2x1c3RlclwiO1xyXG5pbXBvcnQgQ29vcmQgZnJvbSBcIi4vQ29vcmRcIjtcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSBcIi4vRWxlbWVudFwiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9HYW1lXCI7XHJcbmltcG9ydCBQb2ludGVyIGZyb20gXCIuL1BvaW50ZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyaWQge1xyXG4gIHB1YmxpYyBjb2xzOiBudW1iZXI7XHJcbiAgcHVibGljIHJvd3M6IG51bWJlcjtcclxuICBwdWJsaWMgbWF0cml4OiBDZWxsW11bXTtcclxuICBwdWJsaWMgY2x1c3RlcnM6IENsdXN0ZXJbXTtcclxuXHJcbiAgY29uc3RydWN0b3Iocm93czogbnVtYmVyLCBjb2xzOiBudW1iZXIsIG1hdHJpeD86IENlbGxbXVtdKSB7XHJcbiAgICB0aGlzLnJvd3MgPSByb3dzO1xyXG4gICAgdGhpcy5jb2xzID0gY29scztcclxuICAgIHRoaXMuY2x1c3RlcnMgPSBbXTtcclxuXHJcbiAgICAvLyBJZiBtYXRyaXggc3BlY2lmaWVkIGV4dHJhY3QgY2VsbHNcclxuICAgIGlmIChtYXRyaXgpIHtcclxuICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBFbHNlIGNyZWF0ZSBibGFuayBjZWxsc1xyXG4gICAgICB0aGlzLm1hdHJpeCA9IG5ldyBBcnJheSh0aGlzLnJvd3MpXHJcbiAgICAgICAgLmZpbGwoMClcclxuICAgICAgICAubWFwKCgpID0+IG5ldyBBcnJheSh0aGlzLmNvbHMpLmZpbGwoMCkpO1xyXG4gICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHJvd3M7IHkrKykge1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgY29sczsgeCsrKSB7XHJcbiAgICAgICAgICB0aGlzLnNldChuZXcgQ2VsbChuZXcgQ29vcmQoeSwgeCksIEVsZW1lbnQuZnJvbU5hbWUoXCJ2b2lkXCIpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIEdldCBjZW50ZXIgY29vcmRpbmF0ZXMgb2YgZ3JpZFxyXG4gIGdldCBjZW50ZXIoKTogQ29vcmQge1xyXG4gICAgcmV0dXJuIG5ldyBDb29yZChNYXRoLmZsb29yKHRoaXMuY29scyAvIDIpLCBNYXRoLmZsb29yKHRoaXMucm93cyAvIDIpKTtcclxuICB9XHJcblxyXG4gIC8vIENlbGxzIGdldHRlcnNcclxuICBnZXQgY2VsbHMoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLm1hdHJpeC5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MuY29uY2F0KHZhbCksIFtdKTtcclxuICB9XHJcbiAgZ2V0IGNvb3JkcygpOiBDb29yZFtdIHtcclxuICAgIHJldHVybiB0aGlzLmNlbGxzLmZsYXRNYXAoY2VsbCA9PiBjZWxsLmNvb3JkKTtcclxuICB9XHJcbiAgZ2V0IHZvaWQoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkQnkoXCJ2b2lkXCIpO1xyXG4gIH1cclxuICAvLyBFbWl0dGVyc1xyXG4gIGdldCBsYXNlcnMoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkQnkoXCJsYXNlclwiKTtcclxuICB9XHJcbiAgLy8gUmVmbGVjdG9yc1xyXG4gIGdldCBtaXJyb3JzKCk6IENlbGxbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEJ5KFwibWlycm9yXCIpO1xyXG4gIH1cclxuICBnZXQgYmVhbXNwbGl0dGVycygpOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRCeShcImJlYW1zcGxpdHRlclwiKTtcclxuICB9XHJcbiAgZ2V0IHJlZmxlY3RvcnMoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLm1pcnJvcnMuY29uY2F0KHRoaXMuYmVhbXNwbGl0dGVycyk7XHJcbiAgfVxyXG4gIC8vIEFic29yYmVyc1xyXG4gIGdldCBtaW5lcygpOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRCeShcIm1pbmVcIik7XHJcbiAgfVxyXG4gIGdldCBkZXRlY3RvcnMoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkQnkoXCJkZXRlY3RvclwiKTtcclxuICB9XHJcbiAgZ2V0IHJvY2tzKCk6IENlbGxbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEJ5KFwicm9ja1wiKTtcclxuICB9XHJcbiAgZ2V0IGZpbHRlcnMoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkQnkoXCJmaWx0ZXJcIik7XHJcbiAgfVxyXG4gIGdldCBhYnNvcmJlcnMoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLm1pbmVzLmNvbmNhdCh0aGlzLmRldGVjdG9ycywgdGhpcy5yb2NrcywgdGhpcy5maWx0ZXJzKTtcclxuICB9XHJcbiAgLy8gUGhhc2Vyc1xyXG4gIGdldCBwaGFzZWluY3MoKTogQ2VsbFtdIHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkQnkoXCJwaGFzZWluY1wiKTtcclxuICB9XHJcbiAgZ2V0IHBoYXNlZGVjcygpOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRCeShcInBoYXNlZGVjXCIpO1xyXG4gIH1cclxuICBnZXQgcGhhc2VzaGlmdGVycygpOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMucGhhc2VkZWNzLmNvbmNhdCh0aGlzLnBoYXNlaW5jcyk7XHJcbiAgfVxyXG5cclxuICAvLyBTZWxlY3QgY2VsbHMgYnkgdHlwZVxyXG4gIHB1YmxpYyBmaWx0ZXJlZEJ5KG5hbWU6IHN0cmluZyk6IENlbGxbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5jZWxscy5maWx0ZXIoY2VsbCA9PiB7XHJcbiAgICAgIHJldHVybiBjZWxsLmVsZW1lbnQubmFtZSA9PT0gbmFtZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gVGVzdCBpZiBjb29yZCBpcyBpbnNpZGUgYm91bmRhcmllc1xyXG4gIHB1YmxpYyBpbmNsdWRlcyhjb29yZDogQ29vcmQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGNvb3JkLnkgPj0gMCAmJlxyXG4gICAgICBjb29yZC55IDwgdGhpcy5yb3dzICYmXHJcbiAgICAgIChjb29yZC54ID49IDAgJiYgY29vcmQueCA8IHRoaXMuY29scylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBTZXQgb25lIGNlbGxcclxuICBwdWJsaWMgc2V0KGNlbGw6IENlbGwpOiBib29sZWFuIHtcclxuICAgIGlmICh0aGlzLmluY2x1ZGVzKGNlbGwuY29vcmQpKSB7XHJcbiAgICAgIHRoaXMubWF0cml4W2NlbGwuY29vcmQueV1bY2VsbC5jb29yZC54XSA9IGNlbGw7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdGhyb3cgbmV3IFJhbmdlRXJyb3IoYENvb3JkaW5hdGUgb3V0IG9mIGJvdW5kcy4gQ2VsbDogWyR7Y2VsbC5jb29yZC54fSwgJHtjZWxsLmNvb3JkLnl9XWApXHJcbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoYENvb3JkaW5hdGUgb3V0IG9mIGJvdW5kcy4gJHtjZWxsLmNvb3JkLnRvU3RyaW5nKCl9YClcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2V0IG9uZSBjZWxsXHJcbiAgcHVibGljIGdldChjb29yZDogQ29vcmQpOiBDZWxsIHtcclxuICAgIHJldHVybiB0aGlzLm1hdHJpeFtjb29yZC55XVtjb29yZC54XTtcclxuICB9XHJcblxyXG4gIC8vIFNldCBtYW55IGNlbGxzXHJcbiAgcHVibGljIHNldE1hbnkoLi4uY2VsbHM6IENlbGxbXSk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGVycm9yVG9nZ2xlID0gdHJ1ZTtcclxuICAgIGNlbGxzLmZvckVhY2goKGNlbGw6IENlbGwpID0+IHtcclxuICAgICAgaWYgKCF0aGlzLmluY2x1ZGVzKGNlbGwuY29vcmQpKSB7XHJcbiAgICAgICAgZXJyb3JUb2dnbGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICB0aGlzLnNldChjZWxsKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGVycm9yVG9nZ2xlO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IG1hbnkgY2VsbHNcclxuICBwdWJsaWMgZ2V0TWFueSguLi5jb29yZHM6IENvb3JkW10pOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIGNvb3Jkcy5tYXAoY29vcmQgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXQoY29vcmQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBNb3ZlIGZyb20gYSBjb29yZCB0byBhbm90aGVyXHJcbiAgcHVibGljIG1vdmUoc3JjOiBDb29yZCwgZHN0OiBDb29yZCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgY2VsbFNyYyA9IHRoaXMuZ2V0KHNyYyk7XHJcbiAgICBjb25zdCBjZWxsRHN0ID0gdGhpcy5nZXQoZHN0KTtcclxuICAgIGlmICghY2VsbFNyYy5mcm96ZW4gJiYgIWNlbGxEc3QuZnJvemVuKSB7XHJcbiAgICAgIHRoaXMuc2V0KG5ldyBDZWxsKHNyYywgY2VsbERzdC5lbGVtZW50LCBjZWxsRHN0LnJvdGF0aW9uKSk7XHJcbiAgICAgIHRoaXMuc2V0KG5ldyBDZWxsKGRzdCwgY2VsbFNyYy5lbGVtZW50LCBjZWxsU3JjLnJvdGF0aW9uKSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBNb3ZlZCAke2NlbGxTcmMuZWxlbWVudH0gZnJvbSAke3NyYy50b1N0cmluZygpfSB0byAke2RzdC50b1N0cmluZygpfWApXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gY29uc29sZS5lcnJvcihgQ291bGRuJ3QgbW92ZSAke2NlbGxTcmMuZWxlbWVudH0gYmVjYXVzZSBvZiBmcm96ZW4gJHtkc3QudG9TdHJpbmcoKX1gKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBEaXN0YW5jZSB0byBleGl0aW5nIGdyaWRcclxuICBwdWJsaWMgZGlzdGFuY2VUb0VzY2FwZShwb2ludGVyOiBQb2ludGVyKTogbnVtYmVyIHtcclxuICAgIHN3aXRjaCAocG9pbnRlci5kaXJlY3Rpb24gJSAzNjApIHtcclxuICAgICAgY2FzZSAwOiAvLyBUT1BcclxuICAgICAgICByZXR1cm4gcG9pbnRlci55O1xyXG4gICAgICBjYXNlIDkwOiAvLyBSSUdIVFxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbHMgLSBwb2ludGVyLnggLSAxO1xyXG4gICAgICBjYXNlIDE4MDogLy8gQk9UVE9NXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cyAtIHBvaW50ZXIueSAtIDE7XHJcbiAgICAgIGNhc2UgMjcwOiAvLyBMRUZUXHJcbiAgICAgICAgcmV0dXJuIHBvaW50ZXIueDtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIGRpcmVjdGlvbnMuLi5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBCYXNpYyBkaXNwbGF5XHJcbiAgcHVibGljIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLm1hdHJpeC52YWx1ZU9mKCkpO1xyXG4gIH1cclxuXHJcbiAgLy8gRHJhd1xyXG4gIHB1YmxpYyBkcmF3KGdhbWU6IEdhbWUpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5yb3dzOyB5KyspIHtcclxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmNvbHM7IHgrKykge1xyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gbmV3IENvb3JkKHksIHgpO1xyXG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldChjb29yZCk7XHJcbiAgICAgICAgY29uc3QgbGFzZXJzID0gZ2FtZS5mcmFtZXNbZ2FtZS5mcmFtZXMubGVuZ3RoIC0gMV0ubGFzZXJDb29yZHMoKTtcclxuICAgICAgICBpZiAoY29vcmQuaXNJbmNsdWRlZEluKGxhc2VycykpIHtcclxuICAgICAgICAgIGdhbWUuZHJhdyhjZWxsLCBcIndoaXRlXCIsIFwicmVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBnYW1lLmRyYXcoY2VsbCwgXCJ3aGl0ZVwiLCBcIiMyZTAwNmFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJbmNsdWRlIHBhcnRpY2xlIGRpc3BsYXkgaW4gYXNjaWkgcmVuZGVyXHJcbiAgcHVibGljIGFzY2lpUmVuZGVyKHBvaW50ZXJzOiBQb2ludGVyW10gPSBbXSk6IHN0cmluZyB7XHJcbiAgICBsZXQgcmVzdWx0ID0gXCIjI1wiLnJlcGVhdCh0aGlzLmNvbHMgKyAxKSArIFwiXFxuXCI7XHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMucm93czsgeSsrKSB7XHJcbiAgICAgIGxldCBhc2NpaUxpbmUgPSBcIiNcIjtcclxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmNvbHM7IHgrKykge1xyXG4gICAgICAgIC8vIEFkZCBzb21lIHNvcnQgb2YgYXNjaWkgei1pbmRleFxyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gbmV3IENvb3JkKHksIHgpO1xyXG4gICAgICAgIGlmIChjb29yZC5pc0luY2x1ZGVkSW4oUG9pbnRlci5tYW55VG9Db29yZHMocG9pbnRlcnMpKSkge1xyXG4gICAgICAgICAgYXNjaWlMaW5lICs9IFwiKiBcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3Qgcm90YXRpb24gPSB0aGlzLmdldChjb29yZCkucm90YXRpb24gLyA0NTtcclxuICAgICAgICAgIGFzY2lpTGluZSArPSB0aGlzLmdldChuZXcgQ29vcmQoeSwgeCkpLmVsZW1lbnQuYXNjaWlbcm90YXRpb25dICsgXCIgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJlc3VsdCArPSBhc2NpaUxpbmUgKyBcIiNcXG5cIjtcclxuICAgIH1cclxuICAgIHJlc3VsdCArPSBcIiMjXCIucmVwZWF0KHRoaXMuY29scyArIDEpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgbGV0IGJhc2ljID0gXCJcIjtcclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5yb3dzOyB5KyspIHtcclxuICAgICAgbGV0IGFzY2lpTGluZSA9IFwiXCI7XHJcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5jb2xzOyB4KyspIHtcclxuICAgICAgICBhc2NpaUxpbmUgKz0gdGhpcy5nZXQobmV3IENvb3JkKHksIHgpKS5lbGVtZW50LmlkO1xyXG4gICAgICB9XHJcbiAgICAgIGJhc2ljICs9IGFzY2lpTGluZSArIFwiXFxuXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmFzaWM7XHJcbiAgfVxyXG5cclxuICAvLyBpbXBvcnQgY2VsbHNcclxuICAvLyB7eDogMiwgeTogMiwgZWxlbWVudDogXCJsYXNlclwiLCByb3RhdGlvbjogOTAsIGZyb3plbjogdHJ1ZX1cclxuICBwdWJsaWMgaW1wb3J0SlNPTihcclxuICAgIGNlbGxzOiBBcnJheTx7XHJcbiAgICAgIHk6IG51bWJlcjtcclxuICAgICAgeDogbnVtYmVyO1xyXG4gICAgICBlbGVtZW50OiBzdHJpbmc7XHJcbiAgICAgIHJvdGF0aW9uOiBudW1iZXI7XHJcbiAgICAgIGZyb3plbjogYm9vbGVhbjtcclxuICAgIH0+XHJcbiAgKTogdm9pZCB7XHJcbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICBjb25zdCBjb29yZCA9IG5ldyBDb29yZChjZWxsLnksIGNlbGwueCk7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBFbGVtZW50LmZyb21OYW1lKGNlbGwuZWxlbWVudCk7XHJcbiAgICAgIHRoaXMuc2V0KG5ldyBDZWxsKGNvb3JkLCBlbGVtZW50LCBjZWxsLnJvdGF0aW9uLCBjZWxsLmZyb3plbikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBleHBvcnQgSlNPTiBmaWxlIHRvIHNhdmUgc3RhdGUgb2kgdGhlIGdhbWVcclxuICBwdWJsaWMgZXhwb3J0SlNPTigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEaXNwbGF5LCBTY2hlZHVsZXIsIEtFWVMgfSBmcm9tIFwicm90LWpzL2xpYi9pbmRleFwiO1xyXG5pbXBvcnQgU2ltcGxlIGZyb20gXCJyb3QtanMvbGliL3NjaGVkdWxlci9zaW1wbGVcIjtcclxuXHJcbmltcG9ydCBDb29yZCBmcm9tIFwiLi9Db29yZFwiO1xyXG5pbXBvcnQgQ2VsbCBmcm9tIFwiLi9DZWxsXCI7XHJcbmltcG9ydCBHcmlkIGZyb20gXCIuL0dyaWRcIjtcclxuaW1wb3J0IExldmVsIGZyb20gXCIuL0xldmVsXCI7XHJcbmltcG9ydCBHYW1lU3RhdGUgZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCBTdGF0dXNMaW5lIGZyb20gXCIuL1N0YXR1c0xpbmVcIjtcclxuaW1wb3J0IElucHV0VXRpbGl0eSBmcm9tIFwiLi9JbnB1dFV0aWxpdHlcIjtcclxuaW1wb3J0IE1lc3NhZ2VMb2cgZnJvbSBcIi4vTWVzc2FnZUxvZ1wiO1xyXG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL1BsYXllclwiO1xyXG5pbXBvcnQgRnJhbWUgZnJvbSBcIi4vRnJhbWVcIjtcclxuaW1wb3J0IHsgQWN0b3IsIEFjdG9yVHlwZSB9IGZyb20gXCIuL0FjdG9yXCI7XHJcbmltcG9ydCB7IEdseXBoIH0gZnJvbSBcIi4vR2x5cGhcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xyXG4gIHByaXZhdGUgZGlzcGxheTogRGlzcGxheTtcclxuICBwcml2YXRlIHNjaGVkdWxlcjogU2ltcGxlO1xyXG4gIHByaXZhdGUgbGV2ZWw6IExldmVsO1xyXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXI7XHJcbiAgcHJpdmF0ZSBzdGF0dXNMaW5lOiBTdGF0dXNMaW5lO1xyXG4gIHByaXZhdGUgbWVzc2FnZUxvZzogTWVzc2FnZUxvZztcclxuICBwcml2YXRlIGdhbWVTaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XHJcbiAgcHJpdmF0ZSBtYXBTaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XHJcbiAgcHJpdmF0ZSBzdGF0dXNMaW5lUG9zaXRpb246IENvb3JkO1xyXG4gIHByaXZhdGUgYWN0aW9uTG9nUG9zaXRpb246IENvb3JkO1xyXG4gIHByaXZhdGUgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgcHVibGljIGdyaWQ6IEdyaWQ7XHJcbiAgcHVibGljIGZyYW1lczogRnJhbWVbXTtcclxuXHJcbiAgY29uc3RydWN0b3IobGV2ZWw6IExldmVsKSB7XHJcbiAgICB0aGlzLm1hcFNpemUgPSB7IHdpZHRoOiBsZXZlbC5ncmlkLmNvbHMsIGhlaWdodDogbGV2ZWwuZ3JpZC5yb3dzIH07XHJcbiAgICB0aGlzLmdhbWVTaXplID0ge1xyXG4gICAgICB3aWR0aDogdGhpcy5tYXBTaXplLndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHRoaXMubWFwU2l6ZS5oZWlnaHRcclxuICAgIH07XHJcbiAgICB0aGlzLnN0YXR1c0xpbmVQb3NpdGlvbiA9IG5ldyBDb29yZCh0aGlzLmdhbWVTaXplLmhlaWdodCAtIDQsIDApO1xyXG4gICAgdGhpcy5hY3Rpb25Mb2dQb3NpdGlvbiA9IG5ldyBDb29yZCh0aGlzLmdhbWVTaXplLmhlaWdodCAtIDMsIDApO1xyXG4gICAgdGhpcy5mcmFtZXMgPSBbXTtcclxuXHJcbiAgICBjb25zdCB0aWxlU2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgIHRpbGVTZXQuc3JjID0gXCIuL3RpbGVzL3RpbGVtYXAucG5nXCI7XHJcbiAgICB0aGlzLmRpc3BsYXkgPSBuZXcgRGlzcGxheSh7XHJcbiAgICAgIGxheW91dDogXCJ0aWxlLWdsXCIsXHJcbiAgICAgIGJnOiBcInRyYW5zcGFyZW50XCIsXHJcbiAgICAgIHRpbGVXaWR0aDogNjQsXHJcbiAgICAgIHRpbGVIZWlnaHQ6IDY0LFxyXG4gICAgICAvLyB0aWxlQ29sb3JpemU6IHRydWUsXHJcbiAgICAgIHRpbGVTZXQsXHJcbiAgICAgIHRpbGVNYXA6IHtcclxuICAgICAgICAvLyBQYXNzaXZlLCBlbmVyZ2l6ZWQsIGFjdGl2ZSBlbGVtZW50c1xyXG4gICAgICAgIC8vIHZvaWRcclxuICAgICAgICBcIkBcIjogWzAsIDE5Ml0sXHJcbiAgICAgICAgLy8gTGFzZXJcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTogb2JqZWN0LWxpdGVyYWwta2V5LXF1b3Rlc1xyXG4gICAgICAgIFwiXlwiOiBbMCwgMF0sXHJcbiAgICAgICAgXCI+XCI6IFs2NCwgMF0sXHJcbiAgICAgICAgdjogWzEyOCwgMF0sXHJcbiAgICAgICAgXCI8XCI6IFsxOTIsIDBdLFxyXG4gICAgICAgIC8vIHJvY2sgcGFzc2l2ZSwgZW5lcmdpemVkIGFuZCBhY3RpdmVcclxuICAgICAgICBcIiNcIjogWzAsIDY0XSxcclxuICAgICAgICByOiBbNjQsIDY0XSxcclxuICAgICAgICBSOiBbMTI4LCA2NF0sXHJcbiAgICAgICAgLy8gZGV0ZWN0b3IgcGFzc2l2ZSwgZW5lcmdpemVkIGFuZCBhY3RpdmVcclxuICAgICAgICBcIuKHkVwiOiBbMCwgMzg0XSxcclxuICAgICAgICBcIuKHklwiOiBbNjQsIDM4NF0sXHJcbiAgICAgICAgXCLih5NcIjogWzEyOCwgMzg0XSxcclxuICAgICAgICBcIuKHkFwiOiBbMTkyLCAzODRdLFxyXG4gICAgICAgIC8vIG9tbmkgZGV0ZWN0b3IgcGFzc2l2ZSwgZW5lcmdpemVkLCBhY3RpdmVcclxuICAgICAgICBcIsKkXCI6IFswLCA1MTJdLFxyXG4gICAgICAgIE86IFswLCA1MTJdLFxyXG4gICAgICAgIC8vIHBob3RvblxyXG4gICAgICAgIFwifjBcIjogWzcwNCwgMF0sXHJcbiAgICAgICAgXCJ+MVwiOiBbNzY4LCAwXSxcclxuICAgICAgICAvLyBtaW5lXHJcbiAgICAgICAgXCIqcFwiOiBbODMyLCAwXSxcclxuICAgICAgICBcIiplXCI6IFs4OTYsIDBdLFxyXG4gICAgICAgIFwiKmFcIjogWzk2MCwgMF0sXHJcbiAgICAgICAgLy8gbWlycm9yXHJcbiAgICAgICAgXCJ8XCI6IFswLCA4OTZdLFxyXG4gICAgICAgIFwiL1wiOiBbNjQsIDg5Nl0sXHJcbiAgICAgICAgXCItXCI6IFsxMjgsIDg5Nl0sXHJcbiAgICAgICAgXCJcXFxcXCI6IFsxOTIsIDg5Nl0sXHJcbiAgICAgICAgLy8gYmVhbXNwbGl0dGVyXHJcbiAgICAgICAgXCLihpFcIjogWzAsIDk2MF0sXHJcbiAgICAgICAgXCLihpdcIjogWzY0LCA5NjBdLFxyXG4gICAgICAgIFwi4oaSXCI6IFsxMjgsIDk2MF0sXHJcbiAgICAgICAgXCLihphcIjogWzE5MiwgOTYwXSxcclxuICAgICAgICBcIuKGk1wiOiBbMTkyLCA5NjBdLFxyXG4gICAgICAgIFwi4oaZXCI6IFsxOTIsIDk2MF0sXHJcbiAgICAgICAgXCLihpBcIjogWzE5MiwgOTYwXSxcclxuICAgICAgICBcIuKGllwiOiBbMTkyLCA5NjBdLFxyXG4gICAgICAgIC8vIGdsYXNzIHNsYWJcclxuICAgICAgICBHOiBbMTE1MiwgMF0sXHJcbiAgICAgICAgLy8gdm9pZFxyXG4gICAgICAgIFY6IFsxMjE2LCAwXSxcclxuICAgICAgICAvLyBuZXV0cmFsIGRlbnNpdHkgZmlsdGVyXHJcbiAgICAgICAgRjogWzEyODAsIDBdLFxyXG4gICAgICAgIC8vIEJsYW5rIHRpbGVcclxuICAgICAgICAvLyBcIiBcIjogWzEzNDQsIDBdLFxyXG4gICAgICAgIFwiIFwiOiBbMTQwOCwgMF0sXHJcbiAgICAgICAgYjogWzE0NzIsIDBdLFxyXG4gICAgICAgIG46IFsxNTM2LCAwXVxyXG4gICAgICB9LFxyXG4gICAgICB3aWR0aDogdGhpcy5nYW1lU2l6ZS53aWR0aCxcclxuICAgICAgaGVpZ2h0OiB0aGlzLmdhbWVTaXplLmhlaWdodCxcclxuICAgICAgZm9udFNpemU6IDIwXHJcbiAgICB9KTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZGlzcGxheS5nZXRDb250YWluZXIoKSEpO1xyXG5cclxuICAgIC8vIEdhbWUgbWVjaGFuaWNzXHJcbiAgICB0aGlzLmdhbWVTdGF0ZSA9IG5ldyBHYW1lU3RhdGUoKTtcclxuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcclxuICAgIHRoaXMuZ3JpZCA9IHRoaXMubGV2ZWwuZ3JpZDtcclxuICAgIHRoaXMuZnJhbWVzLnB1c2gobmV3IEZyYW1lKGxldmVsKSk7XHJcbiAgICB0aGlzLnN0YXR1c0xpbmUgPSBuZXcgU3RhdHVzTGluZShcclxuICAgICAgdGhpcyxcclxuICAgICAgdGhpcy5zdGF0dXNMaW5lUG9zaXRpb24sXHJcbiAgICAgIHRoaXMuZ2FtZVNpemUud2lkdGgsXHJcbiAgICAgIHt9XHJcbiAgICApO1xyXG4gICAgdGhpcy5tZXNzYWdlTG9nID0gbmV3IE1lc3NhZ2VMb2coXHJcbiAgICAgIHRoaXMsXHJcbiAgICAgIHRoaXMuYWN0aW9uTG9nUG9zaXRpb24sXHJcbiAgICAgIHRoaXMuZ2FtZVNpemUud2lkdGgsXHJcbiAgICAgIDNcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5pbml0aWFsaXplR2FtZSgpO1xyXG4gICAgdGhpcy5tYWluTG9vcCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0dGVycyBhbmQgc2V0dGVyc1xyXG4gIGdldCBwbGF5ZXJDb29yZCgpOiBDb29yZCB7XHJcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuY29vcmQ7XHJcbiAgfVxyXG4gIGdldCBwbGF5ZXJDZWxsKCk6IENlbGwge1xyXG4gICAgcmV0dXJuIHRoaXMucGxheWVyLmNlbGw7XHJcbiAgfVxyXG5cclxuICBkcmF3KFxyXG4gICAgY2VsbDogQ2VsbCxcclxuICAgIGZvcmVncm91bmRDb2xvciA9IFwid2hpdGVcIixcclxuICAgIGJhY2tncm91bmRDb2xvciA9IFwiIzJlMDA2YVwiXHJcbiAgKTogdm9pZCB7XHJcbiAgICAvLyB0aGlzLmRpc3BsYXkuZHJhdyhjZWxsLngsIGNlbGwueSwgY2VsbC5hc2NpaSwgY2VsbC5mb3JlZ3JvdW5kQ29sb3IsIGNlbGwuYmFja2dyb3VuZENvbG9yKVxyXG4gICAgdGhpcy5kaXNwbGF5LmRyYXcoXHJcbiAgICAgIGNlbGwueCxcclxuICAgICAgY2VsbC55LFxyXG4gICAgICBjZWxsLmFzY2lpLFxyXG4gICAgICBmb3JlZ3JvdW5kQ29sb3IsXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIExhc2VyIGxpbmVzXHJcbiAgZHJhd0xhc2VyKGZyYW1lOiBGcmFtZSk6IHZvaWQge1xyXG4gICAgY29uc3QgbGFzZXJDb29yZHMgPSBmcmFtZS5sYXNlckNvb3JkcygpO1xyXG4gICAgbGFzZXJDb29yZHMuZm9yRWFjaCgoY29vcmQ6IENvb3JkKSA9PiB7XHJcbiAgICAgIHRoaXMuZGlzcGxheS5kcmF3KGNvb3JkLnksIGNvb3JkLngsIFwiXCIsIFwiXCIsIFwiIzAwZmYwMFwiKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gRHJhdyBwbGF5ZXJcclxuICBkcmF3UGxheWVyKGNvb3JkOiBDb29yZCwgZ2x5cGg6IEdseXBoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3BsYXkuZHJhdyhcclxuICAgICAgY29vcmQueSxcclxuICAgICAgY29vcmQueCxcclxuICAgICAgZ2x5cGguY2hhcmFjdGVyLFxyXG4gICAgICBnbHlwaC5mb3JlZ3JvdW5kQ29sb3IsXHJcbiAgICAgIGdseXBoLmJhY2tncm91bmRDb2xvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIExvZyBzdGF0ZSB0byBjb25zb2xlXHJcbiAgZHJhd1RleHQoY29vcmQ6IENvb3JkLCB0ZXh0OiBzdHJpbmcsIG1heFdpZHRoPzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmxvZyhjb29yZC55LCBjb29yZC54LCB0ZXh0LCBtYXhXaWR0aCk7XHJcbiAgfVxyXG5cclxuICAvLyBJbml0IGdhbWVcclxuICBwcml2YXRlIGluaXRpYWxpemVHYW1lKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwbGF5LmNsZWFyKCk7XHJcbiAgICB0aGlzLm1lc3NhZ2VMb2cuY2xlYXIoKTtcclxuICAgIGlmICghdGhpcy5nYW1lU3RhdGUuaXNHYW1lT3ZlcigpIHx8IHRoaXMuZ2FtZVN0YXRlLmRvUmVzdGFydEdhbWUoKSkge1xyXG4gICAgICB0aGlzLnJlc2V0U3RhdHVzTGluZSgpO1xyXG4gICAgICB0aGlzLndyaXRlSGVscE1lc3NhZ2UoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzTGluZS5ib3hlcyA9IDA7XHJcbiAgICB9XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5yZXNldCgpO1xyXG4gICAgdGhpcy5ncmlkLmRyYXcodGhpcyk7XHJcbiAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIodGhpcywgdGhpcy5ncmlkLmNlbnRlcik7XHJcbiAgICB0aGlzLnNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIuU2ltcGxlKCk7XHJcbiAgICB0aGlzLnNjaGVkdWxlci5hZGQodGhpcy5wbGF5ZXIsIHRydWUpO1xyXG4gICAgdGhpcy5kcmF3UGFuZWwoKTtcclxuICB9XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgcHJpdmF0ZSBhc3luYyBtYWluTG9vcCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgbGV0IGFjdG9yOiBBY3RvcjtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgIGFjdG9yID0gdGhpcy5zY2hlZHVsZXIubmV4dCgpO1xyXG4gICAgICBpZiAoIWFjdG9yKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGF3YWl0IGFjdG9yLmFjdCgpO1xyXG4gICAgICBpZiAoYWN0b3IudHlwZSA9PT0gQWN0b3JUeXBlLlBsYXllcikge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzTGluZS50dXJucyArPSAxO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmRyYXdQYW5lbCgpO1xyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaXNHYW1lT3ZlcigpKSB7XHJcbiAgICAgICAgYXdhaXQgSW5wdXRVdGlsaXR5LndhaXRGb3JJbnB1dCh0aGlzLmhhbmRsZUlucHV0LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUdhbWUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkcmF3UGFuZWwoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3BsYXkuY2xlYXIoKTtcclxuICAgIC8vIHRoaXMuZ3JpZC5kcmF3KHRoaXMpO1xyXG4gICAgdGhpcy5zdGF0dXNMaW5lLmRyYXcoKTtcclxuICAgIHRoaXMubWVzc2FnZUxvZy5kcmF3KCk7XHJcbiAgICB0aGlzLmRyYXdQbGF5ZXIodGhpcy5wbGF5ZXIuY29vcmQsIHRoaXMucGxheWVyLmdseXBoKTtcclxuICAgIC8vIGZvciAobGV0IGVuZW15IG9mIHRoaXMuZW5lbWllcykge1xyXG4gICAgLy8gICAgIHRoaXMuZHJhdyhlbmVteS5wb3NpdGlvbiwgZW5lbXkuZ2x5cGgpO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVJbnB1dChldmVudDogS2V5Ym9hcmRFdmVudCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgY29kZSA9IGV2ZW50LmtleUNvZGU7XHJcbiAgICByZXR1cm4gY29kZSA9PT0gS0VZUy5WS19TUEFDRSB8fCBjb2RlID09PSBLRVlTLlZLX1JFVFVSTjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzZXRTdGF0dXNMaW5lKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdGF0dXNMaW5lLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHdyaXRlSGVscE1lc3NhZ2UoKTogdm9pZCB7XHJcbiAgICBjb25zdCBoZWxwTWVzc2FnZSA9IFtcclxuICAgICAgYEkgLSAke3RoaXMubGV2ZWwubmFtZX1gXHJcbiAgICAgIC8vIGBNb3ZlOiBaUVNELCBBZGQ6IDEyMy4uLiwgUm90YXRlOiBBRWAsXHJcbiAgICAgIC8vIGBGaXJlIHRoZSBsYXowcjU6IFNwYWNlIFN0ZXBzOiBSRmBcclxuICAgIF07XHJcbiAgICBmb3IgKGxldCBpbmRleCA9IGhlbHBNZXNzYWdlLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcclxuICAgICAgdGhpcy5tZXNzYWdlTG9nLmFwcGVuZFRleHQoaGVscE1lc3NhZ2VbaW5kZXhdKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIFRFUk1JTkFMIFNUWUxFXHJcbi8vIHRoaXMuZGlzcGxheSA9IG5ldyBEaXNwbGF5KHtcclxuLy8gICAgIHdpZHRoOiB0aGlzLmdhbWVTaXplLndpZHRoLFxyXG4vLyAgICAgaGVpZ2h0OiB0aGlzLmdhbWVTaXplLmhlaWdodCxcclxuLy8gICAgIHRpbGVDb2xvcml6ZTogdHJ1ZSxcclxuLy8gICAgIGZvbnRTaXplOiAzMFxyXG4vLyB9KVxyXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVN0YXRlIHtcclxuICBhY2hpZXZlZEdvYWxzOiBib29sZWFuO1xyXG4gIG5vUG9pbnRlcnM6IGJvb2xlYW47XHJcbiAgbm90RW5vdWdoSW50ZW5zaXR5OiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5hY2hpZXZlZEdvYWxzID0gZmFsc2U7XHJcbiAgICB0aGlzLm5vUG9pbnRlcnMgPSBmYWxzZTtcclxuICAgIHRoaXMubm90RW5vdWdoSW50ZW5zaXR5ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBkb1N0YXJ0TmV4dFJvdW5kKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICF0aGlzLm5vUG9pbnRlcnM7XHJcbiAgfVxyXG5cclxuICBkb1Jlc3RhcnRHYW1lKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubm9Qb2ludGVycyB8fCB0aGlzLm5vdEVub3VnaEludGVuc2l0eTtcclxuICB9XHJcblxyXG4gIGlzR2FtZU92ZXIoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5hY2hpZXZlZEdvYWxzIHx8IHRoaXMubm9Qb2ludGVycyB8fCB0aGlzLm5vdEVub3VnaEludGVuc2l0eTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgcGFkUmlnaHQsIHBhZExlZnQgfSBmcm9tIFwiLi9IZWxwZXJzXCI7XHJcbmltcG9ydCBHYW1lIGZyb20gXCIuL0dhbWVcIjtcclxuaW1wb3J0IENvb3JkIGZyb20gXCIuL0Nvb3JkXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0dXNMaW5lIHtcclxuICB0dXJuczogbnVtYmVyO1xyXG4gIHBpbmVhcHBsZXM6IG51bWJlcjtcclxuICBib3hlczogbnVtYmVyO1xyXG4gIG1heEJveGVzOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBnYW1lOiBHYW1lO1xyXG4gIHByaXZhdGUgY29vcmQ6IENvb3JkO1xyXG4gIHByaXZhdGUgbWF4V2lkdGg6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBnYW1lOiBHYW1lLFxyXG4gICAgY29vcmQ6IENvb3JkLFxyXG4gICAgbWF4V2lkdGg6IG51bWJlcixcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBwYXJhbXM6IGFueSA9IHt9XHJcbiAgKSB7XHJcbiAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgdGhpcy5jb29yZCA9IGNvb3JkO1xyXG4gICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xyXG4gICAgdGhpcy50dXJucyA9IHBhcmFtcy50dXJucyB8fCAwO1xyXG4gIH1cclxuXHJcbiAgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnR1cm5zID0gMDtcclxuICB9XHJcblxyXG4gIGRyYXcoKTogdm9pZCB7XHJcbiAgICBjb25zdCBwbGF5ZXJDZWxsID0gdGhpcy5nYW1lLnBsYXllckNlbGw7XHJcbiAgICBjb25zdCBwbGF5ZXJUZXh0ID0gYFR1cm5zOiAke3BhZFJpZ2h0KFxyXG4gICAgICB0aGlzLnR1cm5zLnRvU3RyaW5nKCksXHJcbiAgICAgIDZcclxuICAgICl9IHBsYXllcjogJHtwYWRMZWZ0KHRoaXMuZ2FtZS5wbGF5ZXJDb29yZC50b1N0cmluZygpLCA4KX1gO1xyXG4gICAgdGhpcy5nYW1lLmRyYXdUZXh0KHRoaXMuY29vcmQsIHBsYXllclRleHQsIHRoaXMubWF4V2lkdGgpO1xyXG4gICAgY29uc3QgY2VsbFRleHQgPSBgQ2VsbDogJHtwbGF5ZXJDZWxsLmVsZW1lbnQubmFtZX0gLSBSb3RhdGlvbjogJHtcclxuICAgICAgcGxheWVyQ2VsbC5yb3RhdGlvblxyXG4gICAgfcKwICR7cGxheWVyQ2VsbC5mcm96ZW4gPyBcImZyb3plblwiIDogXCJcIn1gO1xyXG4gICAgdGhpcy5nYW1lLmRyYXdUZXh0KHRoaXMuY29vcmQucmlnaHQsIGNlbGxUZXh0LCB0aGlzLm1heFdpZHRoKTtcclxuICB9XHJcbn1cclxuIiwiLy8gQ29udmVydCBhbmdsZXMgdG8gdW5pY29kZSBzeW1ib2xzXHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RlbXBsYXRlOlVuaWNvZGVfY2hhcnRfQXJyb3dzXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmdsZVRvU3ltYm9sKGFuZ2xlOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIGFuZ2xlID0gYW5nbGUgJSAzNjA7XHJcbiAgc3dpdGNoIChhbmdsZSkge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICByZXR1cm4gXCLihpFcIjtcclxuICAgIGNhc2UgNDU6XHJcbiAgICAgIHJldHVybiBcIuKGl1wiO1xyXG4gICAgY2FzZSA5MDpcclxuICAgICAgcmV0dXJuIFwi4oaSXCI7XHJcbiAgICBjYXNlIDEzNTpcclxuICAgICAgcmV0dXJuIFwi4oaYXCI7XHJcbiAgICBjYXNlIDE4MDpcclxuICAgICAgcmV0dXJuIFwi4oaTXCI7XHJcbiAgICBjYXNlIDIyNTpcclxuICAgICAgcmV0dXJuIFwi4oaZXCI7XHJcbiAgICBjYXNlIDI3MDpcclxuICAgICAgcmV0dXJuIFwi4oaQXCI7XHJcbiAgICBjYXNlIDMxNTpcclxuICAgICAgcmV0dXJuIFwi4oaWXCI7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb21ldGhpbmcgaXMgd3Jvbmcgd2l0aCBwcm92aWRlZCBhbmdsZS5cIik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3ltYm9sVG9BbmdsZShkaXJlY3Rpb246IHN0cmluZyk6IG51bWJlciB7XHJcbiAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgIGNhc2UgXCLihpFcIjpcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICBjYXNlIFwi4oaXXCI6XHJcbiAgICAgIHJldHVybiA0NTtcclxuICAgIGNhc2UgXCLihpJcIjpcclxuICAgICAgcmV0dXJuIDkwO1xyXG4gICAgY2FzZSBcIuKGmFwiOlxyXG4gICAgICByZXR1cm4gMTM1O1xyXG4gICAgY2FzZSBcIuKGk1wiOlxyXG4gICAgICByZXR1cm4gMTgwO1xyXG4gICAgY2FzZSBcIuKGmVwiOlxyXG4gICAgICByZXR1cm4gMjI1O1xyXG4gICAgY2FzZSBcIuKGkFwiOlxyXG4gICAgICByZXR1cm4gMjcwO1xyXG4gICAgY2FzZSBcIuKGllwiOlxyXG4gICAgICByZXR1cm4gMzE1O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU29tZXRoaW5nIGlzIHdyb25nIHdpdGggcHJvdmlkZWQgZGlyZWN0aW9uIHN0cmluZy5cIik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFkTGVmdChcclxuICB0ZXh0OiBzdHJpbmcsXHJcbiAgbGVuZ3RoOiBudW1iZXIsXHJcbiAgY2hhcmFjdGVyPzogc3RyaW5nXHJcbik6IHN0cmluZyB7XHJcbiAgY29uc3QgY2hhciA9IGNoYXJhY3RlciB8fCBcIiBcIjtcclxuICB3aGlsZSAodGV4dC5sZW5ndGggPCBsZW5ndGgpIHtcclxuICAgIHRleHQgPSBjaGFyICsgdGV4dDtcclxuICB9XHJcbiAgcmV0dXJuIHRleHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWRSaWdodChcclxuICB0ZXh0OiBzdHJpbmcsXHJcbiAgbGVuZ3RoOiBudW1iZXIsXHJcbiAgY2hhcmFjdGVyPzogc3RyaW5nXHJcbik6IHN0cmluZyB7XHJcbiAgY29uc3QgY2hhciA9IGNoYXJhY3RlciB8fCBcIiBcIjtcclxuICB3aGlsZSAodGV4dC5sZW5ndGggPCBsZW5ndGgpIHtcclxuICAgIHRleHQgKz0gY2hhcjtcclxuICB9XHJcbiAgcmV0dXJuIHRleHQ7XHJcbn1cclxuIiwiaW1wb3J0IEdhbWUgZnJvbSBcIi4vR2FtZVwiO1xyXG5pbXBvcnQgQ29vcmQgZnJvbSBcIi4vQ29vcmRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lc3NhZ2VMb2cge1xyXG4gIHByaXZhdGUgbGluZXM6IHN0cmluZ1tdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZ2FtZTogR2FtZSxcclxuICAgIHByaXZhdGUgcG9zaXRpb246IENvb3JkLFxyXG4gICAgcHJpdmF0ZSBtYXhXaWR0aDogbnVtYmVyLFxyXG4gICAgcHJpdmF0ZSBtYXhMaW5lczogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLmxpbmVzID0gW107XHJcbiAgfVxyXG5cclxuICBjbGVhcigpOiB2b2lkIHtcclxuICAgIHRoaXMubGluZXMgPSBbXTtcclxuICB9XHJcblxyXG4gIGFwcGVuZFRleHQodGV4dDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLmxpbmVzLnNwbGljZSgwLCAwLCB0ZXh0KTtcclxuICAgIGlmICh0aGlzLmxpbmVzLmxlbmd0aCA+IHRoaXMubWF4TGluZXMpIHtcclxuICAgICAgdGhpcy5saW5lcy5zcGxpY2UodGhpcy5tYXhMaW5lcywgdGhpcy5saW5lcy5sZW5ndGggLSB0aGlzLm1heExpbmVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXcoKTogdm9pZCB7XHJcbiAgICBjb25zdCBsaW5lUG9zaXRpb24gPSBuZXcgQ29vcmQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xyXG4gICAgZm9yIChcclxuICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgaW5kZXggPCB0aGlzLm1heExpbmVzICYmIGluZGV4IDwgdGhpcy5saW5lcy5sZW5ndGg7XHJcbiAgICAgICsraW5kZXhcclxuICAgICkge1xyXG4gICAgICB0aGlzLmdhbWUuZHJhd1RleHQobGluZVBvc2l0aW9uLCB0aGlzLmxpbmVzW2luZGV4XSwgdGhpcy5tYXhXaWR0aCk7XHJcbiAgICAgICsrbGluZVBvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEtFWVMgfSBmcm9tIFwicm90LWpzXCI7XHJcbmltcG9ydCB7IEdseXBoIH0gZnJvbSBcIi4vR2x5cGhcIjtcclxuaW1wb3J0IHsgQWN0b3IsIEFjdG9yVHlwZSB9IGZyb20gXCIuL0FjdG9yXCI7XHJcbmltcG9ydCBJbnB1dFV0aWxpdHkgZnJvbSBcIi4vSW5wdXRVdGlsaXR5XCI7XHJcbmltcG9ydCBDb29yZCBmcm9tIFwiLi9Db29yZFwiO1xyXG5pbXBvcnQgQ2VsbCBmcm9tIFwiLi9DZWxsXCI7XHJcbmltcG9ydCBHYW1lIGZyb20gXCIuL0dhbWVcIjtcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSBcIi4vRWxlbWVudFwiO1xyXG5pbXBvcnQgRmlsZVNhdmVyID0gcmVxdWlyZShcImZpbGUtc2F2ZXJcIik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIgaW1wbGVtZW50cyBBY3RvciB7XHJcbiAgZ2x5cGg6IEdseXBoO1xyXG4gIHR5cGU6IEFjdG9yVHlwZTtcclxuICBwcml2YXRlIGdhbWU6IEdhbWU7XHJcbiAgcHVibGljIGNvb3JkOiBDb29yZDtcclxuXHJcbiAgY29uc3RydWN0b3IoZ2FtZTogR2FtZSwgY29vcmQ6IENvb3JkKSB7XHJcbiAgICB0aGlzLmdseXBoID0gbmV3IEdseXBoKFwiQFwiLCBcIiNmZjBcIiwgXCIjZmYwMGZmXCIpO1xyXG4gICAgdGhpcy50eXBlID0gQWN0b3JUeXBlLlBsYXllcjtcclxuICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICB0aGlzLmNvb3JkID0gY29vcmQ7XHJcbiAgfVxyXG5cclxuICAvLyBHZXR0ZXJzIGFuZCBzZXR0ZXJzXHJcbiAgZ2V0IGNlbGwoKTogQ2VsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5nYW1lLmdyaWQuZ2V0KHRoaXMuY29vcmQpO1xyXG4gIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1hbnlcclxuICBhY3QoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBJbnB1dFV0aWxpdHkud2FpdEZvcklucHV0KHRoaXMuaGFuZGxlSW5wdXQuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICAvLyBPZmZzZXQgb2YgbW92ZW1lbnRcclxuICBwcml2YXRlIGhhbmRsZUlucHV0KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB7XHJcbiAgICBsZXQgdmFsaWRJbnB1dCA9IGZhbHNlO1xyXG4gICAgbGV0IG5ld0Nvb3JkOiBDb29yZCA9IHRoaXMuY29vcmQ7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgLy8gTW92ZW1lbnRcclxuICAgICAgY2FzZSBLRVlTLlZLX1o6XHJcbiAgICAgIGNhc2UgS0VZUy5WS19VUDpcclxuICAgICAgICBuZXdDb29yZCA9IHRoaXMuY29vcmQudG9wO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEtFWVMuVktfRDpcclxuICAgICAgY2FzZSBLRVlTLlZLX1JJR0hUOlxyXG4gICAgICAgIG5ld0Nvb3JkID0gdGhpcy5jb29yZC5yaWdodDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBLRVlTLlZLX1M6XHJcbiAgICAgIGNhc2UgS0VZUy5WS19ET1dOOlxyXG4gICAgICAgIG5ld0Nvb3JkID0gdGhpcy5jb29yZC5ib3R0b207XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgS0VZUy5WS19ROlxyXG4gICAgICBjYXNlIEtFWVMuVktfTEVGVDpcclxuICAgICAgICBuZXdDb29yZCA9IHRoaXMuY29vcmQubGVmdDtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIC8vIFJvdGF0aW9ucywgZnJlZXppbmdcclxuICAgICAgY2FzZSBLRVlTLlZLX0E6XHJcbiAgICAgICAgdGhpcy5jZWxsLnJvdGF0ZSgtdGhpcy5jZWxsLmVsZW1lbnQucm90YXRpb25BbmdsZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgS0VZUy5WS19FOlxyXG4gICAgICAgIHRoaXMuY2VsbC5yb3RhdGUodGhpcy5jZWxsLmVsZW1lbnQucm90YXRpb25BbmdsZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgS0VZUy5WS19GOlxyXG4gICAgICAgIHRoaXMuY2VsbC50b2dnbGVGcmVlemUoKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIC8vIFNhdmUgSlNPTiBmaWxlIHdpdGggbGV2ZWxcclxuICAgICAgY2FzZSBLRVlTLlZLX0YxOlxyXG4gICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLmdhbWUuZnJhbWVzWzBdLmxldmVsLmV4cG9ydEpTT04oKTtcclxuICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGpzb24pXSwge1xyXG4gICAgICAgICAgdHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgXCJsZXZlbC5qc29uXCIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgLy8gRWxlbWVudHNcclxuICAgICAgY2FzZSBLRVlTLlZLX1FVT1RFOlxyXG4gICAgICAgIHRoaXMuY2VsbC5lbGVtZW50ID0gRWxlbWVudC5mcm9tTmFtZShcInZvaWRcIik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgS0VZUy5WS18xOlxyXG4gICAgICAgIHRoaXMuY2VsbC5lbGVtZW50ID0gRWxlbWVudC5mcm9tTmFtZShcIm1pcnJvclwiKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBLRVlTLlZLXzI6XHJcbiAgICAgICAgdGhpcy5jZWxsLmVsZW1lbnQgPSBFbGVtZW50LmZyb21OYW1lKFwiYmVhbXNwbGl0dGVyXCIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEtFWVMuVktfMzpcclxuICAgICAgICB0aGlzLmNlbGwuZWxlbWVudCA9IEVsZW1lbnQuZnJvbU5hbWUoXCJsYXNlclwiKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBLRVlTLlZLXzQ6XHJcbiAgICAgICAgdGhpcy5jZWxsLmVsZW1lbnQgPSBFbGVtZW50LmZyb21OYW1lKFwiZGV0ZWN0b3JcIik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgS0VZUy5WS181OlxyXG4gICAgICAgIHRoaXMuY2VsbC5lbGVtZW50ID0gRWxlbWVudC5mcm9tTmFtZShcInBoYXNlaW5jXCIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEtFWVMuVktfNjpcclxuICAgICAgICB0aGlzLmNlbGwuZWxlbWVudCA9IEVsZW1lbnQuZnJvbU5hbWUoXCJwaGFzZWRlY1wiKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBLRVlTLlZLXzc6XHJcbiAgICAgICAgdGhpcy5jZWxsLmVsZW1lbnQgPSBFbGVtZW50LmZyb21OYW1lKFwicm9ja1wiKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBLRVlTLlZLXzg6XHJcbiAgICAgICAgdGhpcy5jZWxsLmVsZW1lbnQgPSBFbGVtZW50LmZyb21OYW1lKFwibWluZVwiKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIC8vIENoZWNrIHRoYXQgcGxheWVyIGlzIGluIGdhbWUgZ3JpZCBib3JkZXJzXHJcbiAgICBpZiAodGhpcy5nYW1lLmdyaWQuaW5jbHVkZXMobmV3Q29vcmQpKSB7XHJcbiAgICAgIHRoaXMuY29vcmQgPSBuZXdDb29yZDtcclxuICAgICAgdmFsaWRJbnB1dCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsaWRJbnB1dDtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYFBsYXllciAke3RoaXMuY29vcmQudG9TdHJpbmcoKX1gO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgR2x5cGgge1xyXG4gIHB1YmxpYyBjaGFyYWN0ZXI6IHN0cmluZztcclxuICBwdWJsaWMgZm9yZWdyb3VuZENvbG9yOiBzdHJpbmc7XHJcbiAgcHVibGljIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGNoYXJhY3Rlcjogc3RyaW5nLFxyXG4gICAgZm9yZWdyb3VuZENvbG9yID0gXCJ3aGl0ZVwiLFxyXG4gICAgYmFja2dyb3VuZENvbG9yID0gXCJibGFja1wiXHJcbiAgKSB7XHJcbiAgICB0aGlzLmNoYXJhY3RlciA9IGNoYXJhY3RlcjtcclxuICAgIHRoaXMuZm9yZWdyb3VuZENvbG9yID0gZm9yZWdyb3VuZENvbG9yO1xyXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7XHJcbiAgfVxyXG59XHJcbiIsIihmdW5jdGlvbihhLGIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sYik7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyliKCk7ZWxzZXtiKCksYS5GaWxlU2F2ZXI9e2V4cG9ydHM6e319LmV4cG9ydHN9fSkodGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYj9iPXthdXRvQm9tOiExfTpcIm9iamVjdFwiIT10eXBlb2YgYiYmKGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQ6IEV4cGVjdGVkIHRoaXJkIGFyZ3VtZW50IHRvIGJlIGEgb2JqZWN0XCIpLGI9e2F1dG9Cb206IWJ9KSxiLmF1dG9Cb20mJi9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KGEudHlwZSk/bmV3IEJsb2IoW1wiXFx1RkVGRlwiLGFdLHt0eXBlOmEudHlwZX0pOmF9ZnVuY3Rpb24gYyhiLGMsZCl7dmFyIGU9bmV3IFhNTEh0dHBSZXF1ZXN0O2Uub3BlbihcIkdFVFwiLGIpLGUucmVzcG9uc2VUeXBlPVwiYmxvYlwiLGUub25sb2FkPWZ1bmN0aW9uKCl7YShlLnJlc3BvbnNlLGMsZCl9LGUub25lcnJvcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJjb3VsZCBub3QgZG93bmxvYWQgZmlsZVwiKX0sZS5zZW5kKCl9ZnVuY3Rpb24gZChhKXt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiSEVBRFwiLGEsITEpO3RyeXtiLnNlbmQoKX1jYXRjaChhKXt9cmV0dXJuIDIwMDw9Yi5zdGF0dXMmJjI5OT49Yi5zdGF0dXN9ZnVuY3Rpb24gZShhKXt0cnl7YS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpfWNhdGNoKGMpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7Yi5pbml0TW91c2VFdmVudChcImNsaWNrXCIsITAsITAsd2luZG93LDAsMCwwLDgwLDIwLCExLCExLCExLCExLDAsbnVsbCksYS5kaXNwYXRjaEV2ZW50KGIpfX12YXIgZj1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cud2luZG93PT09d2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZi5zZWxmPT09c2VsZj9zZWxmOlwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbC5nbG9iYWw9PT1nbG9iYWw/Z2xvYmFsOnZvaWQgMCxhPWYuc2F2ZUFzfHwoXCJvYmplY3RcIiE9dHlwZW9mIHdpbmRvd3x8d2luZG93IT09Zj9mdW5jdGlvbigpe306XCJkb3dubG9hZFwiaW4gSFRNTEFuY2hvckVsZW1lbnQucHJvdG90eXBlP2Z1bmN0aW9uKGIsZyxoKXt2YXIgaT1mLlVSTHx8Zi53ZWJraXRVUkwsaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtnPWd8fGIubmFtZXx8XCJkb3dubG9hZFwiLGouZG93bmxvYWQ9ZyxqLnJlbD1cIm5vb3BlbmVyXCIsXCJzdHJpbmdcIj09dHlwZW9mIGI/KGouaHJlZj1iLGoub3JpZ2luPT09bG9jYXRpb24ub3JpZ2luP2Uoaik6ZChqLmhyZWYpP2MoYixnLGgpOmUoaixqLnRhcmdldD1cIl9ibGFua1wiKSk6KGouaHJlZj1pLmNyZWF0ZU9iamVjdFVSTChiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoai5ocmVmKX0sNEU0KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShqKX0sMCkpfTpcIm1zU2F2ZU9yT3BlbkJsb2JcImluIG5hdmlnYXRvcj9mdW5jdGlvbihmLGcsaCl7aWYoZz1nfHxmLm5hbWV8fFwiZG93bmxvYWRcIixcInN0cmluZ1wiIT10eXBlb2YgZiluYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihiKGYsaCksZyk7ZWxzZSBpZihkKGYpKWMoZixnLGgpO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aS5ocmVmPWYsaS50YXJnZXQ9XCJfYmxhbmtcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpKX0pfX06ZnVuY3Rpb24oYSxiLGQsZSl7aWYoZT1lfHxvcGVuKFwiXCIsXCJfYmxhbmtcIiksZSYmKGUuZG9jdW1lbnQudGl0bGU9ZS5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD1cImRvd25sb2FkaW5nLi4uXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBhKXJldHVybiBjKGEsYixkKTt2YXIgZz1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiPT09YS50eXBlLGg9L2NvbnN0cnVjdG9yL2kudGVzdChmLkhUTUxFbGVtZW50KXx8Zi5zYWZhcmksaT0vQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoKGl8fGcmJmgpJiZcIm9iamVjdFwiPT10eXBlb2YgRmlsZVJlYWRlcil7dmFyIGo9bmV3IEZpbGVSZWFkZXI7ai5vbmxvYWRlbmQ9ZnVuY3Rpb24oKXt2YXIgYT1qLnJlc3VsdDthPWk/YTphLnJlcGxhY2UoL15kYXRhOlteO10qOy8sXCJkYXRhOmF0dGFjaG1lbnQvZmlsZTtcIiksZT9lLmxvY2F0aW9uLmhyZWY9YTpsb2NhdGlvbj1hLGU9bnVsbH0sai5yZWFkQXNEYXRhVVJMKGEpfWVsc2V7dmFyIGs9Zi5VUkx8fGYud2Via2l0VVJMLGw9ay5jcmVhdGVPYmplY3RVUkwoYSk7ZT9lLmxvY2F0aW9uPWw6bG9jYXRpb24uaHJlZj1sLGU9bnVsbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ay5yZXZva2VPYmplY3RVUkwobCl9LDRFNCl9fSk7Zi5zYXZlQXM9YS5zYXZlQXM9YSxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9YSl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNhdmVyLm1pbi5qcy5tYXAiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBUSU1FIEZSQU1FIENMQVNTXHJcbi8vIEFsbG93IHRpbWUtdHJhdmVsIGRlYnVnZ2luZyB3aXRoIHN0ZXAgYnkgc3RlcCBpbmMvZGVjIG9mIHRpbWVcclxuLy8gR2VuZXJhdGUgYSBuZXcgZnJhbWUgZm9yIGV2ZXJ5IG1vdmUgb2YgdGhlIHBhcnRpY2xlXHJcbi8vIFBvaW50ZXJzIGFyZSBbY29vcmQsIGRpcmVjdGlvbl1cclxuXHJcbi8vIEV4aXQgY29uZGl0aW9uc1xyXG4vLyAtIEFsbCBnb2FscyBkb25lXHJcbi8vIC0gTm90IGVub3VnaCBpbnRlbnNpdHlcclxuLy8gLSBObyBtb3JlIHBhcnRpY2xlc1xyXG5cclxuLy8gVE9ETzogQ2hlY2sgdGhhdCB0aGUgcmVxdWlyZWQgY29uZGl0aW9ucyBhcmUgbWV0IGZvciBzdGFydGluZyB0aGUgc2ltIChiZWdpbiAtIGVuZClcclxuaW1wb3J0IENvb3JkIGZyb20gXCIuL0Nvb3JkXCI7XHJcbmltcG9ydCBDZWxsIGZyb20gXCIuL0NlbGxcIjtcclxuaW1wb3J0IEdvYWwgZnJvbSBcIi4vR29hbFwiO1xyXG5pbXBvcnQgR3JpZCBmcm9tIFwiLi9HcmlkXCI7XHJcbmltcG9ydCBMZXZlbCBmcm9tIFwiLi9MZXZlbFwiO1xyXG5pbXBvcnQgUG9pbnRlciBmcm9tIFwiLi9Qb2ludGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGcmFtZSB7XHJcbiAgbGV2ZWw6IExldmVsO1xyXG4gIHN0ZXA6IG51bWJlcjtcclxuICBwb2ludGVyczogUG9pbnRlcltdO1xyXG4gIGVuZDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IobGV2ZWw6IExldmVsLCBzdGVwID0gMCwgcG9pbnRlcnM6IFBvaW50ZXJbXSA9IFtdLCBlbmQgPSBmYWxzZSkge1xyXG4gICAgdGhpcy5zdGVwID0gc3RlcDtcclxuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcclxuICAgIHRoaXMucG9pbnRlcnMgPSBwb2ludGVycztcclxuICAgIHRoaXMuZW5kID0gZW5kO1xyXG4gICAgLy8gSW5pdGlhdGUgc2ltdWxhdGlvbiB3aXRoIGZyYW1lICMwIGFuZCBleHRyYWN0IGVtaXR0ZXJzXHJcbiAgICBpZiAoc3RlcCA9PT0gMCkge1xyXG4gICAgICB0aGlzLmxhc2Vycy5mb3JFYWNoKGxhc2VyID0+IHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJzLnB1c2gobGFzZXIuZmlyZSgpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDb252ZW5pZW50IGdldHRlcnNcclxuICBnZXQgZ3JpZCgpOiBHcmlkIHtcclxuICAgIHJldHVybiB0aGlzLmxldmVsLmdyaWQ7XHJcbiAgfVxyXG4gIGdldCBjZWxscygpOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMubGV2ZWwuZ3JpZC5jZWxscztcclxuICB9XHJcbiAgZ2V0IGxhc2VycygpOiBDZWxsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMubGV2ZWwuZ3JpZC5sYXNlcnM7XHJcbiAgfVxyXG4gIGdldCBnb2FscygpOiBHb2FsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMubGV2ZWwuZ29hbHM7XHJcbiAgfVxyXG4gIGdldCBjb21wbGV0ZWRHb2FscygpOiBHb2FsW10ge1xyXG4gICAgcmV0dXJuIHRoaXMubGV2ZWwuZ29hbHMuZmlsdGVyKGdvYWwgPT4ge1xyXG4gICAgICByZXR1cm4gZ29hbC5jb21wbGV0ZWQ7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgZ2V0IHZpY3RvcnkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wbGV0ZWRHb2Fscy5sZW5ndGggPT09IHRoaXMuZ29hbHMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLy8gQ29tcHV0ZSB0aGUgbmV4dCBmcmFtZSBieSBjb21wdXRpbmcgdGhlIG5leHQgcG9zaXRpb25zIG9mIGRpZmZlcmVudCBwb2ludGVyc1xyXG4gIG5leHQoKTogRnJhbWUge1xyXG4gICAgLy8gQWJzb3JiZXJzXHJcbiAgICBjb25zdCBkZXRlY3RvcnMgPSB0aGlzLmdyaWQuZGV0ZWN0b3JzO1xyXG4gICAgY29uc3Qgcm9ja3MgPSB0aGlzLmdyaWQucm9ja3M7XHJcbiAgICBjb25zdCBtaW5lcyA9IHRoaXMuZ3JpZC5taW5lcztcclxuICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLmdyaWQuYWJzb3JiZXJzO1xyXG4gICAgY29uc3QgYWJzb3JiZXJzOiBDZWxsW10gPSBkZXRlY3RvcnMuY29uY2F0KHJvY2tzLCBtaW5lcywgZmlsdGVycyk7XHJcbiAgICAvLyBSZWZsZWN0b3JzXHJcbiAgICBjb25zdCBtaXJyb3JzID0gdGhpcy5ncmlkLm1pcnJvcnM7XHJcbiAgICBjb25zdCBiZWFtc3BsaXR0ZXJzID0gdGhpcy5ncmlkLmJlYW1zcGxpdHRlcnM7XHJcbiAgICAvLyBQaGFzZSBzaGlmdGVyc1xyXG4gICAgY29uc3QgcGhhc2VpbmNzID0gdGhpcy5ncmlkLnBoYXNlaW5jcztcclxuICAgIGNvbnN0IHBoYXNlZGVjcyA9IHRoaXMuZ3JpZC5waGFzZWRlY3M7XHJcbiAgICBjb25zdCBwaGFzZXNoaWZ0ZXJzOiBDZWxsW10gPSBwaGFzZWluY3MuY29uY2F0KHBoYXNlZGVjcyk7XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIHBvaW50ZXJzXHJcbiAgICB0aGlzLnBvaW50ZXJzLmZvckVhY2gocG9pbnRlciA9PiB7XHJcbiAgICAgIHBvaW50ZXIubmV4dCgpO1xyXG4gICAgICBpZiAoIXRoaXMuZ3JpZC5pbmNsdWRlcyhwb2ludGVyLmNvb3JkKSkge1xyXG4gICAgICAgIHBvaW50ZXIuaW50ZW5zaXR5ID0gMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWJzb3JwdGlvblxyXG4gICAgICBhYnNvcmJlcnMuZm9yRWFjaCgoYWJzb3JiZXI6IENlbGwpID0+IHtcclxuICAgICAgICBpZiAocG9pbnRlci5vbihhYnNvcmJlcikpIHtcclxuICAgICAgICAgIHBvaW50ZXIuaW50ZW5zaXR5ICo9IGFic29yYmVyLmVsZW1lbnQuYWJzb3JwdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gUmVmbGVjdGlvblxyXG4gICAgICBtaXJyb3JzLmZvckVhY2goKG1pcnJvcjogQ2VsbCkgPT4ge1xyXG4gICAgICAgIGlmIChwb2ludGVyLm9uKG1pcnJvcikpIHtcclxuICAgICAgICAgIHBvaW50ZXIuZGlyZWN0aW9uID1cclxuICAgICAgICAgICAgKDIgKiBtaXJyb3Iucm90YXRpb24gLSBwb2ludGVyLmRpcmVjdGlvbiArIDM2MCkgJSAzNjA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYmVhbXNwbGl0dGVycy5mb3JFYWNoKChiZWFtc3BsaXR0ZXI6IENlbGwpID0+IHtcclxuICAgICAgICBpZiAocG9pbnRlci5vbihiZWFtc3BsaXR0ZXIpKSB7XHJcbiAgICAgICAgICAvLyBEaW0gdGhlIGN1cnJlbnQgcG9pbnRlciBpbnRlbnNpdHlcclxuICAgICAgICAgIHBvaW50ZXIuaW50ZW5zaXR5IC89IDI7XHJcbiAgICAgICAgICAvLyBSZWZsZWN0aW5nIHBvaW50ZXIgKGNyZWF0ZSBuZXcgcmVmbGVjdGVkIGZhZGVkIHBvaW50ZXIpXHJcbiAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPVxyXG4gICAgICAgICAgICAoMiAqIGJlYW1zcGxpdHRlci5yb3RhdGlvbiAtIHBvaW50ZXIuZGlyZWN0aW9uICsgMzYwKSAlIDM2MDtcclxuICAgICAgICAgIHRoaXMucG9pbnRlcnMucHVzaChcclxuICAgICAgICAgICAgbmV3IFBvaW50ZXIocG9pbnRlci5jb29yZCwgZGlyZWN0aW9uLCBwb2ludGVyLmludGVuc2l0eSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFBoYXNlIHNoaWZ0ZXJzXHJcbiAgICAgIHBoYXNlc2hpZnRlcnMuZm9yRWFjaCgocGhhc2VzaGlmdGVyOiBDZWxsKSA9PiB7XHJcbiAgICAgICAgaWYgKHBvaW50ZXIub24ocGhhc2VzaGlmdGVyKSkge1xyXG4gICAgICAgICAgcG9pbnRlci5waGFzZSA9IChwb2ludGVyLnBoYXNlICsgcGhhc2VzaGlmdGVyLmVsZW1lbnQucGhhc2UpICUgMTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ29sbGlzaW9uIGdvYWxzXHJcbiAgICAgIC8vIEZJWE1FOiBNYWtlIGEgc2hvcnRoYW5kIGZvciBnb2Fsc1xyXG4gICAgICB0aGlzLmdvYWxzLmZvckVhY2goZ29hbCA9PiB7XHJcbiAgICAgICAgaWYgKGdvYWwuY29vcmQuZXF1YWwocG9pbnRlci5jb29yZCkpIHtcclxuICAgICAgICAgIGdvYWwudmFsdWUgKz0gcG9pbnRlci5pbnRlbnNpdHkgKiAxMDA7XHJcbiAgICAgICAgICBwb2ludGVyLmludGVuc2l0eSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEVyYXNlIG51bGwgaW50ZW5zaXR5IHBvaW50ZXJzXHJcbiAgICB0aGlzLnBvaW50ZXJzID0gdGhpcy5wb2ludGVycy5maWx0ZXIocG9pbnRlciA9PiB7XHJcbiAgICAgIHJldHVybiBwb2ludGVyLmludGVuc2l0eSA+IDA7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBWaWN0b3J5IGNvbmRpdGlvbnNcclxuICAgIGlmICh0aGlzLnZpY3RvcnkpIHtcclxuICAgICAgdGhpcy5sZXZlbC5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmVuZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBEZWZlYXQgY29uZGl0aW9uc1xyXG4gICAgaWYgKHRoaXMucG9pbnRlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubGV2ZWwuY29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZW5kID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IEZyYW1lKHRoaXMubGV2ZWwsIHRoaXMuc3RlcCArIDEsIHRoaXMucG9pbnRlcnMsIHRoaXMuZW5kKTtcclxuICB9XHJcblxyXG4gIC8vIExhc2VyIGxpbmVzXHJcbiAgbGFzZXJDb29yZHMoKTogQ29vcmRbXSB7XHJcbiAgICBjb25zdCBsYXNlckNvb3JkczogQ29vcmRbXSA9IFtdO1xyXG4gICAgdGhpcy5wb2ludGVycy5mb3JFYWNoKHBvaW50ZXIgPT4ge1xyXG4gICAgICBwb2ludGVyLmxhc2VyUGF0aCh0aGlzLmdyaWQsIDUwKS5mb3JFYWNoKChjb29yZDogQ29vcmQpID0+IHtcclxuICAgICAgICBsYXNlckNvb3Jkcy5wdXNoKGNvb3JkKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsYXNlckNvb3JkcztcclxuICB9XHJcblxyXG4gIC8vIE92ZXJyaWRlbiBtZXRob2RcclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJlc3VsdCA9IGBcXG4tLS0gJHt0aGlzLnZpY3RvcnkgPyBcIlZJQ1RPUllcIiA6IFwiSU4gUFJPR1JFU1NcIn0gLS0tIFN0ZXAgIyR7XHJcbiAgICAgIHRoaXMuc3RlcFxyXG4gICAgfSB3aXRoICR7dGhpcy5wb2ludGVycy5sZW5ndGh9IGFjdGl2ZSBwb2ludGVycy5cXG5gO1xyXG4gICAgcmVzdWx0ICs9IFwiXFxuXCI7XHJcbiAgICByZXN1bHQgKz0gUG9pbnRlci5tYW55VG9TdHJpbmcodGhpcy5wb2ludGVycyk7XHJcbiAgICByZXN1bHQgKz0gXCJcXG5cIjtcclxuICAgIHJlc3VsdCArPSBHb2FsLm1hbnlUb1N0cmluZyh0aGlzLmxldmVsLmdvYWxzKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=