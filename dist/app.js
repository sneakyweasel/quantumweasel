var QuantumWeasel=function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=23)}([function(t,e,r){"use strict";const n=2.3283064365386963e-10;class i{constructor(){this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}getSeed(){return this._seed}setSeed(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*n,t=69069*t+1>>>0,this._s1=t*n,t=69069*t+1>>>0,this._s2=t*n,this._c=1,this}getUniform(){let t=2091639*this._s0+this._c*n;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}getUniformInt(t,e){let r=Math.max(t,e),n=Math.min(t,e);return Math.floor(this.getUniform()*(r-n+1))+n}getNormal(t=0,e=1){let r,n,i;do{i=(r=2*this.getUniform()-1)*r+(n=2*this.getUniform()-1)*n}while(i>1||0==i);return t+r*Math.sqrt(-2*Math.log(i)/i)*e}getPercentage(){return 1+Math.floor(100*this.getUniform())}getItem(t){return t.length?t[Math.floor(this.getUniform()*t.length)]:null}shuffle(t){let e=[],r=t.slice();for(;r.length;){let t=r.indexOf(this.getItem(r));e.push(r.splice(t,1)[0])}return e}getWeightedValue(t){let e=0;for(let r in t)e+=t[r];let r,n=this.getUniform()*e,i=0;for(r in t)if(n<(i+=t[r]))return r;return r}getState(){return[this._s0,this._s1,this._s2,this._c]}setState(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this}clone(){return(new i).setState(this.getState())}}e.a=(new i).setSeed(Date.now())},function(t,e,r){"use strict";function n(t,e){return(t%e+e)%e}function i(t,e=0,r=1){return t<e?e:t>r?r:t}function o(t){return t.charAt(0).toUpperCase()+t.substring(1)}function s(t,...e){let r=s.map;return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,(function(n,i,s,a){if("%"==t.charAt(a-1))return n.substring(1);if(!e.length)return n;let u=e[0],l=(i||s).split(","),c=l.shift()||"",h=r[c.toLowerCase()];if(!h)return n;let f=(u=e.shift())[h].apply(u,l),d=c.charAt(0);return d!=d.toLowerCase()&&(f=o(f)),f}))}r.r(e),r.d(e,"mod",(function(){return n})),r.d(e,"clamp",(function(){return i})),r.d(e,"capitalize",(function(){return o})),r.d(e,"format",(function(){return s})),s.map={s:"toString"}},function(t,e,r){"use strict";r.r(e),r.d(e,"fromString",(function(){return o})),r.d(e,"add",(function(){return s})),r.d(e,"add_",(function(){return a})),r.d(e,"multiply",(function(){return u})),r.d(e,"multiply_",(function(){return l})),r.d(e,"interpolate",(function(){return c})),r.d(e,"lerp",(function(){return h})),r.d(e,"interpolateHSL",(function(){return f})),r.d(e,"lerpHSL",(function(){return d})),r.d(e,"randomize",(function(){return p})),r.d(e,"rgb2hsl",(function(){return _})),r.d(e,"hsl2rgb",(function(){return m})),r.d(e,"toRGB",(function(){return v})),r.d(e,"toHex",(function(){return y}));var n=r(1),i=r(0);function o(t){let e,r;if(t in b)e=b[t];else{if("#"==t.charAt(0)){let r=(t.match(/[0-9a-f]/gi)||[]).map(t=>parseInt(t,16));if(3==r.length)e=r.map(t=>17*t);else{for(let t=0;t<3;t++)r[t+1]+=16*r[t],r.splice(t,1);e=r}}else e=(r=t.match(/rgb\(([0-9, ]+)\)/i))?r[1].split(/\s*,\s*/).map(t=>parseInt(t)):[0,0,0];b[t]=e}return e.slice()}function s(t,...e){let r=t.slice();for(let t=0;t<3;t++)for(let n=0;n<e.length;n++)r[t]+=e[n][t];return r}function a(t,...e){for(let r=0;r<3;r++)for(let n=0;n<e.length;n++)t[r]+=e[n][r];return t}function u(t,...e){let r=t.slice();for(let t=0;t<3;t++){for(let n=0;n<e.length;n++)r[t]*=e[n][t]/255;r[t]=Math.round(r[t])}return r}function l(t,...e){for(let r=0;r<3;r++){for(let n=0;n<e.length;n++)t[r]*=e[n][r]/255;t[r]=Math.round(t[r])}return t}function c(t,e,r=.5){let n=t.slice();for(let i=0;i<3;i++)n[i]=Math.round(n[i]+r*(e[i]-t[i]));return n}const h=c;function f(t,e,r=.5){let n=_(t),i=_(e);for(let t=0;t<3;t++)n[t]+=r*(i[t]-n[t]);return m(n)}const d=f;function p(t,e){e instanceof Array||(e=Math.round(i.a.getNormal(0,e)));let r=t.slice();for(let t=0;t<3;t++)r[t]+=e instanceof Array?Math.round(i.a.getNormal(0,e[t])):e;return r}function _(t){let e,r=t[0]/255,n=t[1]/255,i=t[2]/255,o=Math.max(r,n,i),s=Math.min(r,n,i),a=0,u=(o+s)/2;if(o==s)e=0;else{let t=o-s;switch(e=u>.5?t/(2-o-s):t/(o+s),o){case r:a=(n-i)/t+(n<i?6:0);break;case n:a=(i-r)/t+2;break;case i:a=(r-n)/t+4}a/=6}return[a,e,u]}function g(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function m(t){let e=t[2];if(0==t[1])return[e=Math.round(255*e),e,e];{let r=t[1],n=e<.5?e*(1+r):e+r-e*r,i=2*e-n,o=g(i,n,t[0]+1/3),s=g(i,n,t[0]),a=g(i,n,t[0]-1/3);return[Math.round(255*o),Math.round(255*s),Math.round(255*a)]}}function v(t){return`rgb(${t.map(t=>Object(n.clamp)(t,0,255)).join(",")})`}function y(t){return`#${t.map(t=>Object(n.clamp)(t,0,255).toString(16).padStart(2,"0")).join("")}`}const b={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t,e){this.y=t,this.x=e}id(t){return this.y*t+this.x}pos(t){return[this.y*t,this.x*t]}get top(){return n.importCoord({y:this.y-1,x:this.x})}get bottom(){return n.importCoord({y:this.y+1,x:this.x})}get left(){return n.importCoord({y:this.y,x:this.x-1})}get right(){return n.importCoord({y:this.y,x:this.x+1})}get adjacent(){return[this.top,this.right,this.bottom,this.left]}get array(){return[this.y,this.x]}isAdjacent(t){return t.isIncludedIn(this.adjacent)}equal(t){return this.x===t.x&&this.y===t.y}isIncludedIn(t){return t.filter(t=>this.equal(t)).length>0}toString(){return`[Y:${this.y}, X:${this.x}]`}exportCoord(){return{y:this.y,x:this.x}}static importCoord(t){return new n(t.y,t.x)}static fromId(t,e){const r=t%e,i=Math.floor(t/e);return n.importCoord({y:i,x:r})}}e.default=n},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(7)),o=function(){function t(t,e,r){if(e!==r.length)throw new Error("Coordinates ["+r+"] array is of length "+r.length+", not "+e+".");this.name=t,this.coordNames=r,this.size=e}return t.polarization=function(){return new t("polarisation",2,["H","V"])},t.direction=function(){return new t("direction",4,[">","^","<","v"])},t.spin=function(){return new t("spin",2,["u","d"])},t.position=function(e,r){return void 0===r&&(r="x"),new t(r,e,i.range(e).map((function(t){return t.toString()})))},t.prototype.toString=function(){return"#Dimension ["+this.name+"] of size ["+this.size.toString()+"] has coordinates named: ["+this.coordNames+"]"},Object.defineProperty(t.prototype,"coordString",{get:function(){return this.coordNames.join("")},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(t){return this.name===t.name&&this.size===t.size&&i.isEqual(this.coordNames,t.coordNames)},t.prototype.coordNameToIndex=function(t){var e=this.coordNames.indexOf(t);if(e<0)throw new Error(t+" is not in ["+this.coordNames+"]");return e},t.concatDimNames=function(t){var e="";return t.forEach((function(t){e+=t.coordString})),e},t.checkDimensions=function(t,e){if(t.length!==e.length)throw console.error("Dimensions with unequal number of components "+t.length+" !== "+e.length+".\n\n        Dimensions 1:\n"+t.join("\n")+"\n\n        Dimensions 2:\n"+e.join("\n")),new Error("Dimensions array size mismatch...");i.range(t.length).forEach((function(r){if(!t[r].isEqual(e[r]))throw console.error("Dimensions have the same number of components, but the component "+r+" is\n"+t[r]+"\nvs\n"+e[r]+".\n\n          Dimensions 1:\n"+t.join("\n")+"\n\n          Dimensions 2:\n"+e.join("\n")),new Error("Dimensions array order mismatch...")}))},t.stringToCoordIndices=function(t,e){if(e.length!==t.length)throw"dimensions.length ("+e.length+") !== string.length ("+t.length+")";return i.range(e.length).map((function(r){return e[r].coordNameToIndex(t[r])}))},t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9),i=function(){function t(t,e){void 0===e&&(e=0),this.re=t,this.im=e}return Object.defineProperty(t.prototype,"r",{get:function(){return this.abs()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"phi",{get:function(){return this.arg()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"phiTau",{get:function(){return this.arg()/n.TAU},enumerable:!0,configurable:!0}),t.prototype.abs2=function(){return Math.pow(this.re,2)+Math.pow(this.im,2)},t.prototype.abs=function(){return Math.sqrt(Math.pow(this.re,2)+Math.pow(this.im,2))},t.prototype.arg=function(){var t=Math.atan2(this.im,this.re);return t<0&&(t+=n.TAU),t},t.prototype.add=function(e){return new t(this.re+e.re,this.im+e.im)},t.prototype.sub=function(e){return new t(this.re-e.re,this.im-e.im)},t.prototype.mul=function(e){return new t(this.re*e.re-this.im*e.im,this.re*e.im+this.im*e.re)},t.prototype.conj=function(){return new t(this.re,-this.im)},t.prototype.normalize=function(){if(0!==this.r)return new t(this.re/this.r,this.im/this.r);throw new Error("Cannot normalize a 0 length vector...")},t.prototype.equal=function(t){return this.re===t.re&&this.im===t.im},t.prototype.isZero=function(){return 0===this.re&&0===this.im},t.prototype.toString=function(t,e){switch(void 0===t&&(t="cartesian"),void 0===e&&(e=2),t){case"cartesian":return"("+this.re.toFixed(e)+" "+(this.im>=0?"+":"")+this.im.toFixed(e)+"i)";case"polar":return this.r.toFixed(e)+" exp("+this.phi.toFixed(e)+"i)";case"polarTau":return this.r.toFixed(e)+" exp("+this.phiTau.toFixed(e)+"τi)";default:throw new Error("complexFormat '"+t+"' is not in ['cartesian', 'polar', 'polarTau'].")}},t.fromPolar=function(e,r){return new t(e*Math.cos(r),e*Math.sin(r))},t}();e.default=i,e.Cx=function(t,e){return void 0===e&&(e=0),new i(t,e)}},function(t,e,r){"use strict";r.d(e,"a",(function(){return n}));class n{getContainer(){return null}setOptions(t){this._options=t}}},function(t,e,r){(function(t,n){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,s=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",l="__lodash_hash_undefined__",c=500,h="__lodash_placeholder__",f=1,d=2,p=4,_=1,g=2,m=1,v=2,y=4,b=8,w=16,x=32,S=64,E=128,C=256,O=512,k=30,M="...",T=800,A=16,P=1,z=2,I=1/0,V=9007199254740991,K=17976931348623157e292,R=NaN,j=4294967295,D=j-1,L=j>>>1,U=[["ary",E],["bind",m],["bindKey",v],["curry",b],["curryRight",w],["flip",O],["partial",x],["partialRight",S],["rearg",C]],N="[object Arguments]",F="[object Array]",W="[object AsyncFunction]",B="[object Boolean]",Y="[object Date]",$="[object DOMException]",H="[object Error]",X="[object Function]",q="[object GeneratorFunction]",G="[object Map]",Z="[object Number]",Q="[object Null]",J="[object Object]",tt="[object Proxy]",et="[object RegExp]",rt="[object Set]",nt="[object String]",it="[object Symbol]",ot="[object Undefined]",st="[object WeakMap]",at="[object WeakSet]",ut="[object ArrayBuffer]",lt="[object DataView]",ct="[object Float32Array]",ht="[object Float64Array]",ft="[object Int8Array]",dt="[object Int16Array]",pt="[object Int32Array]",_t="[object Uint8Array]",gt="[object Uint8ClampedArray]",mt="[object Uint16Array]",vt="[object Uint32Array]",yt=/\b__p \+= '';/g,bt=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,xt=/&(?:amp|lt|gt|quot|#39);/g,St=/[&<>"']/g,Et=RegExp(xt.source),Ct=RegExp(St.source),Ot=/<%-([\s\S]+?)%>/g,kt=/<%([\s\S]+?)%>/g,Mt=/<%=([\s\S]+?)%>/g,Tt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,At=/^\w*$/,Pt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,zt=/[\\^$.*+?()[\]{}|]/g,It=RegExp(zt.source),Vt=/^\s+|\s+$/g,Kt=/^\s+/,Rt=/\s+$/,jt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Dt=/\{\n\/\* \[wrapped with (.+)\] \*/,Lt=/,? & /,Ut=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Nt=/\\(\\)?/g,Ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Wt=/\w*$/,Bt=/^[-+]0x[0-9a-f]+$/i,Yt=/^0b[01]+$/i,$t=/^\[object .+?Constructor\]$/,Ht=/^0o[0-7]+$/i,Xt=/^(?:0|[1-9]\d*)$/,qt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Gt=/($^)/,Zt=/['\n\r\u2028\u2029\\]/g,Qt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Jt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Jt+"]",re="["+Qt+"]",ne="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",se="[^\\ud800-\\udfff"+Jt+ne+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ae="\\ud83c[\\udffb-\\udfff]",ue="[^\\ud800-\\udfff]",le="(?:\\ud83c[\\udde6-\\uddff]){2}",ce="[\\ud800-\\udbff][\\udc00-\\udfff]",he="[A-Z\\xc0-\\xd6\\xd8-\\xde]",fe="(?:"+oe+"|"+se+")",de="(?:"+he+"|"+se+")",pe="(?:"+re+"|"+ae+")"+"?",_e="[\\ufe0e\\ufe0f]?"+pe+("(?:\\u200d(?:"+[ue,le,ce].join("|")+")[\\ufe0e\\ufe0f]?"+pe+")*"),ge="(?:"+[ie,le,ce].join("|")+")"+_e,me="(?:"+[ue+re+"?",re,le,ce,te].join("|")+")",ve=RegExp("['’]","g"),ye=RegExp(re,"g"),be=RegExp(ae+"(?="+ae+")|"+me+_e,"g"),we=RegExp([he+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,he,"$"].join("|")+")",de+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,he+fe,"$"].join("|")+")",he+"?"+fe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",he+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ne,ge].join("|"),"g"),xe=RegExp("[\\u200d\\ud800-\\udfff"+Qt+"\\ufe0e\\ufe0f]"),Se=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ee=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ce=-1,Oe={};Oe[ct]=Oe[ht]=Oe[ft]=Oe[dt]=Oe[pt]=Oe[_t]=Oe[gt]=Oe[mt]=Oe[vt]=!0,Oe[N]=Oe[F]=Oe[ut]=Oe[B]=Oe[lt]=Oe[Y]=Oe[H]=Oe[X]=Oe[G]=Oe[Z]=Oe[J]=Oe[et]=Oe[rt]=Oe[nt]=Oe[st]=!1;var ke={};ke[N]=ke[F]=ke[ut]=ke[lt]=ke[B]=ke[Y]=ke[ct]=ke[ht]=ke[ft]=ke[dt]=ke[pt]=ke[G]=ke[Z]=ke[J]=ke[et]=ke[rt]=ke[nt]=ke[it]=ke[_t]=ke[gt]=ke[mt]=ke[vt]=!0,ke[H]=ke[X]=ke[st]=!1;var Me={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Te=parseFloat,Ae=parseInt,Pe="object"==typeof t&&t&&t.Object===Object&&t,ze="object"==typeof self&&self&&self.Object===Object&&self,Ie=Pe||ze||Function("return this")(),Ve=e&&!e.nodeType&&e,Ke=Ve&&"object"==typeof n&&n&&!n.nodeType&&n,Re=Ke&&Ke.exports===Ve,je=Re&&Pe.process,De=function(){try{var t=Ke&&Ke.require&&Ke.require("util").types;return t||je&&je.binding&&je.binding("util")}catch(t){}}(),Le=De&&De.isArrayBuffer,Ue=De&&De.isDate,Ne=De&&De.isMap,Fe=De&&De.isRegExp,We=De&&De.isSet,Be=De&&De.isTypedArray;function Ye(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}function $e(t,e,r,n){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];e(n,s,r(s),t)}return n}function He(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}function Xe(t,e){for(var r=null==t?0:t.length;r--&&!1!==e(t[r],r,t););return t}function qe(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(!e(t[r],r,t))return!1;return!0}function Ge(t,e){for(var r=-1,n=null==t?0:t.length,i=0,o=[];++r<n;){var s=t[r];e(s,r,t)&&(o[i++]=s)}return o}function Ze(t,e){return!!(null==t?0:t.length)&&ar(t,e,0)>-1}function Qe(t,e,r){for(var n=-1,i=null==t?0:t.length;++n<i;)if(r(e,t[n]))return!0;return!1}function Je(t,e){for(var r=-1,n=null==t?0:t.length,i=Array(n);++r<n;)i[r]=e(t[r],r,t);return i}function tr(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}function er(t,e,r,n){var i=-1,o=null==t?0:t.length;for(n&&o&&(r=t[++i]);++i<o;)r=e(r,t[i],i,t);return r}function rr(t,e,r,n){var i=null==t?0:t.length;for(n&&i&&(r=t[--i]);i--;)r=e(r,t[i],i,t);return r}function nr(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}var ir=hr("length");function or(t,e,r){var n;return r(t,(function(t,r,i){if(e(t,r,i))return n=r,!1})),n}function sr(t,e,r,n){for(var i=t.length,o=r+(n?1:-1);n?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function ar(t,e,r){return e==e?function(t,e,r){var n=r-1,i=t.length;for(;++n<i;)if(t[n]===e)return n;return-1}(t,e,r):sr(t,lr,r)}function ur(t,e,r,n){for(var i=r-1,o=t.length;++i<o;)if(n(t[i],e))return i;return-1}function lr(t){return t!=t}function cr(t,e){var r=null==t?0:t.length;return r?pr(t,e)/r:R}function hr(t){return function(e){return null==e?o:e[t]}}function fr(t){return function(e){return null==t?o:t[e]}}function dr(t,e,r,n,i){return i(t,(function(t,i,o){r=n?(n=!1,t):e(r,t,i,o)})),r}function pr(t,e){for(var r,n=-1,i=t.length;++n<i;){var s=e(t[n]);s!==o&&(r=r===o?s:r+s)}return r}function _r(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}function gr(t){return function(e){return t(e)}}function mr(t,e){return Je(e,(function(e){return t[e]}))}function vr(t,e){return t.has(e)}function yr(t,e){for(var r=-1,n=t.length;++r<n&&ar(e,t[r],0)>-1;);return r}function br(t,e){for(var r=t.length;r--&&ar(e,t[r],0)>-1;);return r}var wr=fr({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),xr=fr({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Sr(t){return"\\"+Me[t]}function Er(t){return xe.test(t)}function Cr(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function Or(t,e){return function(r){return t(e(r))}}function kr(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var s=t[r];s!==e&&s!==h||(t[r]=h,o[i++]=r)}return o}function Mr(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}function Tr(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=[t,t]})),r}function Ar(t){return Er(t)?function(t){var e=be.lastIndex=0;for(;be.test(t);)++e;return e}(t):ir(t)}function Pr(t){return Er(t)?function(t){return t.match(be)||[]}(t):function(t){return t.split("")}(t)}var zr=fr({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ir=function t(e){var r,n=(e=null==e?Ie:Ir.defaults(Ie.Object(),e,Ir.pick(Ie,Ee))).Array,i=e.Date,Qt=e.Error,Jt=e.Function,te=e.Math,ee=e.Object,re=e.RegExp,ne=e.String,ie=e.TypeError,oe=n.prototype,se=Jt.prototype,ae=ee.prototype,ue=e["__core-js_shared__"],le=se.toString,ce=ae.hasOwnProperty,he=0,fe=(r=/[^.]+$/.exec(ue&&ue.keys&&ue.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",de=ae.toString,pe=le.call(ee),_e=Ie._,ge=re("^"+le.call(ce).replace(zt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),me=Re?e.Buffer:o,be=e.Symbol,xe=e.Uint8Array,Me=me?me.allocUnsafe:o,Pe=Or(ee.getPrototypeOf,ee),ze=ee.create,Ve=ae.propertyIsEnumerable,Ke=oe.splice,je=be?be.isConcatSpreadable:o,De=be?be.iterator:o,ir=be?be.toStringTag:o,fr=function(){try{var t=Lo(ee,"defineProperty");return t({},"",{}),t}catch(t){}}(),Vr=e.clearTimeout!==Ie.clearTimeout&&e.clearTimeout,Kr=i&&i.now!==Ie.Date.now&&i.now,Rr=e.setTimeout!==Ie.setTimeout&&e.setTimeout,jr=te.ceil,Dr=te.floor,Lr=ee.getOwnPropertySymbols,Ur=me?me.isBuffer:o,Nr=e.isFinite,Fr=oe.join,Wr=Or(ee.keys,ee),Br=te.max,Yr=te.min,$r=i.now,Hr=e.parseInt,Xr=te.random,qr=oe.reverse,Gr=Lo(e,"DataView"),Zr=Lo(e,"Map"),Qr=Lo(e,"Promise"),Jr=Lo(e,"Set"),tn=Lo(e,"WeakMap"),en=Lo(ee,"create"),rn=tn&&new tn,nn={},on=hs(Gr),sn=hs(Zr),an=hs(Qr),un=hs(Jr),ln=hs(tn),cn=be?be.prototype:o,hn=cn?cn.valueOf:o,fn=cn?cn.toString:o;function dn(t){if(Ma(t)&&!ma(t)&&!(t instanceof mn)){if(t instanceof gn)return t;if(ce.call(t,"__wrapped__"))return fs(t)}return new gn(t)}var pn=function(){function t(){}return function(e){if(!ka(e))return{};if(ze)return ze(e);t.prototype=e;var r=new t;return t.prototype=o,r}}();function _n(){}function gn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function mn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=j,this.__views__=[]}function vn(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function yn(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function bn(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function wn(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new bn;++e<r;)this.add(t[e])}function xn(t){var e=this.__data__=new yn(t);this.size=e.size}function Sn(t,e){var r=ma(t),n=!r&&ga(t),i=!r&&!n&&wa(t),o=!r&&!n&&!i&&Ra(t),s=r||n||i||o,a=s?_r(t.length,ne):[],u=a.length;for(var l in t)!e&&!ce.call(t,l)||s&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||$o(l,u))||a.push(l);return a}function En(t){var e=t.length;return e?t[wi(0,e-1)]:o}function Cn(t,e){return us(ro(t),Vn(e,0,t.length))}function On(t){return us(ro(t))}function kn(t,e,r){(r===o||da(t[e],r))&&(r!==o||e in t)||zn(t,e,r)}function Mn(t,e,r){var n=t[e];ce.call(t,e)&&da(n,r)&&(r!==o||e in t)||zn(t,e,r)}function Tn(t,e){for(var r=t.length;r--;)if(da(t[r][0],e))return r;return-1}function An(t,e,r,n){return Ln(t,(function(t,i,o){e(n,t,r(t),o)})),n}function Pn(t,e){return t&&no(e,iu(e),t)}function zn(t,e,r){"__proto__"==e&&fr?fr(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function In(t,e){for(var r=-1,i=e.length,s=n(i),a=null==t;++r<i;)s[r]=a?o:Ja(t,e[r]);return s}function Vn(t,e,r){return t==t&&(r!==o&&(t=t<=r?t:r),e!==o&&(t=t>=e?t:e)),t}function Kn(t,e,r,n,i,s){var a,u=e&f,l=e&d,c=e&p;if(r&&(a=i?r(t,n,i,s):r(t)),a!==o)return a;if(!ka(t))return t;var h=ma(t);if(h){if(a=function(t){var e=t.length,r=new t.constructor(e);e&&"string"==typeof t[0]&&ce.call(t,"index")&&(r.index=t.index,r.input=t.input);return r}(t),!u)return ro(t,a)}else{var _=Fo(t),g=_==X||_==q;if(wa(t))return Gi(t,u);if(_==J||_==N||g&&!i){if(a=l||g?{}:Bo(t),!u)return l?function(t,e){return no(t,No(t),e)}(t,function(t,e){return t&&no(e,ou(e),t)}(a,t)):function(t,e){return no(t,Uo(t),e)}(t,Pn(a,t))}else{if(!ke[_])return i?t:{};a=function(t,e,r){var n=t.constructor;switch(e){case ut:return Zi(t);case B:case Y:return new n(+t);case lt:return function(t,e){var r=e?Zi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case ct:case ht:case ft:case dt:case pt:case _t:case gt:case mt:case vt:return Qi(t,r);case G:return new n;case Z:case nt:return new n(t);case et:return function(t){var e=new t.constructor(t.source,Wt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case rt:return new n;case it:return i=t,hn?ee(hn.call(i)):{}}var i}(t,_,u)}}s||(s=new xn);var m=s.get(t);if(m)return m;s.set(t,a),Ia(t)?t.forEach((function(n){a.add(Kn(n,e,r,n,t,s))})):Ta(t)&&t.forEach((function(n,i){a.set(i,Kn(n,e,r,i,t,s))}));var v=h?o:(c?l?zo:Po:l?ou:iu)(t);return He(v||t,(function(n,i){v&&(n=t[i=n]),Mn(a,i,Kn(n,e,r,i,t,s))})),a}function Rn(t,e,r){var n=r.length;if(null==t)return!n;for(t=ee(t);n--;){var i=r[n],s=e[i],a=t[i];if(a===o&&!(i in t)||!s(a))return!1}return!0}function jn(t,e,r){if("function"!=typeof t)throw new ie(u);return is((function(){t.apply(o,r)}),e)}function Dn(t,e,r,n){var i=-1,o=Ze,a=!0,u=t.length,l=[],c=e.length;if(!u)return l;r&&(e=Je(e,gr(r))),n?(o=Qe,a=!1):e.length>=s&&(o=vr,a=!1,e=new wn(e));t:for(;++i<u;){var h=t[i],f=null==r?h:r(h);if(h=n||0!==h?h:0,a&&f==f){for(var d=c;d--;)if(e[d]===f)continue t;l.push(h)}else o(e,f,n)||l.push(h)}return l}dn.templateSettings={escape:Ot,evaluate:kt,interpolate:Mt,variable:"",imports:{_:dn}},dn.prototype=_n.prototype,dn.prototype.constructor=dn,gn.prototype=pn(_n.prototype),gn.prototype.constructor=gn,mn.prototype=pn(_n.prototype),mn.prototype.constructor=mn,vn.prototype.clear=function(){this.__data__=en?en(null):{},this.size=0},vn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},vn.prototype.get=function(t){var e=this.__data__;if(en){var r=e[t];return r===l?o:r}return ce.call(e,t)?e[t]:o},vn.prototype.has=function(t){var e=this.__data__;return en?e[t]!==o:ce.call(e,t)},vn.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=en&&e===o?l:e,this},yn.prototype.clear=function(){this.__data__=[],this.size=0},yn.prototype.delete=function(t){var e=this.__data__,r=Tn(e,t);return!(r<0)&&(r==e.length-1?e.pop():Ke.call(e,r,1),--this.size,!0)},yn.prototype.get=function(t){var e=this.__data__,r=Tn(e,t);return r<0?o:e[r][1]},yn.prototype.has=function(t){return Tn(this.__data__,t)>-1},yn.prototype.set=function(t,e){var r=this.__data__,n=Tn(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},bn.prototype.clear=function(){this.size=0,this.__data__={hash:new vn,map:new(Zr||yn),string:new vn}},bn.prototype.delete=function(t){var e=jo(this,t).delete(t);return this.size-=e?1:0,e},bn.prototype.get=function(t){return jo(this,t).get(t)},bn.prototype.has=function(t){return jo(this,t).has(t)},bn.prototype.set=function(t,e){var r=jo(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},wn.prototype.add=wn.prototype.push=function(t){return this.__data__.set(t,l),this},wn.prototype.has=function(t){return this.__data__.has(t)},xn.prototype.clear=function(){this.__data__=new yn,this.size=0},xn.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},xn.prototype.get=function(t){return this.__data__.get(t)},xn.prototype.has=function(t){return this.__data__.has(t)},xn.prototype.set=function(t,e){var r=this.__data__;if(r instanceof yn){var n=r.__data__;if(!Zr||n.length<s-1)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new bn(n)}return r.set(t,e),this.size=r.size,this};var Ln=so(Hn),Un=so(Xn,!0);function Nn(t,e){var r=!0;return Ln(t,(function(t,n,i){return r=!!e(t,n,i)})),r}function Fn(t,e,r){for(var n=-1,i=t.length;++n<i;){var s=t[n],a=e(s);if(null!=a&&(u===o?a==a&&!Ka(a):r(a,u)))var u=a,l=s}return l}function Wn(t,e){var r=[];return Ln(t,(function(t,n,i){e(t,n,i)&&r.push(t)})),r}function Bn(t,e,r,n,i){var o=-1,s=t.length;for(r||(r=Yo),i||(i=[]);++o<s;){var a=t[o];e>0&&r(a)?e>1?Bn(a,e-1,r,n,i):tr(i,a):n||(i[i.length]=a)}return i}var Yn=ao(),$n=ao(!0);function Hn(t,e){return t&&Yn(t,e,iu)}function Xn(t,e){return t&&$n(t,e,iu)}function qn(t,e){return Ge(e,(function(e){return Ea(t[e])}))}function Gn(t,e){for(var r=0,n=(e=$i(e,t)).length;null!=t&&r<n;)t=t[cs(e[r++])];return r&&r==n?t:o}function Zn(t,e,r){var n=e(t);return ma(t)?n:tr(n,r(t))}function Qn(t){return null==t?t===o?ot:Q:ir&&ir in ee(t)?function(t){var e=ce.call(t,ir),r=t[ir];try{t[ir]=o;var n=!0}catch(t){}var i=de.call(t);n&&(e?t[ir]=r:delete t[ir]);return i}(t):function(t){return de.call(t)}(t)}function Jn(t,e){return t>e}function ti(t,e){return null!=t&&ce.call(t,e)}function ei(t,e){return null!=t&&e in ee(t)}function ri(t,e,r){for(var i=r?Qe:Ze,s=t[0].length,a=t.length,u=a,l=n(a),c=1/0,h=[];u--;){var f=t[u];u&&e&&(f=Je(f,gr(e))),c=Yr(f.length,c),l[u]=!r&&(e||s>=120&&f.length>=120)?new wn(u&&f):o}f=t[0];var d=-1,p=l[0];t:for(;++d<s&&h.length<c;){var _=f[d],g=e?e(_):_;if(_=r||0!==_?_:0,!(p?vr(p,g):i(h,g,r))){for(u=a;--u;){var m=l[u];if(!(m?vr(m,g):i(t[u],g,r)))continue t}p&&p.push(g),h.push(_)}}return h}function ni(t,e,r){var n=null==(t=es(t,e=$i(e,t)))?t:t[cs(Ss(e))];return null==n?o:Ye(n,t,r)}function ii(t){return Ma(t)&&Qn(t)==N}function oi(t,e,r,n,i){return t===e||(null==t||null==e||!Ma(t)&&!Ma(e)?t!=t&&e!=e:function(t,e,r,n,i,s){var a=ma(t),u=ma(e),l=a?F:Fo(t),c=u?F:Fo(e),h=(l=l==N?J:l)==J,f=(c=c==N?J:c)==J,d=l==c;if(d&&wa(t)){if(!wa(e))return!1;a=!0,h=!1}if(d&&!h)return s||(s=new xn),a||Ra(t)?To(t,e,r,n,i,s):function(t,e,r,n,i,o,s){switch(r){case lt:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ut:return!(t.byteLength!=e.byteLength||!o(new xe(t),new xe(e)));case B:case Y:case Z:return da(+t,+e);case H:return t.name==e.name&&t.message==e.message;case et:case nt:return t==e+"";case G:var a=Cr;case rt:var u=n&_;if(a||(a=Mr),t.size!=e.size&&!u)return!1;var l=s.get(t);if(l)return l==e;n|=g,s.set(t,e);var c=To(a(t),a(e),n,i,o,s);return s.delete(t),c;case it:if(hn)return hn.call(t)==hn.call(e)}return!1}(t,e,l,r,n,i,s);if(!(r&_)){var p=h&&ce.call(t,"__wrapped__"),m=f&&ce.call(e,"__wrapped__");if(p||m){var v=p?t.value():t,y=m?e.value():e;return s||(s=new xn),i(v,y,r,n,s)}}if(!d)return!1;return s||(s=new xn),function(t,e,r,n,i,s){var a=r&_,u=Po(t),l=u.length,c=Po(e).length;if(l!=c&&!a)return!1;var h=l;for(;h--;){var f=u[h];if(!(a?f in e:ce.call(e,f)))return!1}var d=s.get(t);if(d&&s.get(e))return d==e;var p=!0;s.set(t,e),s.set(e,t);var g=a;for(;++h<l;){f=u[h];var m=t[f],v=e[f];if(n)var y=a?n(v,m,f,e,t,s):n(m,v,f,t,e,s);if(!(y===o?m===v||i(m,v,r,n,s):y)){p=!1;break}g||(g="constructor"==f)}if(p&&!g){var b=t.constructor,w=e.constructor;b!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w)&&(p=!1)}return s.delete(t),s.delete(e),p}(t,e,r,n,i,s)}(t,e,r,n,oi,i))}function si(t,e,r,n){var i=r.length,s=i,a=!n;if(null==t)return!s;for(t=ee(t);i--;){var u=r[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<s;){var l=(u=r[i])[0],c=t[l],h=u[1];if(a&&u[2]){if(c===o&&!(l in t))return!1}else{var f=new xn;if(n)var d=n(c,h,l,t,e,f);if(!(d===o?oi(h,c,_|g,n,f):d))return!1}}return!0}function ai(t){return!(!ka(t)||(e=t,fe&&fe in e))&&(Ea(t)?ge:$t).test(hs(t));var e}function ui(t){return"function"==typeof t?t:null==t?Au:"object"==typeof t?ma(t)?pi(t[0],t[1]):di(t):Lu(t)}function li(t){if(!Zo(t))return Wr(t);var e=[];for(var r in ee(t))ce.call(t,r)&&"constructor"!=r&&e.push(r);return e}function ci(t){if(!ka(t))return function(t){var e=[];if(null!=t)for(var r in ee(t))e.push(r);return e}(t);var e=Zo(t),r=[];for(var n in t)("constructor"!=n||!e&&ce.call(t,n))&&r.push(n);return r}function hi(t,e){return t<e}function fi(t,e){var r=-1,i=ya(t)?n(t.length):[];return Ln(t,(function(t,n,o){i[++r]=e(t,n,o)})),i}function di(t){var e=Do(t);return 1==e.length&&e[0][2]?Jo(e[0][0],e[0][1]):function(r){return r===t||si(r,t,e)}}function pi(t,e){return Xo(t)&&Qo(e)?Jo(cs(t),e):function(r){var n=Ja(r,t);return n===o&&n===e?tu(r,t):oi(e,n,_|g)}}function _i(t,e,r,n,i){t!==e&&Yn(e,(function(s,a){if(i||(i=new xn),ka(s))!function(t,e,r,n,i,s,a){var u=rs(t,r),l=rs(e,r),c=a.get(l);if(c)return void kn(t,r,c);var h=s?s(u,l,r+"",t,e,a):o,f=h===o;if(f){var d=ma(l),p=!d&&wa(l),_=!d&&!p&&Ra(l);h=l,d||p||_?ma(u)?h=u:ba(u)?h=ro(u):p?(f=!1,h=Gi(l,!0)):_?(f=!1,h=Qi(l,!0)):h=[]:Pa(l)||ga(l)?(h=u,ga(u)?h=Ba(u):ka(u)&&!Ea(u)||(h=Bo(l))):f=!1}f&&(a.set(l,h),i(h,l,n,s,a),a.delete(l));kn(t,r,h)}(t,e,a,r,_i,n,i);else{var u=n?n(rs(t,a),s,a+"",t,e,i):o;u===o&&(u=s),kn(t,a,u)}}),ou)}function gi(t,e){var r=t.length;if(r)return $o(e+=e<0?r:0,r)?t[e]:o}function mi(t,e,r){var n=-1;return e=Je(e.length?e:[Au],gr(Ro())),function(t,e){var r=t.length;for(t.sort(e);r--;)t[r]=t[r].value;return t}(fi(t,(function(t,r,i){return{criteria:Je(e,(function(e){return e(t)})),index:++n,value:t}})),(function(t,e){return function(t,e,r){var n=-1,i=t.criteria,o=e.criteria,s=i.length,a=r.length;for(;++n<s;){var u=Ji(i[n],o[n]);if(u){if(n>=a)return u;var l=r[n];return u*("desc"==l?-1:1)}}return t.index-e.index}(t,e,r)}))}function vi(t,e,r){for(var n=-1,i=e.length,o={};++n<i;){var s=e[n],a=Gn(t,s);r(a,s)&&Oi(o,$i(s,t),a)}return o}function yi(t,e,r,n){var i=n?ur:ar,o=-1,s=e.length,a=t;for(t===e&&(e=ro(e)),r&&(a=Je(t,gr(r)));++o<s;)for(var u=0,l=e[o],c=r?r(l):l;(u=i(a,c,u,n))>-1;)a!==t&&Ke.call(a,u,1),Ke.call(t,u,1);return t}function bi(t,e){for(var r=t?e.length:0,n=r-1;r--;){var i=e[r];if(r==n||i!==o){var o=i;$o(i)?Ke.call(t,i,1):Di(t,i)}}return t}function wi(t,e){return t+Dr(Xr()*(e-t+1))}function xi(t,e){var r="";if(!t||e<1||e>V)return r;do{e%2&&(r+=t),(e=Dr(e/2))&&(t+=t)}while(e);return r}function Si(t,e){return os(ts(t,e,Au),t+"")}function Ei(t){return En(du(t))}function Ci(t,e){var r=du(t);return us(r,Vn(e,0,r.length))}function Oi(t,e,r,n){if(!ka(t))return t;for(var i=-1,s=(e=$i(e,t)).length,a=s-1,u=t;null!=u&&++i<s;){var l=cs(e[i]),c=r;if(i!=a){var h=u[l];(c=n?n(h,l,u):o)===o&&(c=ka(h)?h:$o(e[i+1])?[]:{})}Mn(u,l,c),u=u[l]}return t}var ki=rn?function(t,e){return rn.set(t,e),t}:Au,Mi=fr?function(t,e){return fr(t,"toString",{configurable:!0,enumerable:!1,value:ku(e),writable:!0})}:Au;function Ti(t){return us(du(t))}function Ai(t,e,r){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var s=n(o);++i<o;)s[i]=t[i+e];return s}function Pi(t,e){var r;return Ln(t,(function(t,n,i){return!(r=e(t,n,i))})),!!r}function zi(t,e,r){var n=0,i=null==t?n:t.length;if("number"==typeof e&&e==e&&i<=L){for(;n<i;){var o=n+i>>>1,s=t[o];null!==s&&!Ka(s)&&(r?s<=e:s<e)?n=o+1:i=o}return i}return Ii(t,e,Au,r)}function Ii(t,e,r,n){e=r(e);for(var i=0,s=null==t?0:t.length,a=e!=e,u=null===e,l=Ka(e),c=e===o;i<s;){var h=Dr((i+s)/2),f=r(t[h]),d=f!==o,p=null===f,_=f==f,g=Ka(f);if(a)var m=n||_;else m=c?_&&(n||d):u?_&&d&&(n||!p):l?_&&d&&!p&&(n||!g):!p&&!g&&(n?f<=e:f<e);m?i=h+1:s=h}return Yr(s,D)}function Vi(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var s=t[r],a=e?e(s):s;if(!r||!da(a,u)){var u=a;o[i++]=0===s?0:s}}return o}function Ki(t){return"number"==typeof t?t:Ka(t)?R:+t}function Ri(t){if("string"==typeof t)return t;if(ma(t))return Je(t,Ri)+"";if(Ka(t))return fn?fn.call(t):"";var e=t+"";return"0"==e&&1/t==-I?"-0":e}function ji(t,e,r){var n=-1,i=Ze,o=t.length,a=!0,u=[],l=u;if(r)a=!1,i=Qe;else if(o>=s){var c=e?null:So(t);if(c)return Mr(c);a=!1,i=vr,l=new wn}else l=e?[]:u;t:for(;++n<o;){var h=t[n],f=e?e(h):h;if(h=r||0!==h?h:0,a&&f==f){for(var d=l.length;d--;)if(l[d]===f)continue t;e&&l.push(f),u.push(h)}else i(l,f,r)||(l!==u&&l.push(f),u.push(h))}return u}function Di(t,e){return null==(t=es(t,e=$i(e,t)))||delete t[cs(Ss(e))]}function Li(t,e,r,n){return Oi(t,e,r(Gn(t,e)),n)}function Ui(t,e,r,n){for(var i=t.length,o=n?i:-1;(n?o--:++o<i)&&e(t[o],o,t););return r?Ai(t,n?0:o,n?o+1:i):Ai(t,n?o+1:0,n?i:o)}function Ni(t,e){var r=t;return r instanceof mn&&(r=r.value()),er(e,(function(t,e){return e.func.apply(e.thisArg,tr([t],e.args))}),r)}function Fi(t,e,r){var i=t.length;if(i<2)return i?ji(t[0]):[];for(var o=-1,s=n(i);++o<i;)for(var a=t[o],u=-1;++u<i;)u!=o&&(s[o]=Dn(s[o]||a,t[u],e,r));return ji(Bn(s,1),e,r)}function Wi(t,e,r){for(var n=-1,i=t.length,s=e.length,a={};++n<i;){var u=n<s?e[n]:o;r(a,t[n],u)}return a}function Bi(t){return ba(t)?t:[]}function Yi(t){return"function"==typeof t?t:Au}function $i(t,e){return ma(t)?t:Xo(t,e)?[t]:ls(Ya(t))}var Hi=Si;function Xi(t,e,r){var n=t.length;return r=r===o?n:r,!e&&r>=n?t:Ai(t,e,r)}var qi=Vr||function(t){return Ie.clearTimeout(t)};function Gi(t,e){if(e)return t.slice();var r=t.length,n=Me?Me(r):new t.constructor(r);return t.copy(n),n}function Zi(t){var e=new t.constructor(t.byteLength);return new xe(e).set(new xe(t)),e}function Qi(t,e){var r=e?Zi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function Ji(t,e){if(t!==e){var r=t!==o,n=null===t,i=t==t,s=Ka(t),a=e!==o,u=null===e,l=e==e,c=Ka(e);if(!u&&!c&&!s&&t>e||s&&a&&l&&!u&&!c||n&&a&&l||!r&&l||!i)return 1;if(!n&&!s&&!c&&t<e||c&&r&&i&&!n&&!s||u&&r&&i||!a&&i||!l)return-1}return 0}function to(t,e,r,i){for(var o=-1,s=t.length,a=r.length,u=-1,l=e.length,c=Br(s-a,0),h=n(l+c),f=!i;++u<l;)h[u]=e[u];for(;++o<a;)(f||o<s)&&(h[r[o]]=t[o]);for(;c--;)h[u++]=t[o++];return h}function eo(t,e,r,i){for(var o=-1,s=t.length,a=-1,u=r.length,l=-1,c=e.length,h=Br(s-u,0),f=n(h+c),d=!i;++o<h;)f[o]=t[o];for(var p=o;++l<c;)f[p+l]=e[l];for(;++a<u;)(d||o<s)&&(f[p+r[a]]=t[o++]);return f}function ro(t,e){var r=-1,i=t.length;for(e||(e=n(i));++r<i;)e[r]=t[r];return e}function no(t,e,r,n){var i=!r;r||(r={});for(var s=-1,a=e.length;++s<a;){var u=e[s],l=n?n(r[u],t[u],u,r,t):o;l===o&&(l=t[u]),i?zn(r,u,l):Mn(r,u,l)}return r}function io(t,e){return function(r,n){var i=ma(r)?$e:An,o=e?e():{};return i(r,t,Ro(n,2),o)}}function oo(t){return Si((function(e,r){var n=-1,i=r.length,s=i>1?r[i-1]:o,a=i>2?r[2]:o;for(s=t.length>3&&"function"==typeof s?(i--,s):o,a&&Ho(r[0],r[1],a)&&(s=i<3?o:s,i=1),e=ee(e);++n<i;){var u=r[n];u&&t(e,u,n,s)}return e}))}function so(t,e){return function(r,n){if(null==r)return r;if(!ya(r))return t(r,n);for(var i=r.length,o=e?i:-1,s=ee(r);(e?o--:++o<i)&&!1!==n(s[o],o,s););return r}}function ao(t){return function(e,r,n){for(var i=-1,o=ee(e),s=n(e),a=s.length;a--;){var u=s[t?a:++i];if(!1===r(o[u],u,o))break}return e}}function uo(t){return function(e){var r=Er(e=Ya(e))?Pr(e):o,n=r?r[0]:e.charAt(0),i=r?Xi(r,1).join(""):e.slice(1);return n[t]()+i}}function lo(t){return function(e){return er(Eu(gu(e).replace(ve,"")),t,"")}}function co(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var r=pn(t.prototype),n=t.apply(r,e);return ka(n)?n:r}}function ho(t){return function(e,r,n){var i=ee(e);if(!ya(e)){var s=Ro(r,3);e=iu(e),r=function(t){return s(i[t],t,i)}}var a=t(e,r,n);return a>-1?i[s?e[a]:a]:o}}function fo(t){return Ao((function(e){var r=e.length,n=r,i=gn.prototype.thru;for(t&&e.reverse();n--;){var s=e[n];if("function"!=typeof s)throw new ie(u);if(i&&!a&&"wrapper"==Vo(s))var a=new gn([],!0)}for(n=a?n:r;++n<r;){var l=Vo(s=e[n]),c="wrapper"==l?Io(s):o;a=c&&qo(c[0])&&c[1]==(E|b|x|C)&&!c[4].length&&1==c[9]?a[Vo(c[0])].apply(a,c[3]):1==s.length&&qo(s)?a[l]():a.thru(s)}return function(){var t=arguments,n=t[0];if(a&&1==t.length&&ma(n))return a.plant(n).value();for(var i=0,o=r?e[i].apply(this,t):n;++i<r;)o=e[i].call(this,o);return o}}))}function po(t,e,r,i,s,a,u,l,c,h){var f=e&E,d=e&m,p=e&v,_=e&(b|w),g=e&O,y=p?o:co(t);return function m(){for(var v=arguments.length,b=n(v),w=v;w--;)b[w]=arguments[w];if(_)var x=Ko(m),S=function(t,e){for(var r=t.length,n=0;r--;)t[r]===e&&++n;return n}(b,x);if(i&&(b=to(b,i,s,_)),a&&(b=eo(b,a,u,_)),v-=S,_&&v<h){var E=kr(b,x);return wo(t,e,po,m.placeholder,r,b,E,l,c,h-v)}var C=d?r:this,O=p?C[t]:t;return v=b.length,l?b=function(t,e){var r=t.length,n=Yr(e.length,r),i=ro(t);for(;n--;){var s=e[n];t[n]=$o(s,r)?i[s]:o}return t}(b,l):g&&v>1&&b.reverse(),f&&c<v&&(b.length=c),this&&this!==Ie&&this instanceof m&&(O=y||co(O)),O.apply(C,b)}}function _o(t,e){return function(r,n){return function(t,e,r,n){return Hn(t,(function(t,i,o){e(n,r(t),i,o)})),n}(r,t,e(n),{})}}function go(t,e){return function(r,n){var i;if(r===o&&n===o)return e;if(r!==o&&(i=r),n!==o){if(i===o)return n;"string"==typeof r||"string"==typeof n?(r=Ri(r),n=Ri(n)):(r=Ki(r),n=Ki(n)),i=t(r,n)}return i}}function mo(t){return Ao((function(e){return e=Je(e,gr(Ro())),Si((function(r){var n=this;return t(e,(function(t){return Ye(t,n,r)}))}))}))}function vo(t,e){var r=(e=e===o?" ":Ri(e)).length;if(r<2)return r?xi(e,t):e;var n=xi(e,jr(t/Ar(e)));return Er(e)?Xi(Pr(n),0,t).join(""):n.slice(0,t)}function yo(t){return function(e,r,i){return i&&"number"!=typeof i&&Ho(e,r,i)&&(r=i=o),e=Ua(e),r===o?(r=e,e=0):r=Ua(r),function(t,e,r,i){for(var o=-1,s=Br(jr((e-t)/(r||1)),0),a=n(s);s--;)a[i?s:++o]=t,t+=r;return a}(e,r,i=i===o?e<r?1:-1:Ua(i),t)}}function bo(t){return function(e,r){return"string"==typeof e&&"string"==typeof r||(e=Wa(e),r=Wa(r)),t(e,r)}}function wo(t,e,r,n,i,s,a,u,l,c){var h=e&b;e|=h?x:S,(e&=~(h?S:x))&y||(e&=~(m|v));var f=[t,e,i,h?s:o,h?a:o,h?o:s,h?o:a,u,l,c],d=r.apply(o,f);return qo(t)&&ns(d,f),d.placeholder=n,ss(d,t,e)}function xo(t){var e=te[t];return function(t,r){if(t=Wa(t),(r=null==r?0:Yr(Na(r),292))&&Nr(t)){var n=(Ya(t)+"e").split("e");return+((n=(Ya(e(n[0]+"e"+(+n[1]+r)))+"e").split("e"))[0]+"e"+(+n[1]-r))}return e(t)}}var So=Jr&&1/Mr(new Jr([,-0]))[1]==I?function(t){return new Jr(t)}:Ku;function Eo(t){return function(e){var r=Fo(e);return r==G?Cr(e):r==rt?Tr(e):function(t,e){return Je(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Co(t,e,r,i,s,a,l,c){var f=e&v;if(!f&&"function"!=typeof t)throw new ie(u);var d=i?i.length:0;if(d||(e&=~(x|S),i=s=o),l=l===o?l:Br(Na(l),0),c=c===o?c:Na(c),d-=s?s.length:0,e&S){var p=i,_=s;i=s=o}var g=f?o:Io(t),O=[t,e,r,i,s,p,_,a,l,c];if(g&&function(t,e){var r=t[1],n=e[1],i=r|n,o=i<(m|v|E),s=n==E&&r==b||n==E&&r==C&&t[7].length<=e[8]||n==(E|C)&&e[7].length<=e[8]&&r==b;if(!o&&!s)return t;n&m&&(t[2]=e[2],i|=r&m?0:y);var a=e[3];if(a){var u=t[3];t[3]=u?to(u,a,e[4]):a,t[4]=u?kr(t[3],h):e[4]}(a=e[5])&&(u=t[5],t[5]=u?eo(u,a,e[6]):a,t[6]=u?kr(t[5],h):e[6]);(a=e[7])&&(t[7]=a);n&E&&(t[8]=null==t[8]?e[8]:Yr(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(O,g),t=O[0],e=O[1],r=O[2],i=O[3],s=O[4],!(c=O[9]=O[9]===o?f?0:t.length:Br(O[9]-d,0))&&e&(b|w)&&(e&=~(b|w)),e&&e!=m)k=e==b||e==w?function(t,e,r){var i=co(t);return function s(){for(var a=arguments.length,u=n(a),l=a,c=Ko(s);l--;)u[l]=arguments[l];var h=a<3&&u[0]!==c&&u[a-1]!==c?[]:kr(u,c);return(a-=h.length)<r?wo(t,e,po,s.placeholder,o,u,h,o,o,r-a):Ye(this&&this!==Ie&&this instanceof s?i:t,this,u)}}(t,e,c):e!=x&&e!=(m|x)||s.length?po.apply(o,O):function(t,e,r,i){var o=e&m,s=co(t);return function e(){for(var a=-1,u=arguments.length,l=-1,c=i.length,h=n(c+u),f=this&&this!==Ie&&this instanceof e?s:t;++l<c;)h[l]=i[l];for(;u--;)h[l++]=arguments[++a];return Ye(f,o?r:this,h)}}(t,e,r,i);else var k=function(t,e,r){var n=e&m,i=co(t);return function e(){return(this&&this!==Ie&&this instanceof e?i:t).apply(n?r:this,arguments)}}(t,e,r);return ss((g?ki:ns)(k,O),t,e)}function Oo(t,e,r,n){return t===o||da(t,ae[r])&&!ce.call(n,r)?e:t}function ko(t,e,r,n,i,s){return ka(t)&&ka(e)&&(s.set(e,t),_i(t,e,o,ko,s),s.delete(e)),t}function Mo(t){return Pa(t)?o:t}function To(t,e,r,n,i,s){var a=r&_,u=t.length,l=e.length;if(u!=l&&!(a&&l>u))return!1;var c=s.get(t);if(c&&s.get(e))return c==e;var h=-1,f=!0,d=r&g?new wn:o;for(s.set(t,e),s.set(e,t);++h<u;){var p=t[h],m=e[h];if(n)var v=a?n(m,p,h,e,t,s):n(p,m,h,t,e,s);if(v!==o){if(v)continue;f=!1;break}if(d){if(!nr(e,(function(t,e){if(!vr(d,e)&&(p===t||i(p,t,r,n,s)))return d.push(e)}))){f=!1;break}}else if(p!==m&&!i(p,m,r,n,s)){f=!1;break}}return s.delete(t),s.delete(e),f}function Ao(t){return os(ts(t,o,vs),t+"")}function Po(t){return Zn(t,iu,Uo)}function zo(t){return Zn(t,ou,No)}var Io=rn?function(t){return rn.get(t)}:Ku;function Vo(t){for(var e=t.name+"",r=nn[e],n=ce.call(nn,e)?r.length:0;n--;){var i=r[n],o=i.func;if(null==o||o==t)return i.name}return e}function Ko(t){return(ce.call(dn,"placeholder")?dn:t).placeholder}function Ro(){var t=dn.iteratee||Pu;return t=t===Pu?ui:t,arguments.length?t(arguments[0],arguments[1]):t}function jo(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function Do(t){for(var e=iu(t),r=e.length;r--;){var n=e[r],i=t[n];e[r]=[n,i,Qo(i)]}return e}function Lo(t,e){var r=function(t,e){return null==t?o:t[e]}(t,e);return ai(r)?r:o}var Uo=Lr?function(t){return null==t?[]:(t=ee(t),Ge(Lr(t),(function(e){return Ve.call(t,e)})))}:Fu,No=Lr?function(t){for(var e=[];t;)tr(e,Uo(t)),t=Pe(t);return e}:Fu,Fo=Qn;function Wo(t,e,r){for(var n=-1,i=(e=$i(e,t)).length,o=!1;++n<i;){var s=cs(e[n]);if(!(o=null!=t&&r(t,s)))break;t=t[s]}return o||++n!=i?o:!!(i=null==t?0:t.length)&&Oa(i)&&$o(s,i)&&(ma(t)||ga(t))}function Bo(t){return"function"!=typeof t.constructor||Zo(t)?{}:pn(Pe(t))}function Yo(t){return ma(t)||ga(t)||!!(je&&t&&t[je])}function $o(t,e){var r=typeof t;return!!(e=null==e?V:e)&&("number"==r||"symbol"!=r&&Xt.test(t))&&t>-1&&t%1==0&&t<e}function Ho(t,e,r){if(!ka(r))return!1;var n=typeof e;return!!("number"==n?ya(r)&&$o(e,r.length):"string"==n&&e in r)&&da(r[e],t)}function Xo(t,e){if(ma(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Ka(t))||(At.test(t)||!Tt.test(t)||null!=e&&t in ee(e))}function qo(t){var e=Vo(t),r=dn[e];if("function"!=typeof r||!(e in mn.prototype))return!1;if(t===r)return!0;var n=Io(r);return!!n&&t===n[0]}(Gr&&Fo(new Gr(new ArrayBuffer(1)))!=lt||Zr&&Fo(new Zr)!=G||Qr&&"[object Promise]"!=Fo(Qr.resolve())||Jr&&Fo(new Jr)!=rt||tn&&Fo(new tn)!=st)&&(Fo=function(t){var e=Qn(t),r=e==J?t.constructor:o,n=r?hs(r):"";if(n)switch(n){case on:return lt;case sn:return G;case an:return"[object Promise]";case un:return rt;case ln:return st}return e});var Go=ue?Ea:Wu;function Zo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ae)}function Qo(t){return t==t&&!ka(t)}function Jo(t,e){return function(r){return null!=r&&(r[t]===e&&(e!==o||t in ee(r)))}}function ts(t,e,r){return e=Br(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,s=Br(i.length-e,0),a=n(s);++o<s;)a[o]=i[e+o];o=-1;for(var u=n(e+1);++o<e;)u[o]=i[o];return u[e]=r(a),Ye(t,this,u)}}function es(t,e){return e.length<2?t:Gn(t,Ai(e,0,-1))}function rs(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var ns=as(ki),is=Rr||function(t,e){return Ie.setTimeout(t,e)},os=as(Mi);function ss(t,e,r){var n=e+"";return os(t,function(t,e){var r=e.length;if(!r)return t;var n=r-1;return e[n]=(r>1?"& ":"")+e[n],e=e.join(r>2?", ":" "),t.replace(jt,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return He(U,(function(r){var n="_."+r[0];e&r[1]&&!Ze(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(Dt);return e?e[1].split(Lt):[]}(n),r)))}function as(t){var e=0,r=0;return function(){var n=$r(),i=A-(n-r);if(r=n,i>0){if(++e>=T)return arguments[0]}else e=0;return t.apply(o,arguments)}}function us(t,e){var r=-1,n=t.length,i=n-1;for(e=e===o?n:e;++r<e;){var s=wi(r,i),a=t[s];t[s]=t[r],t[r]=a}return t.length=e,t}var ls=function(t){var e=aa(t,(function(t){return r.size===c&&r.clear(),t})),r=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Pt,(function(t,r,n,i){e.push(n?i.replace(Nt,"$1"):r||t)})),e}));function cs(t){if("string"==typeof t||Ka(t))return t;var e=t+"";return"0"==e&&1/t==-I?"-0":e}function hs(t){if(null!=t){try{return le.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fs(t){if(t instanceof mn)return t.clone();var e=new gn(t.__wrapped__,t.__chain__);return e.__actions__=ro(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ds=Si((function(t,e){return ba(t)?Dn(t,Bn(e,1,ba,!0)):[]})),ps=Si((function(t,e){var r=Ss(e);return ba(r)&&(r=o),ba(t)?Dn(t,Bn(e,1,ba,!0),Ro(r,2)):[]})),_s=Si((function(t,e){var r=Ss(e);return ba(r)&&(r=o),ba(t)?Dn(t,Bn(e,1,ba,!0),o,r):[]}));function gs(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:Na(r);return i<0&&(i=Br(n+i,0)),sr(t,Ro(e,3),i)}function ms(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=n-1;return r!==o&&(i=Na(r),i=r<0?Br(n+i,0):Yr(i,n-1)),sr(t,Ro(e,3),i,!0)}function vs(t){return(null==t?0:t.length)?Bn(t,1):[]}function ys(t){return t&&t.length?t[0]:o}var bs=Si((function(t){var e=Je(t,Bi);return e.length&&e[0]===t[0]?ri(e):[]})),ws=Si((function(t){var e=Ss(t),r=Je(t,Bi);return e===Ss(r)?e=o:r.pop(),r.length&&r[0]===t[0]?ri(r,Ro(e,2)):[]})),xs=Si((function(t){var e=Ss(t),r=Je(t,Bi);return(e="function"==typeof e?e:o)&&r.pop(),r.length&&r[0]===t[0]?ri(r,o,e):[]}));function Ss(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Es=Si(Cs);function Cs(t,e){return t&&t.length&&e&&e.length?yi(t,e):t}var Os=Ao((function(t,e){var r=null==t?0:t.length,n=In(t,e);return bi(t,Je(e,(function(t){return $o(t,r)?+t:t})).sort(Ji)),n}));function ks(t){return null==t?t:qr.call(t)}var Ms=Si((function(t){return ji(Bn(t,1,ba,!0))})),Ts=Si((function(t){var e=Ss(t);return ba(e)&&(e=o),ji(Bn(t,1,ba,!0),Ro(e,2))})),As=Si((function(t){var e=Ss(t);return e="function"==typeof e?e:o,ji(Bn(t,1,ba,!0),o,e)}));function Ps(t){if(!t||!t.length)return[];var e=0;return t=Ge(t,(function(t){if(ba(t))return e=Br(t.length,e),!0})),_r(e,(function(e){return Je(t,hr(e))}))}function zs(t,e){if(!t||!t.length)return[];var r=Ps(t);return null==e?r:Je(r,(function(t){return Ye(e,o,t)}))}var Is=Si((function(t,e){return ba(t)?Dn(t,e):[]})),Vs=Si((function(t){return Fi(Ge(t,ba))})),Ks=Si((function(t){var e=Ss(t);return ba(e)&&(e=o),Fi(Ge(t,ba),Ro(e,2))})),Rs=Si((function(t){var e=Ss(t);return e="function"==typeof e?e:o,Fi(Ge(t,ba),o,e)})),js=Si(Ps);var Ds=Si((function(t){var e=t.length,r=e>1?t[e-1]:o;return r="function"==typeof r?(t.pop(),r):o,zs(t,r)}));function Ls(t){var e=dn(t);return e.__chain__=!0,e}function Us(t,e){return e(t)}var Ns=Ao((function(t){var e=t.length,r=e?t[0]:0,n=this.__wrapped__,i=function(e){return In(e,t)};return!(e>1||this.__actions__.length)&&n instanceof mn&&$o(r)?((n=n.slice(r,+r+(e?1:0))).__actions__.push({func:Us,args:[i],thisArg:o}),new gn(n,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(i)}));var Fs=io((function(t,e,r){ce.call(t,r)?++t[r]:zn(t,r,1)}));var Ws=ho(gs),Bs=ho(ms);function Ys(t,e){return(ma(t)?He:Ln)(t,Ro(e,3))}function $s(t,e){return(ma(t)?Xe:Un)(t,Ro(e,3))}var Hs=io((function(t,e,r){ce.call(t,r)?t[r].push(e):zn(t,r,[e])}));var Xs=Si((function(t,e,r){var i=-1,o="function"==typeof e,s=ya(t)?n(t.length):[];return Ln(t,(function(t){s[++i]=o?Ye(e,t,r):ni(t,e,r)})),s})),qs=io((function(t,e,r){zn(t,r,e)}));function Gs(t,e){return(ma(t)?Je:fi)(t,Ro(e,3))}var Zs=io((function(t,e,r){t[r?0:1].push(e)}),(function(){return[[],[]]}));var Qs=Si((function(t,e){if(null==t)return[];var r=e.length;return r>1&&Ho(t,e[0],e[1])?e=[]:r>2&&Ho(e[0],e[1],e[2])&&(e=[e[0]]),mi(t,Bn(e,1),[])})),Js=Kr||function(){return Ie.Date.now()};function ta(t,e,r){return e=r?o:e,e=t&&null==e?t.length:e,Co(t,E,o,o,o,o,e)}function ea(t,e){var r;if("function"!=typeof e)throw new ie(u);return t=Na(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=o),r}}var ra=Si((function(t,e,r){var n=m;if(r.length){var i=kr(r,Ko(ra));n|=x}return Co(t,n,e,r,i)})),na=Si((function(t,e,r){var n=m|v;if(r.length){var i=kr(r,Ko(na));n|=x}return Co(e,n,t,r,i)}));function ia(t,e,r){var n,i,s,a,l,c,h=0,f=!1,d=!1,p=!0;if("function"!=typeof t)throw new ie(u);function _(e){var r=n,s=i;return n=i=o,h=e,a=t.apply(s,r)}function g(t){var r=t-c;return c===o||r>=e||r<0||d&&t-h>=s}function m(){var t=Js();if(g(t))return v(t);l=is(m,function(t){var r=e-(t-c);return d?Yr(r,s-(t-h)):r}(t))}function v(t){return l=o,p&&n?_(t):(n=i=o,a)}function y(){var t=Js(),r=g(t);if(n=arguments,i=this,c=t,r){if(l===o)return function(t){return h=t,l=is(m,e),f?_(t):a}(c);if(d)return qi(l),l=is(m,e),_(c)}return l===o&&(l=is(m,e)),a}return e=Wa(e)||0,ka(r)&&(f=!!r.leading,s=(d="maxWait"in r)?Br(Wa(r.maxWait)||0,e):s,p="trailing"in r?!!r.trailing:p),y.cancel=function(){l!==o&&qi(l),h=0,n=c=i=l=o},y.flush=function(){return l===o?a:v(Js())},y}var oa=Si((function(t,e){return jn(t,1,e)})),sa=Si((function(t,e,r){return jn(t,Wa(e)||0,r)}));function aa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ie(u);var r=function(){var n=arguments,i=e?e.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var s=t.apply(this,n);return r.cache=o.set(i,s)||o,s};return r.cache=new(aa.Cache||bn),r}function ua(t){if("function"!=typeof t)throw new ie(u);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}aa.Cache=bn;var la=Hi((function(t,e){var r=(e=1==e.length&&ma(e[0])?Je(e[0],gr(Ro())):Je(Bn(e,1),gr(Ro()))).length;return Si((function(n){for(var i=-1,o=Yr(n.length,r);++i<o;)n[i]=e[i].call(this,n[i]);return Ye(t,this,n)}))})),ca=Si((function(t,e){var r=kr(e,Ko(ca));return Co(t,x,o,e,r)})),ha=Si((function(t,e){var r=kr(e,Ko(ha));return Co(t,S,o,e,r)})),fa=Ao((function(t,e){return Co(t,C,o,o,o,e)}));function da(t,e){return t===e||t!=t&&e!=e}var pa=bo(Jn),_a=bo((function(t,e){return t>=e})),ga=ii(function(){return arguments}())?ii:function(t){return Ma(t)&&ce.call(t,"callee")&&!Ve.call(t,"callee")},ma=n.isArray,va=Le?gr(Le):function(t){return Ma(t)&&Qn(t)==ut};function ya(t){return null!=t&&Oa(t.length)&&!Ea(t)}function ba(t){return Ma(t)&&ya(t)}var wa=Ur||Wu,xa=Ue?gr(Ue):function(t){return Ma(t)&&Qn(t)==Y};function Sa(t){if(!Ma(t))return!1;var e=Qn(t);return e==H||e==$||"string"==typeof t.message&&"string"==typeof t.name&&!Pa(t)}function Ea(t){if(!ka(t))return!1;var e=Qn(t);return e==X||e==q||e==W||e==tt}function Ca(t){return"number"==typeof t&&t==Na(t)}function Oa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=V}function ka(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ma(t){return null!=t&&"object"==typeof t}var Ta=Ne?gr(Ne):function(t){return Ma(t)&&Fo(t)==G};function Aa(t){return"number"==typeof t||Ma(t)&&Qn(t)==Z}function Pa(t){if(!Ma(t)||Qn(t)!=J)return!1;var e=Pe(t);if(null===e)return!0;var r=ce.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&le.call(r)==pe}var za=Fe?gr(Fe):function(t){return Ma(t)&&Qn(t)==et};var Ia=We?gr(We):function(t){return Ma(t)&&Fo(t)==rt};function Va(t){return"string"==typeof t||!ma(t)&&Ma(t)&&Qn(t)==nt}function Ka(t){return"symbol"==typeof t||Ma(t)&&Qn(t)==it}var Ra=Be?gr(Be):function(t){return Ma(t)&&Oa(t.length)&&!!Oe[Qn(t)]};var ja=bo(hi),Da=bo((function(t,e){return t<=e}));function La(t){if(!t)return[];if(ya(t))return Va(t)?Pr(t):ro(t);if(De&&t[De])return function(t){for(var e,r=[];!(e=t.next()).done;)r.push(e.value);return r}(t[De]());var e=Fo(t);return(e==G?Cr:e==rt?Mr:du)(t)}function Ua(t){return t?(t=Wa(t))===I||t===-I?(t<0?-1:1)*K:t==t?t:0:0===t?t:0}function Na(t){var e=Ua(t),r=e%1;return e==e?r?e-r:e:0}function Fa(t){return t?Vn(Na(t),0,j):0}function Wa(t){if("number"==typeof t)return t;if(Ka(t))return R;if(ka(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=ka(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Vt,"");var r=Yt.test(t);return r||Ht.test(t)?Ae(t.slice(2),r?2:8):Bt.test(t)?R:+t}function Ba(t){return no(t,ou(t))}function Ya(t){return null==t?"":Ri(t)}var $a=oo((function(t,e){if(Zo(e)||ya(e))no(e,iu(e),t);else for(var r in e)ce.call(e,r)&&Mn(t,r,e[r])})),Ha=oo((function(t,e){no(e,ou(e),t)})),Xa=oo((function(t,e,r,n){no(e,ou(e),t,n)})),qa=oo((function(t,e,r,n){no(e,iu(e),t,n)})),Ga=Ao(In);var Za=Si((function(t,e){t=ee(t);var r=-1,n=e.length,i=n>2?e[2]:o;for(i&&Ho(e[0],e[1],i)&&(n=1);++r<n;)for(var s=e[r],a=ou(s),u=-1,l=a.length;++u<l;){var c=a[u],h=t[c];(h===o||da(h,ae[c])&&!ce.call(t,c))&&(t[c]=s[c])}return t})),Qa=Si((function(t){return t.push(o,ko),Ye(au,o,t)}));function Ja(t,e,r){var n=null==t?o:Gn(t,e);return n===o?r:n}function tu(t,e){return null!=t&&Wo(t,e,ei)}var eu=_o((function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),t[e]=r}),ku(Au)),ru=_o((function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),ce.call(t,e)?t[e].push(r):t[e]=[r]}),Ro),nu=Si(ni);function iu(t){return ya(t)?Sn(t):li(t)}function ou(t){return ya(t)?Sn(t,!0):ci(t)}var su=oo((function(t,e,r){_i(t,e,r)})),au=oo((function(t,e,r,n){_i(t,e,r,n)})),uu=Ao((function(t,e){var r={};if(null==t)return r;var n=!1;e=Je(e,(function(e){return e=$i(e,t),n||(n=e.length>1),e})),no(t,zo(t),r),n&&(r=Kn(r,f|d|p,Mo));for(var i=e.length;i--;)Di(r,e[i]);return r}));var lu=Ao((function(t,e){return null==t?{}:function(t,e){return vi(t,e,(function(e,r){return tu(t,r)}))}(t,e)}));function cu(t,e){if(null==t)return{};var r=Je(zo(t),(function(t){return[t]}));return e=Ro(e),vi(t,r,(function(t,r){return e(t,r[0])}))}var hu=Eo(iu),fu=Eo(ou);function du(t){return null==t?[]:mr(t,iu(t))}var pu=lo((function(t,e,r){return e=e.toLowerCase(),t+(r?_u(e):e)}));function _u(t){return Su(Ya(t).toLowerCase())}function gu(t){return(t=Ya(t))&&t.replace(qt,wr).replace(ye,"")}var mu=lo((function(t,e,r){return t+(r?"-":"")+e.toLowerCase()})),vu=lo((function(t,e,r){return t+(r?" ":"")+e.toLowerCase()})),yu=uo("toLowerCase");var bu=lo((function(t,e,r){return t+(r?"_":"")+e.toLowerCase()}));var wu=lo((function(t,e,r){return t+(r?" ":"")+Su(e)}));var xu=lo((function(t,e,r){return t+(r?" ":"")+e.toUpperCase()})),Su=uo("toUpperCase");function Eu(t,e,r){return t=Ya(t),(e=r?o:e)===o?function(t){return Se.test(t)}(t)?function(t){return t.match(we)||[]}(t):function(t){return t.match(Ut)||[]}(t):t.match(e)||[]}var Cu=Si((function(t,e){try{return Ye(t,o,e)}catch(t){return Sa(t)?t:new Qt(t)}})),Ou=Ao((function(t,e){return He(e,(function(e){e=cs(e),zn(t,e,ra(t[e],t))})),t}));function ku(t){return function(){return t}}var Mu=fo(),Tu=fo(!0);function Au(t){return t}function Pu(t){return ui("function"==typeof t?t:Kn(t,f))}var zu=Si((function(t,e){return function(r){return ni(r,t,e)}})),Iu=Si((function(t,e){return function(r){return ni(t,r,e)}}));function Vu(t,e,r){var n=iu(e),i=qn(e,n);null!=r||ka(e)&&(i.length||!n.length)||(r=e,e=t,t=this,i=qn(e,iu(e)));var o=!(ka(r)&&"chain"in r&&!r.chain),s=Ea(t);return He(i,(function(r){var n=e[r];t[r]=n,s&&(t.prototype[r]=function(){var e=this.__chain__;if(o||e){var r=t(this.__wrapped__),i=r.__actions__=ro(this.__actions__);return i.push({func:n,args:arguments,thisArg:t}),r.__chain__=e,r}return n.apply(t,tr([this.value()],arguments))})})),t}function Ku(){}var Ru=mo(Je),ju=mo(qe),Du=mo(nr);function Lu(t){return Xo(t)?hr(cs(t)):function(t){return function(e){return Gn(e,t)}}(t)}var Uu=yo(),Nu=yo(!0);function Fu(){return[]}function Wu(){return!1}var Bu=go((function(t,e){return t+e}),0),Yu=xo("ceil"),$u=go((function(t,e){return t/e}),1),Hu=xo("floor");var Xu,qu=go((function(t,e){return t*e}),1),Gu=xo("round"),Zu=go((function(t,e){return t-e}),0);return dn.after=function(t,e){if("function"!=typeof e)throw new ie(u);return t=Na(t),function(){if(--t<1)return e.apply(this,arguments)}},dn.ary=ta,dn.assign=$a,dn.assignIn=Ha,dn.assignInWith=Xa,dn.assignWith=qa,dn.at=Ga,dn.before=ea,dn.bind=ra,dn.bindAll=Ou,dn.bindKey=na,dn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ma(t)?t:[t]},dn.chain=Ls,dn.chunk=function(t,e,r){e=(r?Ho(t,e,r):e===o)?1:Br(Na(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var s=0,a=0,u=n(jr(i/e));s<i;)u[a++]=Ai(t,s,s+=e);return u},dn.compact=function(t){for(var e=-1,r=null==t?0:t.length,n=0,i=[];++e<r;){var o=t[e];o&&(i[n++]=o)}return i},dn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),r=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tr(ma(r)?ro(r):[r],Bn(e,1))},dn.cond=function(t){var e=null==t?0:t.length,r=Ro();return t=e?Je(t,(function(t){if("function"!=typeof t[1])throw new ie(u);return[r(t[0]),t[1]]})):[],Si((function(r){for(var n=-1;++n<e;){var i=t[n];if(Ye(i[0],this,r))return Ye(i[1],this,r)}}))},dn.conforms=function(t){return function(t){var e=iu(t);return function(r){return Rn(r,t,e)}}(Kn(t,f))},dn.constant=ku,dn.countBy=Fs,dn.create=function(t,e){var r=pn(t);return null==e?r:Pn(r,e)},dn.curry=function t(e,r,n){var i=Co(e,b,o,o,o,o,o,r=n?o:r);return i.placeholder=t.placeholder,i},dn.curryRight=function t(e,r,n){var i=Co(e,w,o,o,o,o,o,r=n?o:r);return i.placeholder=t.placeholder,i},dn.debounce=ia,dn.defaults=Za,dn.defaultsDeep=Qa,dn.defer=oa,dn.delay=sa,dn.difference=ds,dn.differenceBy=ps,dn.differenceWith=_s,dn.drop=function(t,e,r){var n=null==t?0:t.length;return n?Ai(t,(e=r||e===o?1:Na(e))<0?0:e,n):[]},dn.dropRight=function(t,e,r){var n=null==t?0:t.length;return n?Ai(t,0,(e=n-(e=r||e===o?1:Na(e)))<0?0:e):[]},dn.dropRightWhile=function(t,e){return t&&t.length?Ui(t,Ro(e,3),!0,!0):[]},dn.dropWhile=function(t,e){return t&&t.length?Ui(t,Ro(e,3),!0):[]},dn.fill=function(t,e,r,n){var i=null==t?0:t.length;return i?(r&&"number"!=typeof r&&Ho(t,e,r)&&(r=0,n=i),function(t,e,r,n){var i=t.length;for((r=Na(r))<0&&(r=-r>i?0:i+r),(n=n===o||n>i?i:Na(n))<0&&(n+=i),n=r>n?0:Fa(n);r<n;)t[r++]=e;return t}(t,e,r,n)):[]},dn.filter=function(t,e){return(ma(t)?Ge:Wn)(t,Ro(e,3))},dn.flatMap=function(t,e){return Bn(Gs(t,e),1)},dn.flatMapDeep=function(t,e){return Bn(Gs(t,e),I)},dn.flatMapDepth=function(t,e,r){return r=r===o?1:Na(r),Bn(Gs(t,e),r)},dn.flatten=vs,dn.flattenDeep=function(t){return(null==t?0:t.length)?Bn(t,I):[]},dn.flattenDepth=function(t,e){return(null==t?0:t.length)?Bn(t,e=e===o?1:Na(e)):[]},dn.flip=function(t){return Co(t,O)},dn.flow=Mu,dn.flowRight=Tu,dn.fromPairs=function(t){for(var e=-1,r=null==t?0:t.length,n={};++e<r;){var i=t[e];n[i[0]]=i[1]}return n},dn.functions=function(t){return null==t?[]:qn(t,iu(t))},dn.functionsIn=function(t){return null==t?[]:qn(t,ou(t))},dn.groupBy=Hs,dn.initial=function(t){return(null==t?0:t.length)?Ai(t,0,-1):[]},dn.intersection=bs,dn.intersectionBy=ws,dn.intersectionWith=xs,dn.invert=eu,dn.invertBy=ru,dn.invokeMap=Xs,dn.iteratee=Pu,dn.keyBy=qs,dn.keys=iu,dn.keysIn=ou,dn.map=Gs,dn.mapKeys=function(t,e){var r={};return e=Ro(e,3),Hn(t,(function(t,n,i){zn(r,e(t,n,i),t)})),r},dn.mapValues=function(t,e){var r={};return e=Ro(e,3),Hn(t,(function(t,n,i){zn(r,n,e(t,n,i))})),r},dn.matches=function(t){return di(Kn(t,f))},dn.matchesProperty=function(t,e){return pi(t,Kn(e,f))},dn.memoize=aa,dn.merge=su,dn.mergeWith=au,dn.method=zu,dn.methodOf=Iu,dn.mixin=Vu,dn.negate=ua,dn.nthArg=function(t){return t=Na(t),Si((function(e){return gi(e,t)}))},dn.omit=uu,dn.omitBy=function(t,e){return cu(t,ua(Ro(e)))},dn.once=function(t){return ea(2,t)},dn.orderBy=function(t,e,r,n){return null==t?[]:(ma(e)||(e=null==e?[]:[e]),ma(r=n?o:r)||(r=null==r?[]:[r]),mi(t,e,r))},dn.over=Ru,dn.overArgs=la,dn.overEvery=ju,dn.overSome=Du,dn.partial=ca,dn.partialRight=ha,dn.partition=Zs,dn.pick=lu,dn.pickBy=cu,dn.property=Lu,dn.propertyOf=function(t){return function(e){return null==t?o:Gn(t,e)}},dn.pull=Es,dn.pullAll=Cs,dn.pullAllBy=function(t,e,r){return t&&t.length&&e&&e.length?yi(t,e,Ro(r,2)):t},dn.pullAllWith=function(t,e,r){return t&&t.length&&e&&e.length?yi(t,e,o,r):t},dn.pullAt=Os,dn.range=Uu,dn.rangeRight=Nu,dn.rearg=fa,dn.reject=function(t,e){return(ma(t)?Ge:Wn)(t,ua(Ro(e,3)))},dn.remove=function(t,e){var r=[];if(!t||!t.length)return r;var n=-1,i=[],o=t.length;for(e=Ro(e,3);++n<o;){var s=t[n];e(s,n,t)&&(r.push(s),i.push(n))}return bi(t,i),r},dn.rest=function(t,e){if("function"!=typeof t)throw new ie(u);return Si(t,e=e===o?e:Na(e))},dn.reverse=ks,dn.sampleSize=function(t,e,r){return e=(r?Ho(t,e,r):e===o)?1:Na(e),(ma(t)?Cn:Ci)(t,e)},dn.set=function(t,e,r){return null==t?t:Oi(t,e,r)},dn.setWith=function(t,e,r,n){return n="function"==typeof n?n:o,null==t?t:Oi(t,e,r,n)},dn.shuffle=function(t){return(ma(t)?On:Ti)(t)},dn.slice=function(t,e,r){var n=null==t?0:t.length;return n?(r&&"number"!=typeof r&&Ho(t,e,r)?(e=0,r=n):(e=null==e?0:Na(e),r=r===o?n:Na(r)),Ai(t,e,r)):[]},dn.sortBy=Qs,dn.sortedUniq=function(t){return t&&t.length?Vi(t):[]},dn.sortedUniqBy=function(t,e){return t&&t.length?Vi(t,Ro(e,2)):[]},dn.split=function(t,e,r){return r&&"number"!=typeof r&&Ho(t,e,r)&&(e=r=o),(r=r===o?j:r>>>0)?(t=Ya(t))&&("string"==typeof e||null!=e&&!za(e))&&!(e=Ri(e))&&Er(t)?Xi(Pr(t),0,r):t.split(e,r):[]},dn.spread=function(t,e){if("function"!=typeof t)throw new ie(u);return e=null==e?0:Br(Na(e),0),Si((function(r){var n=r[e],i=Xi(r,0,e);return n&&tr(i,n),Ye(t,this,i)}))},dn.tail=function(t){var e=null==t?0:t.length;return e?Ai(t,1,e):[]},dn.take=function(t,e,r){return t&&t.length?Ai(t,0,(e=r||e===o?1:Na(e))<0?0:e):[]},dn.takeRight=function(t,e,r){var n=null==t?0:t.length;return n?Ai(t,(e=n-(e=r||e===o?1:Na(e)))<0?0:e,n):[]},dn.takeRightWhile=function(t,e){return t&&t.length?Ui(t,Ro(e,3),!1,!0):[]},dn.takeWhile=function(t,e){return t&&t.length?Ui(t,Ro(e,3)):[]},dn.tap=function(t,e){return e(t),t},dn.throttle=function(t,e,r){var n=!0,i=!0;if("function"!=typeof t)throw new ie(u);return ka(r)&&(n="leading"in r?!!r.leading:n,i="trailing"in r?!!r.trailing:i),ia(t,e,{leading:n,maxWait:e,trailing:i})},dn.thru=Us,dn.toArray=La,dn.toPairs=hu,dn.toPairsIn=fu,dn.toPath=function(t){return ma(t)?Je(t,cs):Ka(t)?[t]:ro(ls(Ya(t)))},dn.toPlainObject=Ba,dn.transform=function(t,e,r){var n=ma(t),i=n||wa(t)||Ra(t);if(e=Ro(e,4),null==r){var o=t&&t.constructor;r=i?n?new o:[]:ka(t)&&Ea(o)?pn(Pe(t)):{}}return(i?He:Hn)(t,(function(t,n,i){return e(r,t,n,i)})),r},dn.unary=function(t){return ta(t,1)},dn.union=Ms,dn.unionBy=Ts,dn.unionWith=As,dn.uniq=function(t){return t&&t.length?ji(t):[]},dn.uniqBy=function(t,e){return t&&t.length?ji(t,Ro(e,2)):[]},dn.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?ji(t,o,e):[]},dn.unset=function(t,e){return null==t||Di(t,e)},dn.unzip=Ps,dn.unzipWith=zs,dn.update=function(t,e,r){return null==t?t:Li(t,e,Yi(r))},dn.updateWith=function(t,e,r,n){return n="function"==typeof n?n:o,null==t?t:Li(t,e,Yi(r),n)},dn.values=du,dn.valuesIn=function(t){return null==t?[]:mr(t,ou(t))},dn.without=Is,dn.words=Eu,dn.wrap=function(t,e){return ca(Yi(e),t)},dn.xor=Vs,dn.xorBy=Ks,dn.xorWith=Rs,dn.zip=js,dn.zipObject=function(t,e){return Wi(t||[],e||[],Mn)},dn.zipObjectDeep=function(t,e){return Wi(t||[],e||[],Oi)},dn.zipWith=Ds,dn.entries=hu,dn.entriesIn=fu,dn.extend=Ha,dn.extendWith=Xa,Vu(dn,dn),dn.add=Bu,dn.attempt=Cu,dn.camelCase=pu,dn.capitalize=_u,dn.ceil=Yu,dn.clamp=function(t,e,r){return r===o&&(r=e,e=o),r!==o&&(r=(r=Wa(r))==r?r:0),e!==o&&(e=(e=Wa(e))==e?e:0),Vn(Wa(t),e,r)},dn.clone=function(t){return Kn(t,p)},dn.cloneDeep=function(t){return Kn(t,f|p)},dn.cloneDeepWith=function(t,e){return Kn(t,f|p,e="function"==typeof e?e:o)},dn.cloneWith=function(t,e){return Kn(t,p,e="function"==typeof e?e:o)},dn.conformsTo=function(t,e){return null==e||Rn(t,e,iu(e))},dn.deburr=gu,dn.defaultTo=function(t,e){return null==t||t!=t?e:t},dn.divide=$u,dn.endsWith=function(t,e,r){t=Ya(t),e=Ri(e);var n=t.length,i=r=r===o?n:Vn(Na(r),0,n);return(r-=e.length)>=0&&t.slice(r,i)==e},dn.eq=da,dn.escape=function(t){return(t=Ya(t))&&Ct.test(t)?t.replace(St,xr):t},dn.escapeRegExp=function(t){return(t=Ya(t))&&It.test(t)?t.replace(zt,"\\$&"):t},dn.every=function(t,e,r){var n=ma(t)?qe:Nn;return r&&Ho(t,e,r)&&(e=o),n(t,Ro(e,3))},dn.find=Ws,dn.findIndex=gs,dn.findKey=function(t,e){return or(t,Ro(e,3),Hn)},dn.findLast=Bs,dn.findLastIndex=ms,dn.findLastKey=function(t,e){return or(t,Ro(e,3),Xn)},dn.floor=Hu,dn.forEach=Ys,dn.forEachRight=$s,dn.forIn=function(t,e){return null==t?t:Yn(t,Ro(e,3),ou)},dn.forInRight=function(t,e){return null==t?t:$n(t,Ro(e,3),ou)},dn.forOwn=function(t,e){return t&&Hn(t,Ro(e,3))},dn.forOwnRight=function(t,e){return t&&Xn(t,Ro(e,3))},dn.get=Ja,dn.gt=pa,dn.gte=_a,dn.has=function(t,e){return null!=t&&Wo(t,e,ti)},dn.hasIn=tu,dn.head=ys,dn.identity=Au,dn.includes=function(t,e,r,n){t=ya(t)?t:du(t),r=r&&!n?Na(r):0;var i=t.length;return r<0&&(r=Br(i+r,0)),Va(t)?r<=i&&t.indexOf(e,r)>-1:!!i&&ar(t,e,r)>-1},dn.indexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:Na(r);return i<0&&(i=Br(n+i,0)),ar(t,e,i)},dn.inRange=function(t,e,r){return e=Ua(e),r===o?(r=e,e=0):r=Ua(r),function(t,e,r){return t>=Yr(e,r)&&t<Br(e,r)}(t=Wa(t),e,r)},dn.invoke=nu,dn.isArguments=ga,dn.isArray=ma,dn.isArrayBuffer=va,dn.isArrayLike=ya,dn.isArrayLikeObject=ba,dn.isBoolean=function(t){return!0===t||!1===t||Ma(t)&&Qn(t)==B},dn.isBuffer=wa,dn.isDate=xa,dn.isElement=function(t){return Ma(t)&&1===t.nodeType&&!Pa(t)},dn.isEmpty=function(t){if(null==t)return!0;if(ya(t)&&(ma(t)||"string"==typeof t||"function"==typeof t.splice||wa(t)||Ra(t)||ga(t)))return!t.length;var e=Fo(t);if(e==G||e==rt)return!t.size;if(Zo(t))return!li(t).length;for(var r in t)if(ce.call(t,r))return!1;return!0},dn.isEqual=function(t,e){return oi(t,e)},dn.isEqualWith=function(t,e,r){var n=(r="function"==typeof r?r:o)?r(t,e):o;return n===o?oi(t,e,o,r):!!n},dn.isError=Sa,dn.isFinite=function(t){return"number"==typeof t&&Nr(t)},dn.isFunction=Ea,dn.isInteger=Ca,dn.isLength=Oa,dn.isMap=Ta,dn.isMatch=function(t,e){return t===e||si(t,e,Do(e))},dn.isMatchWith=function(t,e,r){return r="function"==typeof r?r:o,si(t,e,Do(e),r)},dn.isNaN=function(t){return Aa(t)&&t!=+t},dn.isNative=function(t){if(Go(t))throw new Qt(a);return ai(t)},dn.isNil=function(t){return null==t},dn.isNull=function(t){return null===t},dn.isNumber=Aa,dn.isObject=ka,dn.isObjectLike=Ma,dn.isPlainObject=Pa,dn.isRegExp=za,dn.isSafeInteger=function(t){return Ca(t)&&t>=-V&&t<=V},dn.isSet=Ia,dn.isString=Va,dn.isSymbol=Ka,dn.isTypedArray=Ra,dn.isUndefined=function(t){return t===o},dn.isWeakMap=function(t){return Ma(t)&&Fo(t)==st},dn.isWeakSet=function(t){return Ma(t)&&Qn(t)==at},dn.join=function(t,e){return null==t?"":Fr.call(t,e)},dn.kebabCase=mu,dn.last=Ss,dn.lastIndexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=n;return r!==o&&(i=(i=Na(r))<0?Br(n+i,0):Yr(i,n-1)),e==e?function(t,e,r){for(var n=r+1;n--;)if(t[n]===e)return n;return n}(t,e,i):sr(t,lr,i,!0)},dn.lowerCase=vu,dn.lowerFirst=yu,dn.lt=ja,dn.lte=Da,dn.max=function(t){return t&&t.length?Fn(t,Au,Jn):o},dn.maxBy=function(t,e){return t&&t.length?Fn(t,Ro(e,2),Jn):o},dn.mean=function(t){return cr(t,Au)},dn.meanBy=function(t,e){return cr(t,Ro(e,2))},dn.min=function(t){return t&&t.length?Fn(t,Au,hi):o},dn.minBy=function(t,e){return t&&t.length?Fn(t,Ro(e,2),hi):o},dn.stubArray=Fu,dn.stubFalse=Wu,dn.stubObject=function(){return{}},dn.stubString=function(){return""},dn.stubTrue=function(){return!0},dn.multiply=qu,dn.nth=function(t,e){return t&&t.length?gi(t,Na(e)):o},dn.noConflict=function(){return Ie._===this&&(Ie._=_e),this},dn.noop=Ku,dn.now=Js,dn.pad=function(t,e,r){t=Ya(t);var n=(e=Na(e))?Ar(t):0;if(!e||n>=e)return t;var i=(e-n)/2;return vo(Dr(i),r)+t+vo(jr(i),r)},dn.padEnd=function(t,e,r){t=Ya(t);var n=(e=Na(e))?Ar(t):0;return e&&n<e?t+vo(e-n,r):t},dn.padStart=function(t,e,r){t=Ya(t);var n=(e=Na(e))?Ar(t):0;return e&&n<e?vo(e-n,r)+t:t},dn.parseInt=function(t,e,r){return r||null==e?e=0:e&&(e=+e),Hr(Ya(t).replace(Kt,""),e||0)},dn.random=function(t,e,r){if(r&&"boolean"!=typeof r&&Ho(t,e,r)&&(e=r=o),r===o&&("boolean"==typeof e?(r=e,e=o):"boolean"==typeof t&&(r=t,t=o)),t===o&&e===o?(t=0,e=1):(t=Ua(t),e===o?(e=t,t=0):e=Ua(e)),t>e){var n=t;t=e,e=n}if(r||t%1||e%1){var i=Xr();return Yr(t+i*(e-t+Te("1e-"+((i+"").length-1))),e)}return wi(t,e)},dn.reduce=function(t,e,r){var n=ma(t)?er:dr,i=arguments.length<3;return n(t,Ro(e,4),r,i,Ln)},dn.reduceRight=function(t,e,r){var n=ma(t)?rr:dr,i=arguments.length<3;return n(t,Ro(e,4),r,i,Un)},dn.repeat=function(t,e,r){return e=(r?Ho(t,e,r):e===o)?1:Na(e),xi(Ya(t),e)},dn.replace=function(){var t=arguments,e=Ya(t[0]);return t.length<3?e:e.replace(t[1],t[2])},dn.result=function(t,e,r){var n=-1,i=(e=$i(e,t)).length;for(i||(i=1,t=o);++n<i;){var s=null==t?o:t[cs(e[n])];s===o&&(n=i,s=r),t=Ea(s)?s.call(t):s}return t},dn.round=Gu,dn.runInContext=t,dn.sample=function(t){return(ma(t)?En:Ei)(t)},dn.size=function(t){if(null==t)return 0;if(ya(t))return Va(t)?Ar(t):t.length;var e=Fo(t);return e==G||e==rt?t.size:li(t).length},dn.snakeCase=bu,dn.some=function(t,e,r){var n=ma(t)?nr:Pi;return r&&Ho(t,e,r)&&(e=o),n(t,Ro(e,3))},dn.sortedIndex=function(t,e){return zi(t,e)},dn.sortedIndexBy=function(t,e,r){return Ii(t,e,Ro(r,2))},dn.sortedIndexOf=function(t,e){var r=null==t?0:t.length;if(r){var n=zi(t,e);if(n<r&&da(t[n],e))return n}return-1},dn.sortedLastIndex=function(t,e){return zi(t,e,!0)},dn.sortedLastIndexBy=function(t,e,r){return Ii(t,e,Ro(r,2),!0)},dn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var r=zi(t,e,!0)-1;if(da(t[r],e))return r}return-1},dn.startCase=wu,dn.startsWith=function(t,e,r){return t=Ya(t),r=null==r?0:Vn(Na(r),0,t.length),e=Ri(e),t.slice(r,r+e.length)==e},dn.subtract=Zu,dn.sum=function(t){return t&&t.length?pr(t,Au):0},dn.sumBy=function(t,e){return t&&t.length?pr(t,Ro(e,2)):0},dn.template=function(t,e,r){var n=dn.templateSettings;r&&Ho(t,e,r)&&(e=o),t=Ya(t),e=Xa({},e,n,Oo);var i,s,a=Xa({},e.imports,n.imports,Oo),u=iu(a),l=mr(a,u),c=0,h=e.interpolate||Gt,f="__p += '",d=re((e.escape||Gt).source+"|"+h.source+"|"+(h===Mt?Ft:Gt).source+"|"+(e.evaluate||Gt).source+"|$","g"),p="//# sourceURL="+(ce.call(e,"sourceURL")?(e.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Ce+"]")+"\n";t.replace(d,(function(e,r,n,o,a,u){return n||(n=o),f+=t.slice(c,u).replace(Zt,Sr),r&&(i=!0,f+="' +\n__e("+r+") +\n'"),a&&(s=!0,f+="';\n"+a+";\n__p += '"),n&&(f+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),c=u+e.length,e})),f+="';\n";var _=ce.call(e,"variable")&&e.variable;_||(f="with (obj) {\n"+f+"\n}\n"),f=(s?f.replace(yt,""):f).replace(bt,"$1").replace(wt,"$1;"),f="function("+(_||"obj")+") {\n"+(_?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var g=Cu((function(){return Jt(u,p+"return "+f).apply(o,l)}));if(g.source=f,Sa(g))throw g;return g},dn.times=function(t,e){if((t=Na(t))<1||t>V)return[];var r=j,n=Yr(t,j);e=Ro(e),t-=j;for(var i=_r(n,e);++r<t;)e(r);return i},dn.toFinite=Ua,dn.toInteger=Na,dn.toLength=Fa,dn.toLower=function(t){return Ya(t).toLowerCase()},dn.toNumber=Wa,dn.toSafeInteger=function(t){return t?Vn(Na(t),-V,V):0===t?t:0},dn.toString=Ya,dn.toUpper=function(t){return Ya(t).toUpperCase()},dn.trim=function(t,e,r){if((t=Ya(t))&&(r||e===o))return t.replace(Vt,"");if(!t||!(e=Ri(e)))return t;var n=Pr(t),i=Pr(e);return Xi(n,yr(n,i),br(n,i)+1).join("")},dn.trimEnd=function(t,e,r){if((t=Ya(t))&&(r||e===o))return t.replace(Rt,"");if(!t||!(e=Ri(e)))return t;var n=Pr(t);return Xi(n,0,br(n,Pr(e))+1).join("")},dn.trimStart=function(t,e,r){if((t=Ya(t))&&(r||e===o))return t.replace(Kt,"");if(!t||!(e=Ri(e)))return t;var n=Pr(t);return Xi(n,yr(n,Pr(e))).join("")},dn.truncate=function(t,e){var r=k,n=M;if(ka(e)){var i="separator"in e?e.separator:i;r="length"in e?Na(e.length):r,n="omission"in e?Ri(e.omission):n}var s=(t=Ya(t)).length;if(Er(t)){var a=Pr(t);s=a.length}if(r>=s)return t;var u=r-Ar(n);if(u<1)return n;var l=a?Xi(a,0,u).join(""):t.slice(0,u);if(i===o)return l+n;if(a&&(u+=l.length-u),za(i)){if(t.slice(u).search(i)){var c,h=l;for(i.global||(i=re(i.source,Ya(Wt.exec(i))+"g")),i.lastIndex=0;c=i.exec(h);)var f=c.index;l=l.slice(0,f===o?u:f)}}else if(t.indexOf(Ri(i),u)!=u){var d=l.lastIndexOf(i);d>-1&&(l=l.slice(0,d))}return l+n},dn.unescape=function(t){return(t=Ya(t))&&Et.test(t)?t.replace(xt,zr):t},dn.uniqueId=function(t){var e=++he;return Ya(t)+e},dn.upperCase=xu,dn.upperFirst=Su,dn.each=Ys,dn.eachRight=$s,dn.first=ys,Vu(dn,(Xu={},Hn(dn,(function(t,e){ce.call(dn.prototype,e)||(Xu[e]=t)})),Xu),{chain:!1}),dn.VERSION="4.17.15",He(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){dn[t].placeholder=dn})),He(["drop","take"],(function(t,e){mn.prototype[t]=function(r){r=r===o?1:Br(Na(r),0);var n=this.__filtered__&&!e?new mn(this):this.clone();return n.__filtered__?n.__takeCount__=Yr(r,n.__takeCount__):n.__views__.push({size:Yr(r,j),type:t+(n.__dir__<0?"Right":"")}),n},mn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),He(["filter","map","takeWhile"],(function(t,e){var r=e+1,n=r==P||3==r;mn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Ro(t,3),type:r}),e.__filtered__=e.__filtered__||n,e}})),He(["head","last"],(function(t,e){var r="take"+(e?"Right":"");mn.prototype[t]=function(){return this[r](1).value()[0]}})),He(["initial","tail"],(function(t,e){var r="drop"+(e?"":"Right");mn.prototype[t]=function(){return this.__filtered__?new mn(this):this[r](1)}})),mn.prototype.compact=function(){return this.filter(Au)},mn.prototype.find=function(t){return this.filter(t).head()},mn.prototype.findLast=function(t){return this.reverse().find(t)},mn.prototype.invokeMap=Si((function(t,e){return"function"==typeof t?new mn(this):this.map((function(r){return ni(r,t,e)}))})),mn.prototype.reject=function(t){return this.filter(ua(Ro(t)))},mn.prototype.slice=function(t,e){t=Na(t);var r=this;return r.__filtered__&&(t>0||e<0)?new mn(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),e!==o&&(r=(e=Na(e))<0?r.dropRight(-e):r.take(e-t)),r)},mn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},mn.prototype.toArray=function(){return this.take(j)},Hn(mn.prototype,(function(t,e){var r=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),i=dn[n?"take"+("last"==e?"Right":""):e],s=n||/^find/.test(e);i&&(dn.prototype[e]=function(){var e=this.__wrapped__,a=n?[1]:arguments,u=e instanceof mn,l=a[0],c=u||ma(e),h=function(t){var e=i.apply(dn,tr([t],a));return n&&f?e[0]:e};c&&r&&"function"==typeof l&&1!=l.length&&(u=c=!1);var f=this.__chain__,d=!!this.__actions__.length,p=s&&!f,_=u&&!d;if(!s&&c){e=_?e:new mn(this);var g=t.apply(e,a);return g.__actions__.push({func:Us,args:[h],thisArg:o}),new gn(g,f)}return p&&_?t.apply(this,a):(g=this.thru(h),p?n?g.value()[0]:g.value():g)})})),He(["pop","push","shift","sort","splice","unshift"],(function(t){var e=oe[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);dn.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var i=this.value();return e.apply(ma(i)?i:[],t)}return this[r]((function(r){return e.apply(ma(r)?r:[],t)}))}})),Hn(mn.prototype,(function(t,e){var r=dn[e];if(r){var n=r.name+"";ce.call(nn,n)||(nn[n]=[]),nn[n].push({name:e,func:r})}})),nn[po(o,v).name]=[{name:"wrapper",func:o}],mn.prototype.clone=function(){var t=new mn(this.__wrapped__);return t.__actions__=ro(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ro(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ro(this.__views__),t},mn.prototype.reverse=function(){if(this.__filtered__){var t=new mn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},mn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,r=ma(t),n=e<0,i=r?t.length:0,o=function(t,e,r){var n=-1,i=r.length;for(;++n<i;){var o=r[n],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":e-=s;break;case"take":e=Yr(e,t+s);break;case"takeRight":t=Br(t,e-s)}}return{start:t,end:e}}(0,i,this.__views__),s=o.start,a=o.end,u=a-s,l=n?a:s-1,c=this.__iteratees__,h=c.length,f=0,d=Yr(u,this.__takeCount__);if(!r||!n&&i==u&&d==u)return Ni(t,this.__actions__);var p=[];t:for(;u--&&f<d;){for(var _=-1,g=t[l+=e];++_<h;){var m=c[_],v=m.iteratee,y=m.type,b=v(g);if(y==z)g=b;else if(!b){if(y==P)continue t;break t}}p[f++]=g}return p},dn.prototype.at=Ns,dn.prototype.chain=function(){return Ls(this)},dn.prototype.commit=function(){return new gn(this.value(),this.__chain__)},dn.prototype.next=function(){this.__values__===o&&(this.__values__=La(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},dn.prototype.plant=function(t){for(var e,r=this;r instanceof _n;){var n=fs(r);n.__index__=0,n.__values__=o,e?i.__wrapped__=n:e=n;var i=n;r=r.__wrapped__}return i.__wrapped__=t,e},dn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof mn){var e=t;return this.__actions__.length&&(e=new mn(this)),(e=e.reverse()).__actions__.push({func:Us,args:[ks],thisArg:o}),new gn(e,this.__chain__)}return this.thru(ks)},dn.prototype.toJSON=dn.prototype.valueOf=dn.prototype.value=function(){return Ni(this.__wrapped__,this.__actions__)},dn.prototype.first=dn.prototype.head,De&&(dn.prototype[De]=function(){return this}),dn}();Ie._=Ir,(i=function(){return Ir}.call(e,r,e,n))===o||(n.exports=i)}).call(this)}).call(this,r(20),r(26)(t))},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0});var i=r(4);e.Dimension=i.default;var o=r(13);e.Vector=o.default;var s=r(10);e.Operator=s.default;var a=r(27);e.Photons=a.default;var u=r(5);e.Cx=u.Cx,e.Complex=u.default,n(r(14)),n(r(28)),n(r(9)),n(r(21))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TAU=2*Math.PI},function(t,e,r){"use strict";var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)n[i]=o[s];return n},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(5),s=r(14),a=i(r(13)),u=i(r(4)),l=i(r(7)),c=function(){function t(t,e,r){void 0===r&&(r=e),this.entries=t,this.dimensionsOut=e,this.dimensionsIn=r}return Object.defineProperty(t.prototype,"dimensions",{get:function(){return[this.dimensionsOut,this.dimensionsIn]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sizeOut",{get:function(){return this.dimensionsOut.map((function(t){return t.size}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sizeIn",{get:function(){return this.dimensionsIn.map((function(t){return t.size}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"totalSizeOut",{get:function(){return this.sizeOut.reduce((function(t,e){return t*e}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"totalSizeIn",{get:function(){return this.sizeIn.reduce((function(t,e){return t*e}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"namesOut",{get:function(){return this.dimensionsOut.map((function(t){return t.name}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"namesIn",{get:function(){return this.dimensionsIn.map((function(t){return t.name}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"coordNamesOut",{get:function(){return this.dimensionsOut.map((function(t){return t.coordNames}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"coordNamesIn",{get:function(){return this.dimensionsIn.map((function(t){return t.coordNames}))},enumerable:!0,configurable:!0}),t.prototype.conj=function(){return new t(this.entries.map((function(t){return new s.OperatorEntry(n(t.coordOut),n(t.coordIn),t.value.conj())})),this.dimensionsOut,this.dimensionsIn)},t.prototype.transpose=function(){return new t(this.entries.map((function(t){return new s.OperatorEntry(n(t.coordIn),n(t.coordOut),t.value)})),this.dimensionsIn,this.dimensionsOut)},t.prototype.dag=function(){return new t(this.entries.map((function(t){return new s.OperatorEntry(n(t.coordIn),n(t.coordOut),t.value.conj())})),this.dimensionsIn,this.dimensionsOut)},t.prototype.outer=function(e){var r=this.dimensionsOut.concat(e.dimensionsOut),n=this.dimensionsIn.concat(e.dimensionsIn),i=[];return this.entries.forEach((function(t){return e.entries.forEach((function(e){return i.push(t.outer(e))}))})),new t(i,r,n)},t.prototype.add=function(e){var r=this;return u.default.checkDimensions(r.dimensionsIn,e.dimensionsIn),u.default.checkDimensions(r.dimensionsOut,e.dimensionsOut),new t(l.default.chain(r.entries.concat(e.entries)).groupBy((function(t){return t.coordOut.toString()+"-"+t.coordIn.toString()+" "})).values().map((function(t){var e=n(t[0].coordOut),r=n(t[0].coordIn),i=t.map((function(t){return t.value})).reduce((function(t,e){return t.add(e)}));return new s.OperatorEntry(e,r,i)})).value(),r.dimensionsOut,r.dimensionsIn)},t.prototype.mulConstant=function(e){return new t(this.entries.map((function(t){return new s.OperatorEntry(t.coordOut,t.coordIn,t.value.mul(e))})),this.dimensionsOut,this.dimensionsIn)},t.prototype.sub=function(t){return this.add(t.mulConstant(o.Cx(-1)))},t.prototype.mulVec=function(t){var e=this;u.default.checkDimensions(e.dimensionsIn,t.dimensions);var r=new Map;t.cells.forEach((function(t){r.set(t.coord.toString(),t.value)}));var n=l.default.chain(e.entries).groupBy((function(t){return t.coordOut.toString()})).values().map((function(t){var e=t[0].coordOut,n=t.map((function(t){var e=t.coordIn.toString(),n=r.get(e)||o.Cx(0);return t.value.mul(n)})).reduce((function(t,e){return t.add(e)}));return new s.VectorEntry(e,n)})).filter((function(t){return!t.value.isZero()})).value();return new a.default(n,e.dimensionsOut)},t.prototype.mulVecPartial=function(t,e){var r=this;if(!l.default.chain(t).sortBy().sortedUniq().isEqual(t))throw"Entries of coordIndices "+t+" are not sorted unique.";u.default.checkDimensions(r.dimensionsIn,l.default.at(e.dimensions,t));var i=l.default.range(e.dimensions.length).filter((function(e){return l.default.includes(t,e)})),c=l.default.cloneDeep(e.dimensions);l.default.range(t.length).forEach((function(e){return c[t[e]]=r.dimensionsOut[e]}));var h=l.default.chain(e.cells).groupBy((function(t){return l.default.at(t.coord,i)})).values().map((function(e){var i=new Map;return e.forEach((function(e){var r=l.default.at(e.coord,t);i.set(r.toString(),e.value)})),l.default.chain(r.entries).groupBy((function(t){return t.coordOut.toString()})).values().map((function(r){var a=r[0].coordOut,u=n(e[0].coord);l.default.range(t.length).forEach((function(e){return u[t[e]]=a[e]}));var c=r.map((function(t){var e=t.coordIn.toString(),r=i.get(e)||o.Cx(0);return t.value.mul(r)})).reduce((function(t,e){return t.add(e)}));return new s.VectorEntry(u,c)})).filter((function(t){return!t.value.isZero()})).value()})).flatten().value();return new a.default(h,e.dimensions)},t.prototype.toString=function(t,e,r){var n=this;return void 0===t&&(t="cartesian"),void 0===e&&(e=2),void 0===r&&(r=" + "),"Operator with "+this.entries.length+" entires of max size [["+this.sizeOut+"], ["+this.sizeIn+"]] with dimensions [["+this.namesOut+"], ["+this.namesIn+"]]"+"\n"+this.entries.map((function(r){var i=r.coordOut.map((function(t,e){return n.coordNamesOut[e][t]})),o=r.coordIn.map((function(t,e){return n.coordNamesIn[e][t]}));return r.value.toString(t,e)+" |"+i+"⟩⟨"+o+"|"})).join(r)+"\n"},t.identity=function(e){var r=e.map((function(t){return t.size})),n=r.reduce((function(t,e){return t*e}));return new t(l.default.range(n).map((function(t){return s.OperatorEntry.fromIndexIndexValue(t,t,r,r,o.Cx(1,0))})),e,e)},t.shift=function(e,r){var n=Math.max(0,-r),i=Math.min(e.size,e.size-r);return new t(l.default.range(n,i).map((function(t){return s.OperatorEntry.fromIndexIndexValue(t+r,t,[e.size],[e.size],o.Cx(1,0))})),[e],[e])},t.zeros=function(e,r){return void 0===r&&(r=e),new t([],e,r)},t.fromArray=function(e,r,n,i){void 0===n&&(n=r),void 0===i&&(i=!0);var o=r.map((function(t){return t.size})),a=o.reduce((function(t,e){return t*e})),u=n.map((function(t){return t.size})),c=u.reduce((function(t,e){return t*e})),h=e.map((function(t){return t.length}));if(l.default.min(h)!==l.default.max(h))throw new Error("Is not a rectangular array. Row sizes "+l.default.min(h)+" to "+l.default.max(h)+".");if(e.length!==a||e[0].length!==c)throw new Error("Dimension inconsistency: array is ["+e.length+", "+e[0].length+"] and dimensions total sizes are ["+a+", "+c+"]");var f=[];return e.forEach((function(t,e){return t.forEach((function(t,r){return f.push([e,r,t])}))})),new t(f.filter((function(t){t[0],t[1];var e=t[2];return!i||!e.isZero()})).map((function(t){var e=t[0],r=t[1],n=t[2];return s.OperatorEntry.fromIndexIndexValue(e,r,o,u,n)})),r,n)},t.indicator=function(e,r){var n=u.default.stringToCoordIndices(r,e);return new t([new s.OperatorEntry(n,n,o.Cx(1))],e,e)},t.fromSparseCoordNames=function(e,r,n){return void 0===n&&(n=r),new t(e.map((function(t){var e=t[0],i=t[1],o=t[2];return new s.OperatorEntry(u.default.stringToCoordIndices(e,r),u.default.stringToCoordIndices(i,n),o)})),r,n)},t.outer=function(t){return t.reduce((function(t,e){return t.outer(e)}))},t.add=function(t){return t.reduce((function(t,e){return t.add(e)}))},t}();e.default=c},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(3)),o=r(12),s=r(8);class a extends i.default{constructor(t,e,r=1,n=0,i=s.Cx(1),o=s.Cx(0),a=[{coord:t,direction:e,intensity:r,phase:n,a:i,b:o}]){super(t.y,t.x),this.coord=t,this.direction=e,this.intensity=r,this.phase=n,this.a=i,this.b=o,this.path=a}get origin(){return this.path[0].coord}get alive(){return this.intensity>0}get clone(){return new a(this.coord,this.direction,this.intensity,this.phase)}get isVertical(){return 0===this.direction||180===this.direction}get opacity(){const t=Math.pow(this.a.abs2()+this.b.abs2(),.5);return t>1?1:t}get pathParticle(){const t=[];return this.path.forEach(e=>{t.push(a.importParticle(e))}),t}on(t){return this.coord.equal(t.coord)}stepsToExit(t,e){switch(this.direction%360){case 0:return this.y;case 90:return t-this.x-1;case 180:return e-this.y-1;case 270:return this.x;default:throw new Error("Something went wrong with directions...")}}next(t=1){for(let e=0;e<t;e++){switch(this.direction%360){case 0:this.coord=this.coord.right;break;case 90:this.coord=this.coord.top;break;case 180:this.coord=this.coord.left;break;case 270:this.coord=this.coord.bottom;break;default:throw Error("Something went wrong with particles and direction.")}this.path.push({coord:this.coord,direction:this.direction,intensity:this.intensity,phase:this.phase,a:this.a,b:this.b})}return this}exportParticle(){return{coord:this.coord,direction:this.direction,intensity:this.intensity,phase:this.phase,a:this.a,b:this.b}}toString(){return`Particle @ ${this.coord.toString()} moving ${this.direction}° with ${o.toPercent(this.intensity)} intensity and polarization | A:${this.a.re} + ${this.a.im}i & B:${this.b.re} + ${this.b.im}i\n`}static importParticle(t){return new a(t.coord,t.direction,t.intensity,t.phase,t.a,t.b)}static manyToString(t){let e="";return t.forEach(t=>{e+=t.toString()}),e}}e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(18);e.angleToSymbol=function(t){switch(t%=360){case 0:return"↑";case 45:return"↗";case 90:return"→";case 135:return"↘";case 180:return"↓";case 225:return"↙";case 270:return"←";case 315:return"↖";default:throw new Error("Something is wrong with provided angle.")}},e.symbolToAngle=function(t){switch(t){case"↑":return 0;case"↗":return 45;case"→":return 90;case"↘":return 135;case"↓":return 180;case"↙":return 225;case"←":return 270;case"↖":return 315;default:throw new Error("Something is wrong with provided direction string.")}},e.padLeft=function(t,e,r){const n=r||" ";for(;t.length<e;)t=n+t;return t},e.padRight=function(t,e,r){const n=r||" ";for(;t.length<e;)t+=n;return t},e.toPercent=function(t){return`${(100*t).toFixed(2)}%`},e.hsl2hexrgb=function(t=.45,e=0,r=.5){t>=1&&(t=1),e>=1&&(e=1),r>=1&&(e=1);const i=n.Color.hsl2rgb([t,e,r]);return n.Color.toHex(i)},e.scaleOpacity=function(t){t>=1&&(t=1);const e=n.Color.hsl2rgb([.333,.333,t]);return n.Color.toHex(e)},e.displayText=function(t,e){document.getElementById(t).textContent=e}},function(t,e,r){"use strict";var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)n[i]=o[s];return n},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(5),s=r(14),a=i(r(4)),u=i(r(7)),l=function(){function t(t,e){this.cells=t,this.dimensions=e}return Object.defineProperty(t.prototype,"size",{get:function(){return this.dimensions.map((function(t){return t.size}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"totalSize",{get:function(){return this.size.reduce((function(t,e){return t*e}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"names",{get:function(){return this.dimensions.map((function(t){return t.name}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"coordNames",{get:function(){return this.dimensions.map((function(t){return t.coordNames}))},enumerable:!0,configurable:!0}),t.prototype.conj=function(){return new t(this.cells.map((function(t){return new s.VectorEntry(n(t.coord),t.value.conj())})),this.dimensions)},t.prototype.add=function(e){return a.default.checkDimensions(this.dimensions,e.dimensions),new t(u.default.chain(this.cells.concat(e.cells)).groupBy((function(t){return t.coord.toString()})).values().map((function(t){var e=n(t[0].coord),r=t.map((function(t){return t.value})).reduce((function(t,e){return t.add(e)}));return new s.VectorEntry(e,r)})).value(),this.dimensions)},t.prototype.mulConstant=function(e){return new t(this.cells.map((function(t){return new s.VectorEntry(t.coord,t.value.mul(e))})),this.dimensions)},t.prototype.sub=function(t){return this.add(t.mulConstant(o.Cx(-1)))},t.prototype.dot=function(t){return a.default.checkDimensions(this.dimensions,t.dimensions),u.default.chain(this.cells.concat(t.cells)).groupBy((function(t){return t.coord.toString()})).values().map((function(t){return 2===t.length?t[0].value.mul(t[1].value):o.Cx(0,0)})).reduce((function(t,e){return t.add(e)})).value()},t.prototype.outer=function(e){var r=this.dimensions.concat(e.dimensions),n=[];return this.cells.forEach((function(t){return e.cells.forEach((function(e){return n.push(t.outer(e))}))})),new t(n,r)},t.prototype.toString=function(t,e,r){var n=this;return void 0===t&&(t="cartesian"),void 0===e&&(e=2),void 0===r&&(r=" + "),"Vector with "+this.cells.length+" entries of max size ["+this.size+"] with dimensions ["+this.names+"]"+"\n"+this.cells.map((function(r){var i=r.coord.map((function(t,e){return n.coordNames[e][t]}));return r.value.toString(t,e)+" |"+i+"⟩"})).join(r)+"\n"},t.fromArray=function(e,r,n){void 0===n&&(n=!0);var i=r.map((function(t){return t.size})),o=i.reduce((function(t,e){return t*e}));if(e.length!==o)throw new Error("Dimension inconsistency: cell count "+e.length+" != total: "+o);return new t(e.map((function(t,e){return[e,t]})).filter((function(t){t[0];var e=t[1];return!n||!e.isZero()})).map((function(t){var e=t[0],r=t[1];return s.VectorEntry.fromIndexValue(e,i,r)})),r)},t.indicator=function(e,r){var n=a.default.stringToCoordIndices(r,e);return new t([new s.VectorEntry(n,o.Cx(1))],e)},t.fromSparseCoordNames=function(e,r){return new t(e.map((function(t){var e=t[0],n=t[1];return new s.VectorEntry(a.default.stringToCoordIndices(e,r),n)})),r)},t.outer=function(t){return t.reduce((function(t,e){return t.outer(e)}))},t.add=function(t){return t.reduce((function(t,e){return t.add(e)}))},t}();e.default=l},function(t,e,r){"use strict";function n(t,e){var r=t;return e.map((function(t){var e=r%t;return r=(r-e)/t,e}))}Object.defineProperty(e,"__esModule",{value:!0}),e.CoordsFromIndex=n;var i=function(){function t(t,e){this.coord=t,this.value=e}return t.prototype.outer=function(e){return new t(this.coord.concat(e.coord),this.value.mul(e.value))},t.prototype.toString=function(){return"Sparse vector entry ["+this.coord.toString()+"] has value "+this.value.toString()},t.fromIndexValue=function(e,r,i){return new t(n(e,r),i)},t}();e.VectorEntry=i;var o=function(){function t(t,e,r){this.coordOut=t,this.coordIn=e,this.value=r}return t.prototype.outer=function(e){return new t(this.coordOut.concat(e.coordOut),this.coordIn.concat(e.coordIn),this.value.mul(e.value))},t.prototype.toString=function(){return"Sparse operator entry ["+this.coordOut.toString()+", "+this.coordIn.toString()+"] has value "+this.value.toString()},t.fromIndexIndexValue=function(e,r,i,o,s){return new t(n(e,i),n(r,o),s)},t}();e.OperatorEntry=o},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=r(16),s=n(r(17)),a=i(r(8));class u{constructor(t,e,r="",n="",i=!1,o=0,a=0,u=[" "," "," "," "," "," "," "," "],l=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],c=new s.default(" ",[0,0])){this.id=t,this.name=e,this.group=r,this.description=n,this.active=i,this.absorption=o,this.phase=a,this.ascii=u,this.tiles=l,this.glyph=c}transition(t){switch(this.name){case"mirror":return a.mirror(t);case"beamsplitter":return a.beamSplitter(t);case"filter":return a.attenuator(Math.SQRT1_2);case"phaseinc":return a.vacuumJar();case"phasedec":return a.glassSlab();case"detector":return a.attenuator(0);case"sugar":return a.sugarSolution();case"polarsplitter":return 0===t?a.polarizingBeamsplitter(135):a.polarizingBeamsplitter(45);case"mine":case"rock":case"wall":default:return a.attenuator(0)}}get rotationAngle(){return 360/this.ascii.length}toString(){return`${this.name} (Phase: ${this.phase}, Absorption: ${100*this.absorption}%)`}exportElement(){return{id:this.id,name:this.name,group:this.group,description:this.description,active:this.active,absorption:this.absorption,phase:this.phase,ascii:this.ascii,tiles:this.tiles}}static importElement(t){return new u(t.id,t.name,t.group,t.description,t.active,t.absorption,t.phase,t.ascii,t.tiles)}static fromName(t){const e=o.jsonElements.find(e=>e.name===t);return u.importElement(e)}}e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.jsonGroups={Basic:["void","wall","gate"],Emitter:["laser"],Direction:["mirror","beamsplitter","coatedsplitter","polarsplitter"],Absorption:["detector","mine","rock","omnidetector","filter"],Polarization:["absorb-polarizer","waveplate","sugar","faraday"],Phase:["phaseinc","phasedec"]},e.jsonElements=[{name:"laser",group:"Emitter",description:"An on-demand single photon source.",active:!0,absorption:0,phase:0,id:0,ascii:[">","^","<","v"],tiles:[[0,0],[0,1],[0,2],[0,3]]},{name:"rock",group:"Absorption",description:"Dark and immersive as your sweetheart's depth of eyes. Absorbs light. And is sensitive.",active:!1,absorption:1,phase:0,id:1,ascii:["♜"],tiles:[[1,0]]},{name:"absorb-polarizer",group:"Polarization",description:"A polarization filter WE...Anisotropic polymer strands capture electric oscillations parallel to them. Used in photography.",active:!1,absorption:0,phase:0,id:2,ascii:["🡢","🡥","🡡","🡤","🡠","🡧","🡣","🡦"],tiles:[[2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7]]},{name:"waveplate",group:"Polarization",description:"It delays one polarization (with darker lines) by λ/4. When applied correctly, it can change linear polarization into circular, and vice versa.",active:!1,absorption:0,phase:0,id:3,ascii:["🡪","🡭","🡩","🡬","🡨","🡯","🡫","🡮"],tiles:[[3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7]]},{name:"detector",group:"Absorption",description:"Detects and amplifies electric signal from each single photon, from a single direction. Your goal is to get photon there!",active:!1,absorption:1,phase:0,id:4,ascii:["⭲","⭱","⭰","⭳"],tiles:[[4,0],[4,1],[4,2],[4,3]]},{name:"omnidetector",group:"Absorption",description:"Detects and amplifies electric signal from each single photon, from all directions. Typically, it is the goal to get the photon here.",active:!1,absorption:1,phase:0,id:7,ascii:["O"],tiles:[[7,0],[7,1],[7,2],[7,3]]},{name:"sugar",group:"Polarization",description:"Table sugar is a chiral molecule – it does not look the same as its mirror reflection. We put it in an amount, so it rotates polarization by 45°.",active:!1,absorption:0,phase:0,id:8,ascii:["S"],tiles:[[8,0]]},{name:"coatedsplitter",group:"Direction",description:"A thin slab of glass with a reflective layer - reflecting half the beam and transmitting the other half of it.",active:!1,absorption:0,phase:0,id:9,ascii:["⇒","⇗","⇑","⇖","⇐","⇙","⇓","⇘"],tiles:[[9,0],[9,1],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7]]},{name:"mine",group:"Absorption",description:"Once it absorbs a single photon, it sets off. Old french submarine captains can sometimes disarm them.",active:!1,absorption:1,phase:0,id:11,ascii:["!"],tiles:[[11,0]]},{name:"polarsplitter",group:"Direction",description:"Reflects vertical polarization (↕), transmitts horizonal polarization (↔).",active:!1,absorption:0,phase:0,id:12,ascii:["⬲","⟴"],tiles:[[12,0],[12,1]]},{name:"mirror",group:"Direction",description:"Metallic or dielectric mirror.",active:!1,absorption:0,phase:0,id:14,ascii:["-","/","|","\\","-","/","|","\\"],tiles:[[14,0],[14,1],[14,2],[14,3],[14,4],[14,5],[14,6],[14,7]]},{name:"beamsplitter",group:"Direction",description:"A thin slab of glass reflecting half the beam, and transmitting other half of it.",active:!1,absorption:0,phase:0,id:15,ascii:["→","↗","↑","↖","←","↙","↓","↘"],tiles:[[15,0],[15,1],[15,2],[15,3],[15,4],[15,5],[15,6],[15,7]]},{name:"phasedec",group:"Phase",description:"Higher refractive index makes light slower. We set its thickness so it retards the phase by λ/4. Useful for changing interference.",active:!1,absorption:0,phase:-.25,id:16,ascii:["↜"],tiles:[[16,0]]},{name:"phaseinc",group:"Phase",description:"Even air retards light a bit. We set the thickness of vacuum so it advances the phase by λ/4. Useful for changing interference.",active:!1,absorption:0,phase:.25,id:17,ascii:["↝"],tiles:[[17,0]]},{name:"filter",group:"Absorption",description:"Filter with 50% absorption probability.",active:!1,absorption:.5,phase:0,id:18,ascii:["░"],tiles:[[18,0]]},{name:"void",group:"Basic",description:"The void...",active:!1,absorption:0,phase:0,id:19,ascii:["."],tiles:[[19,0]]},{name:"wall",group:"Basic",description:"A standard wall.",active:!1,absorption:1,phase:0,id:20,ascii:["▓"],tiles:[[20,0],[20,1]]},{name:"gate",group:"Basic",description:"A controlled gate.",active:!1,absorption:1,phase:0,id:21,ascii:["W","M"],tiles:[[21,0],[21,1]]},{name:"faraday",group:"Polarization",description:"Rotates polarization with magnetic field by 45°. Has different symmetries than Sugar Solution. A building block for optical diodes.",active:!1,absorption:0,phase:-.25,id:30,ascii:["🠶","🠵","🠴","🠷"],tiles:[[30,0],[30,1],[30,2],[30,3]]}]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(16);class i{constructor(t,e,r="black",n="white"){this.character=t,this.backgroundColor=r,this.foregroundColor=n,this.tile=e}exportGlyph(){return{character:this.character,backgroundColor:this.backgroundColor,foregroundColor:this.foregroundColor,tile:this.tile}}static importGlyph(t){return new i(t.character,t.tile,t.backgroundColor,t.foregroundColor)}static processTileMap(t=64){const e={};return n.jsonElements.forEach(r=>{r.tiles.forEach((n,i)=>{const o=r.id*t,s=i*t;e[r.ascii[i]]=[s,o]})}),e["@"]=[0,29*t],e.H=[0*t,22*t],e.V=[1*t,22*t],e.P=[0*t,10*t],e.d=[1*t,10*t],e[8]=[0*t,23*t],e[4]=[1*t,23*t],e}}e.default=i},function(t,e,r){"use strict";r.r(e);var n={};r.r(n),r.d(n,"TYPE_TEXT",(function(){return b})),r.d(n,"TYPE_NEWLINE",(function(){return w})),r.d(n,"TYPE_FG",(function(){return x})),r.d(n,"TYPE_BG",(function(){return S})),r.d(n,"measure",(function(){return E})),r.d(n,"tokenize",(function(){return C}));var i=r(0),o=r(6);class s extends o.a{constructor(){super(),this._ctx=document.createElement("canvas").getContext("2d")}schedule(t){requestAnimationFrame(t)}getContainer(){return this._ctx.canvas}setOptions(t){super.setOptions(t);const e=`${t.fontStyle?`${t.fontStyle} `:""} ${t.fontSize}px ${t.fontFamily}`;this._ctx.font=e,this._updateSize(),this._ctx.font=e,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}clear(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}eventToPosition(t,e){let r=this._ctx.canvas,n=r.getBoundingClientRect();return t-=n.left,e-=n.top,t*=r.width/n.width,e*=r.height/n.height,t<0||e<0||t>=r.width||e>=r.height?[-1,-1]:this._normalizedEventToPosition(t,e)}}var a=r(1);class u extends s{constructor(){super(),this._spacingX=0,this._spacingY=0,this._hexSize=0}draw(t,e){let[r,n,i,o,s]=t,a=[(r+1)*this._spacingX,n*this._spacingY+this._hexSize];if(this._options.transpose&&a.reverse(),e&&(this._ctx.fillStyle=s,this._fill(a[0],a[1])),!i)return;this._ctx.fillStyle=o;let u=[].concat(i);for(let t=0;t<u.length;t++)this._ctx.fillText(u[t],a[0],Math.ceil(a[1]))}computeSize(t,e){return this._options.transpose&&(t+=e,t-=e=t-e),[Math.floor(t/this._spacingX)-1,Math.floor((e-2*this._hexSize)/this._spacingY+1)]}computeFontSize(t,e){this._options.transpose&&(t+=e,t-=e=t-e);let r=2*t/((this._options.width+1)*Math.sqrt(3))-1,n=e/(2+1.5*(this._options.height-1)),i=Math.min(r,n),o=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let s=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=o;let a=s/100,u=2*(i=Math.floor(i)+1)/(this._options.spacing*(1+a/Math.sqrt(3)));return Math.ceil(u)-1}_normalizedEventToPosition(t,e){let r;this._options.transpose?(t+=e,t-=e=t-e,r=this._ctx.canvas.width):r=this._ctx.canvas.height;let n=r/this._options.height;return e=Math.floor(e/n),Object(a.mod)(e,2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]}_fill(t,e){let r=this._hexSize,n=this._options.border;const i=this._ctx;i.beginPath(),this._options.transpose?(i.moveTo(t-r+n,e),i.lineTo(t-r/2+n,e+this._spacingX-n),i.lineTo(t+r/2-n,e+this._spacingX-n),i.lineTo(t+r-n,e),i.lineTo(t+r/2-n,e-this._spacingX+n),i.lineTo(t-r/2+n,e-this._spacingX+n),i.lineTo(t-r+n,e)):(i.moveTo(t,e-r+n),i.lineTo(t+this._spacingX-n,e-r/2+n),i.lineTo(t+this._spacingX-n,e+r/2-n),i.lineTo(t,e+r-n),i.lineTo(t-this._spacingX+n,e+r/2-n),i.lineTo(t-this._spacingX+n,e-r/2+n),i.lineTo(t,e-r+n)),i.fill()}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);let r,n;this._hexSize=Math.floor(t.spacing*(t.fontSize+e/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,t.transpose?(r="height",n="width"):(r="width",n="height"),this._ctx.canvas[r]=Math.ceil((t.width+1)*this._spacingX),this._ctx.canvas[n]=Math.ceil((t.height-1)*this._spacingY+2*this._hexSize)}}class l extends s{constructor(){super(),this._spacingX=0,this._spacingY=0,this._canvasCache={}}setOptions(t){super.setOptions(t),this._canvasCache={}}draw(t,e){l.cache?this._drawWithCache(t):this._drawNoCache(t,e)}_drawWithCache(t){let e,[r,n,i,o,s]=t,a=""+i+o+s;if(a in this._canvasCache)e=this._canvasCache[a];else{let t=this._options.border,r=(e=document.createElement("canvas")).getContext("2d");if(e.width=this._spacingX,e.height=this._spacingY,r.fillStyle=s,r.fillRect(t,t,e.width-t,e.height-t),i){r.fillStyle=o,r.font=this._ctx.font,r.textAlign="center",r.textBaseline="middle";let t=[].concat(i);for(let e=0;e<t.length;e++)r.fillText(t[e],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[a]=e}this._ctx.drawImage(e,r*this._spacingX,n*this._spacingY)}_drawNoCache(t,e){let[r,n,i,o,s]=t;if(e){let t=this._options.border;this._ctx.fillStyle=s,this._ctx.fillRect(r*this._spacingX+t,n*this._spacingY+t,this._spacingX-t,this._spacingY-t)}if(!i)return;this._ctx.fillStyle=o;let a=[].concat(i);for(let t=0;t<a.length;t++)this._ctx.fillText(a[t],(r+.5)*this._spacingX,Math.ceil((n+.5)*this._spacingY))}computeSize(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}computeFontSize(t,e){let r=Math.floor(t/this._options.width),n=Math.floor(e/this._options.height),i=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=i;let s=o/100*n/r;return s>1&&(n=Math.floor(n/s)),Math.floor(n/this._options.spacing)}_normalizedEventToPosition(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),t.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=t.width*this._spacingX,this._ctx.canvas.height=t.height*this._spacingY}}l.cache=!1;class c extends s{constructor(){super(),this._colorCanvas=document.createElement("canvas")}draw(t,e){let[r,n,i,o,s]=t,a=this._options.tileWidth,u=this._options.tileHeight;if(e&&(this._options.tileColorize?this._ctx.clearRect(r*a,n*u,a,u):(this._ctx.fillStyle=s,this._ctx.fillRect(r*a,n*u,a,u))),!i)return;let l=[].concat(i),c=[].concat(o),h=[].concat(s);for(let t=0;t<l.length;t++){let e=this._options.tileMap[l[t]];if(!e)throw new Error(`Char "${l[t]}" not found in tileMap`);if(this._options.tileColorize){let i=this._colorCanvas,o=i.getContext("2d");o.globalCompositeOperation="source-over",o.clearRect(0,0,a,u);let s=c[t],l=h[t];o.drawImage(this._options.tileSet,e[0],e[1],a,u,0,0,a,u),"transparent"!=s&&(o.fillStyle=s,o.globalCompositeOperation="source-atop",o.fillRect(0,0,a,u)),"transparent"!=l&&(o.fillStyle=l,o.globalCompositeOperation="destination-over",o.fillRect(0,0,a,u)),this._ctx.drawImage(i,r*a,n*u,a,u)}else this._ctx.drawImage(this._options.tileSet,e[0],e[1],a,u,r*a,n*u,a,u)}}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._options;this._ctx.canvas.width=t.width*t.tileWidth,this._ctx.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight}}var h=r(2);class f extends o.a{static isSupported(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}constructor(){super(),this._uniforms={};try{this._gl=this._initWebGL()}catch(t){alert(t.message)}}schedule(t){requestAnimationFrame(t)}getContainer(){return this._gl.canvas}setOptions(t){super.setOptions(t),this._updateSize();let e=this._options.tileSet;e&&"complete"in e&&!e.complete?e.addEventListener("load",()=>this._updateTexture(e)):this._updateTexture(e)}draw(t,e){const r=this._gl,n=this._options;let[i,o,s,a,u]=t,l=r.canvas.height-(o+1)*n.tileHeight;if(r.scissor(i*n.tileWidth,l,n.tileWidth,n.tileHeight),e&&(n.tileColorize?r.clearColor(0,0,0,0):r.clearColor(...m(u)),r.clear(r.COLOR_BUFFER_BIT)),!s)return;let c=[].concat(s),h=[].concat(u),f=[].concat(a);r.uniform2fv(this._uniforms.targetPosRel,[i,o]);for(let t=0;t<c.length;t++){let e=this._options.tileMap[c[t]];if(!e)throw new Error(`Char "${c[t]}" not found in tileMap`);r.uniform1f(this._uniforms.colorize,n.tileColorize?1:0),r.uniform2fv(this._uniforms.tilesetPosAbs,e),n.tileColorize&&(r.uniform4fv(this._uniforms.tint,m(f[t])),r.uniform4fv(this._uniforms.bg,m(h[t]))),r.drawArrays(r.TRIANGLE_STRIP,0,4)}}clear(){const t=this._gl;t.clearColor(...m(this._options.bg)),t.scissor(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT)}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}eventToPosition(t,e){let r=this._gl.canvas,n=r.getBoundingClientRect();return t-=n.left,e-=n.top,t*=r.width/n.width,e*=r.height/n.height,t<0||e<0||t>=r.width||e>=r.height?[-1,-1]:this._normalizedEventToPosition(t,e)}_initWebGL(){let t=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=t;let e=function(t,e,r){const n=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(n)||"");const i=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(i,r),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(i)||"");const o=t.createProgram();if(t.attachShader(o,n),t.attachShader(o,i),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(o)||"");return o}(t,p,_);return t.useProgram(e),function(t){const e=new Float32Array([0,0,1,0,0,1,1,1]),r=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0)}(t),d.forEach(r=>this._uniforms[r]=t.getUniformLocation(e,r)),this._program=e,t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),t.enable(t.SCISSOR_TEST),t}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._gl,e=this._options,r=[e.width*e.tileWidth,e.height*e.tileHeight];t.canvas.width=r[0],t.canvas.height=r[1],t.viewport(0,0,r[0],r[1]),t.uniform2fv(this._uniforms.tileSize,[e.tileWidth,e.tileHeight]),t.uniform2fv(this._uniforms.targetSize,r)}_updateTexture(t){!function(t,e){let r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,0),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e)}(this._gl,t)}}const d=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],p="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),_="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();let g={};function m(t){if(!(t in g)){let e;if("transparent"==t)e=[0,0,0,0];else if(t.indexOf("rgba")>-1){e=(t.match(/[\d.]+/g)||[]).map(Number);for(let t=0;t<3;t++)e[t]=e[t]/255}else(e=h.fromString(t).map(t=>t/255)).push(1);g[t]=e}return g[t]}var v=r(19);const y=/%([bc]){([^}]*)}/g,b=0,w=1,x=2,S=3;function E(t,e){let r={width:0,height:1},n=C(t,e),i=0;for(let t=0;t<n.length;t++){let e=n[t];switch(e.type){case b:i+=e.value.length;break;case w:r.height++,r.width=Math.max(r.width,i),i=0}}return r.width=Math.max(r.width,i),r}function C(t,e){let r=[],n=0;t.replace(y,(function(e,i,o,s){let a=t.substring(n,s);return a.length&&r.push({type:b,value:a}),r.push({type:"c"==i?x:S,value:o.trim()}),n=s+e.length,""}));let i=t.substring(n);return i.length&&r.push({type:b,value:i}),function(t,e){e||(e=1/0);let r=0,n=0,i=-1;for(;r<t.length;){let o=t[r];if(o.type==w&&(n=0,i=-1),o.type!=b){r++;continue}for(;0==n&&" "==o.value.charAt(0);)o.value=o.value.substring(1);let s=o.value.indexOf("\n");if(-1!=s){o.value=O(t,r,s,!0);let e=o.value.split("");for(;e.length&&" "==e[e.length-1];)e.pop();o.value=e.join("")}if(o.value.length){if(n+o.value.length>e){let s=-1;for(;;){let t=o.value.indexOf(" ",s+1);if(-1==t)break;if(n+t>e)break;s=t}if(-1!=s)o.value=O(t,r,s,!0);else if(-1!=i){let e=t[i],n=e.value.lastIndexOf(" ");e.value=O(t,i,n,!0),r=i}else o.value=O(t,r,e-n,!1)}else n+=o.value.length,-1!=o.value.indexOf(" ")&&(i=r);r++}else t.splice(r,1)}t.push({type:w});let o=null;for(let e=0;e<t.length;e++){let r=t[e];switch(r.type){case b:o=r;break;case w:if(o){let t=o.value.split("");for(;t.length&&" "==t[t.length-1];)t.pop();o.value=t.join("")}o=null}}return t.pop(),t}(r,e)}function O(t,e,r,n){let i={type:w},o={type:b,value:t[e].value.substring(r+(n?1:0))};return t.splice(e+1,0,i,o),t[e].value.substring(0,r)}let k=80,M=25;const T={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},A={VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95},P={hex:u,rect:l,tile:c,"tile-gl":f,term:v.a},z={width:k,height:M,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1};class I{constructor(t={}){this._data={},this._dirty=!1,this._options={},t=Object.assign({},z,t),this.setOptions(t),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}DEBUG(t,e,r){let n=[this._options.bg,this._options.fg];this.draw(t,e,null,null,n[r%n.length])}clear(){this._data={},this._dirty=!0}setOptions(t){if(Object.assign(this._options,t),t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){if(t.layout){let e=P[t.layout];this._backend=new e}this._backend.setOptions(this._options),this._dirty=!0}return this}getOptions(){return this._options}getContainer(){return this._backend.getContainer()}computeSize(t,e){return this._backend.computeSize(t,e)}computeFontSize(t,e){return this._backend.computeFontSize(t,e)}computeTileSize(t,e){return[Math.floor(t/this._options.width),Math.floor(e/this._options.height)]}eventToPosition(t){let e,r;return"touches"in t?(e=t.touches[0].clientX,r=t.touches[0].clientY):(e=t.clientX,r=t.clientY),this._backend.eventToPosition(e,r)}draw(t,e,r,n,i){n||(n=this._options.fg),i||(i=this._options.bg);let o=`${t},${e}`;this._data[o]=[t,e,r,n,i],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[o]=!0)}drawText(t,e,r,n){let i=null,o=null,s=t,a=e,u=1;n||(n=this._options.width-t);let l=C(r,n);for(;l.length;){let e=l.shift();switch(e.type){case b:let r=!1,n=!1,l=!1,c=!1;for(let t=0;t<e.value.length;t++){let u=e.value.charCodeAt(t),h=e.value.charAt(t);l=u>65280&&u<65377||u>65500&&u<65512||u>65518,r=32==h.charCodeAt(0)||12288==h.charCodeAt(0),!c||l||r||s++,l&&!n&&s++,this.draw(s++,a,h,i,o),n=r,c=l}break;case x:i=e.value||null;break;case S:o=e.value||null;break;case w:s=t,a++,u++}}return u}_tick(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty){this._backend.clear();for(let t in this._data)this._draw(t,!1)}else for(let t in this._dirty)this._draw(t,!0);this._dirty=!1}}_draw(t,e){let r=this._data[t];r[4]!=this._options.bg&&(e=!0),this._backend.draw(r,e)}}I.Rect=l,I.Hex=u,I.Tile=c,I.TileGL=f,I.Term=v.a;class V{constructor(t){this._options={words:!1,order:3,prior:.001},Object.assign(this._options,t),this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(let t=0;t<this._options.order;t++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}}clear(){this._data={},this._priorValues={}}generate(){let t=[this._sample(this._prefix)];for(;t[t.length-1]!=this._boundary;)t.push(this._sample(t));return this._join(t.slice(0,-1))}observe(t){let e=this._split(t);for(let t=0;t<e.length;t++)this._priorValues[e[t]]=this._options.prior;e=this._prefix.concat(e).concat(this._suffix);for(let t=this._options.order;t<e.length;t++){let r=e.slice(t-this._options.order,t),n=e[t];for(let t=0;t<r.length;t++){let e=r.slice(t);this._observeEvent(e,n)}}}getStats(){let t=[],e=Object.keys(this._priorValues).length;e--,t.push("distinct samples: "+e);let r=Object.keys(this._data).length,n=0;for(let t in this._data)n+=Object.keys(this._data[t]).length;return t.push("dictionary size (contexts): "+r),t.push("dictionary size (events): "+n),t.join(", ")}_split(t){return t.split(this._options.words?/\s+/:"")}_join(t){return t.join(this._options.words?" ":"")}_observeEvent(t,e){let r=this._join(t);r in this._data||(this._data[r]={});let n=this._data[r];e in n||(n[e]=0),n[e]++}_sample(t){t=this._backoff(t);let e=this._join(t),r=this._data[e],n={};if(this._options.prior){for(let t in this._priorValues)n[t]=this._priorValues[t];for(let t in r)n[t]+=r[t]}else n=r;return i.a.getWeightedValue(n)}_backoff(t){for(t.length>this._options.order?t=t.slice(-this._options.order):t.length<this._options.order&&(t=this._prefix.slice(0,this._options.order-t.length).concat(t));!(this._join(t)in this._data)&&t.length>0;)t=t.slice(1);return t}}class K{constructor(){this._time=0,this._events=[],this._eventTimes=[]}getTime(){return this._time}clear(){return this._events=[],this._eventTimes=[],this}add(t,e){let r=this._events.length;for(let t=0;t<this._eventTimes.length;t++)if(this._eventTimes[t]>e){r=t;break}this._events.splice(r,0,t),this._eventTimes.splice(r,0,e)}get(){if(!this._events.length)return null;let t=this._eventTimes.splice(0,1)[0];if(t>0){this._time+=t;for(let e=0;e<this._eventTimes.length;e++)this._eventTimes[e]-=t}return this._events.splice(0,1)[0]}getEventTime(t){let e=this._events.indexOf(t);if(-1!=e)return this._eventTimes[e]}remove(t){let e=this._events.indexOf(t);return-1!=e&&(this._remove(e),!0)}_remove(t){this._events.splice(t,1),this._eventTimes.splice(t,1)}}class R{constructor(){this._queue=new K,this._repeat=[],this._current=null}getTime(){return this._queue.getTime()}add(t,e){return e&&this._repeat.push(t),this}getTimeOf(t){return this._queue.getEventTime(t)}clear(){return this._queue.clear(),this._repeat=[],this._current=null,this}remove(t){let e=this._queue.remove(t),r=this._repeat.indexOf(t);return-1!=r&&this._repeat.splice(r,1),this._current==t&&(this._current=null),e}next(){return this._current=this._queue.get(),this._current}}var j={Simple:class extends R{add(t,e){return this._queue.add(t,0),super.add(t,e)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,0),super.next()}},Speed:class extends R{add(t,e,r){return this._queue.add(t,void 0!==r?r:1/t.getSpeed()),super.add(t,e)}next(){return this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,1/this._current.getSpeed()),super.next()}},Action:class extends R{constructor(){super(),this._defaultDuration=1,this._duration=this._defaultDuration}add(t,e,r){return this._queue.add(t,r||this._defaultDuration),super.add(t,e)}clear(){return this._duration=this._defaultDuration,super.clear()}remove(t){return t==this._current&&(this._duration=this._defaultDuration),super.remove(t)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),super.next()}setDuration(t){return this._current&&(this._duration=t),this}}};class D{constructor(t,e={}){this._lightPasses=t,this._options=Object.assign({topology:8},e)}_getCircle(t,e,r){let n,i,o,s=[];switch(this._options.topology){case 4:i=1,o=[0,1],n=[T[8][7],T[8][1],T[8][3],T[8][5]];break;case 6:n=T[6],i=1,o=[-1,1];break;case 8:n=T[4],i=2,o=[-1,1];break;default:throw new Error("Incorrect topology for FOV computation")}let a=t+o[0]*r,u=e+o[1]*r;for(let t=0;t<n.length;t++)for(let e=0;e<r*i;e++)s.push([a,u]),a+=n[t][0],u+=n[t][1];return s}}const L=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]];var U={DiscreteShadowcasting:class extends D{compute(t,e,r,n){if(n(t,e,0,1),!this._lightPasses(t,e))return;let i,o,s,a,u,l=[];for(let c=1;c<=r;c++){let r=this._getCircle(t,e,c),h=360/r.length;for(let t=0;t<r.length;t++)if(s=r[t][0],a=r[t][1],o=(i=h*(t-.5))+h,u=!this._lightPasses(s,a),this._visibleCoords(Math.floor(i),Math.ceil(o),u,l)&&n(s,a,c,1),2==l.length&&0==l[0]&&360==l[1])return}}_visibleCoords(t,e,r,n){if(t<0){let i=this._visibleCoords(0,e,r,n),o=this._visibleCoords(360+t,360,r,n);return i||o}let i=0;for(;i<n.length&&n[i]<t;)i++;if(i==n.length)return r&&n.push(t,e),!0;let o=0;if(i%2){for(;i<n.length&&n[i]<e;)i++,o++;return 0!=o&&(r&&(o%2?n.splice(i-o,o,e):n.splice(i-o,o)),!0)}for(;i<n.length&&n[i]<e;)i++,o++;return(t!=n[i-o]||1!=o)&&(r&&(o%2?n.splice(i-o,o,t):n.splice(i-o,o,t,e)),!0)}},PreciseShadowcasting:class extends D{compute(t,e,r,n){if(n(t,e,0,1),!this._lightPasses(t,e))return;let i,o,s,a,u,l,c=[];for(let h=1;h<=r;h++){let r=this._getCircle(t,e,h),f=r.length;for(let t=0;t<f;t++)if(i=r[t][0],o=r[t][1],a=[t?2*t-1:2*f-1,2*f],u=[2*t+1,2*f],s=!this._lightPasses(i,o),(l=this._checkVisibility(a,u,s,c))&&n(i,o,h,l),2==c.length&&0==c[0][0]&&c[1][0]==c[1][1])return}}_checkVisibility(t,e,r,n){if(t[0]>e[0]){return(this._checkVisibility(t,[t[1],t[1]],r,n)+this._checkVisibility([0,1],e,r,n))/2}let i=0,o=!1;for(;i<n.length;){let e=n[i],r=e[0]*t[1]-t[0]*e[1];if(r>=0){0!=r||i%2||(o=!0);break}i++}let s=n.length,a=!1;for(;s--;){let t=n[s],r=e[0]*t[1]-t[0]*e[1];if(r>=0){0==r&&s%2&&(a=!0);break}}let u,l=!0;if(i==s&&(o||a)?l=!1:o&&a&&i+1==s&&s%2?l=!1:i>s&&i%2&&(l=!1),!l)return 0;let c=s-i+1;if(c%2)if(i%2){let t=n[i];u=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),r&&n.splice(i,c,e)}else{let e=n[s];u=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),r&&n.splice(i,c,t)}else{if(!(i%2))return r&&n.splice(i,c,t,e),1;{let t=n[i],e=n[s];u=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),r&&n.splice(i,c)}}return u/((e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]))}},RecursiveShadowcasting:class extends D{compute(t,e,r,n){n(t,e,0,1);for(let i=0;i<L.length;i++)this._renderOctant(t,e,L[i],r,n)}compute180(t,e,r,n,i){i(t,e,0,1);let o=(n-1+8)%8,s=(n-2+8)%8,a=(n+1+8)%8;this._renderOctant(t,e,L[s],r,i),this._renderOctant(t,e,L[o],r,i),this._renderOctant(t,e,L[n],r,i),this._renderOctant(t,e,L[a],r,i)}compute90(t,e,r,n,i){i(t,e,0,1);let o=(n-1+8)%8;this._renderOctant(t,e,L[n],r,i),this._renderOctant(t,e,L[o],r,i)}_renderOctant(t,e,r,n,i){this._castVisibility(t,e,1,1,0,n+1,r[0],r[1],r[2],r[3],i)}_castVisibility(t,e,r,n,i,o,s,a,u,l,c){if(!(n<i))for(let h=r;h<=o;h++){let r=-h-1,f=-h,d=!1,p=0;for(;r<=0;){let _=t+(r+=1)*s+f*a,g=e+r*u+f*l,m=(r-.5)/(f+.5),v=(r+.5)/(f-.5);if(!(v>n)){if(m<i)break;if(r*r+f*f<o*o&&c(_,g,h,1),d){if(!this._lightPasses(_,g)){p=v;continue}d=!1,n=p}else!this._lightPasses(_,g)&&h<o&&(d=!0,this._castVisibility(t,e,h+1,n,m,o,s,a,u,l,c),p=v)}}if(d)break}}}};class N{constructor(t=k,e=M){this._width=t,this._height=e}_fillMap(t){let e=[];for(let r=0;r<this._width;r++){e.push([]);for(let n=0;n<this._height;n++)e[r].push(t)}return e}}class F extends N{constructor(t,e){super(t,e),this._rooms=[],this._corridors=[]}getRooms(){return this._rooms}getCorridors(){return this._corridors}}class W{}class B extends W{constructor(t,e,r,n,i,o){super(),this._x1=t,this._y1=e,this._x2=r,this._y2=n,this._doors={},void 0!==i&&void 0!==o&&this.addDoor(i,o)}static createRandomAt(t,e,r,n,o){let s=o.roomWidth[0],a=o.roomWidth[1],u=i.a.getUniformInt(s,a);s=o.roomHeight[0],a=o.roomHeight[1];let l=i.a.getUniformInt(s,a);if(1==r){let r=e-Math.floor(i.a.getUniform()*l);return new this(t+1,r,t+u,r+l-1,t,e)}if(-1==r){let r=e-Math.floor(i.a.getUniform()*l);return new this(t-u,r,t-1,r+l-1,t,e)}if(1==n){let r=t-Math.floor(i.a.getUniform()*u);return new this(r,e+1,r+u-1,e+l,t,e)}if(-1==n){let r=t-Math.floor(i.a.getUniform()*u);return new this(r,e-l,r+u-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")}static createRandomCenter(t,e,r){let n=r.roomWidth[0],o=r.roomWidth[1],s=i.a.getUniformInt(n,o);n=r.roomHeight[0],o=r.roomHeight[1];let a=i.a.getUniformInt(n,o),u=t-Math.floor(i.a.getUniform()*s),l=e-Math.floor(i.a.getUniform()*a);return new this(u,l,u+s-1,l+a-1)}static createRandom(t,e,r){let n=r.roomWidth[0],o=r.roomWidth[1],s=i.a.getUniformInt(n,o);n=r.roomHeight[0],o=r.roomHeight[1];let a=i.a.getUniformInt(n,o),u=t-s-1,l=e-a-1,c=1+Math.floor(i.a.getUniform()*u),h=1+Math.floor(i.a.getUniform()*l);return new this(c,h,c+s-1,h+a-1)}addDoor(t,e){return this._doors[t+","+e]=1,this}getDoors(t){for(let e in this._doors){let r=e.split(",");t(parseInt(r[0]),parseInt(r[1]))}return this}clearDoors(){return this._doors={},this}addDoors(t){let e=this._x1-1,r=this._x2+1,n=this._y1-1,i=this._y2+1;for(let o=e;o<=r;o++)for(let s=n;s<=i;s++)o!=e&&o!=r&&s!=n&&s!=i||t(o,s)||this.addDoor(o,s);return this}debug(){console.log("room",this._x1,this._y1,this._x2,this._y2)}isValid(t,e){let r=this._x1-1,n=this._x2+1,i=this._y1-1,o=this._y2+1;for(let s=r;s<=n;s++)for(let a=i;a<=o;a++)if(s==r||s==n||a==i||a==o){if(!t(s,a))return!1}else if(!e(s,a))return!1;return!0}create(t){let e=this._x1-1,r=this._x2+1,n=this._y1-1,i=this._y2+1,o=0;for(let s=e;s<=r;s++)for(let a=n;a<=i;a++)t(s,a,o=s+","+a in this._doors?2:s==e||s==r||a==n||a==i?1:0)}getCenter(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}getLeft(){return this._x1}getRight(){return this._x2}getTop(){return this._y1}getBottom(){return this._y2}}class Y extends W{constructor(t,e,r,n){super(),this._startX=t,this._startY=e,this._endX=r,this._endY=n,this._endsWithAWall=!0}static createRandomAt(t,e,r,n,o){let s=o.corridorLength[0],a=o.corridorLength[1],u=i.a.getUniformInt(s,a);return new this(t,e,t+r*u,e+n*u)}debug(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}isValid(t,e){let r=this._startX,n=this._startY,i=this._endX-r,o=this._endY-n,s=1+Math.max(Math.abs(i),Math.abs(o));i&&(i/=Math.abs(i)),o&&(o/=Math.abs(o));let a=o,u=-i,l=!0;for(let c=0;c<s;c++){let h=r+c*i,f=n+c*o;if(e(h,f)||(l=!1),t(h+a,f+u)||(l=!1),t(h-a,f-u)||(l=!1),!l){s=c,this._endX=h-i,this._endY=f-o;break}}if(0==s)return!1;if(1==s&&t(this._endX+i,this._endY+o))return!1;let c=!t(this._endX+i+a,this._endY+o+u),h=!t(this._endX+i-a,this._endY+o-u);return this._endsWithAWall=t(this._endX+i,this._endY+o),!c&&!h||!this._endsWithAWall}create(t){let e=this._startX,r=this._startY,n=this._endX-e,i=this._endY-r,o=1+Math.max(Math.abs(n),Math.abs(i));n&&(n/=Math.abs(n)),i&&(i/=Math.abs(i));for(let s=0;s<o;s++){t(e+s*n,r+s*i,0)}return!0}createPriorityWalls(t){if(!this._endsWithAWall)return;let e=this._startX,r=this._startY,n=this._endX-e,i=this._endY-r;n&&(n/=Math.abs(n)),i&&(i/=Math.abs(i));let o=i,s=-n;t(this._endX+n,this._endY+i),t(this._endX+o,this._endY+s),t(this._endX-o,this._endY-s)}}const $={room:B,corridor:Y};function H(t,e,r){r[e[t+1]]=r[t],e[r[t]]=e[t+1],r[t]=t+1,e[t+1]=t}function X(t,e,r){r[e[t]]=r[t],e[r[t]]=e[t],r[t]=t,e[t]=t}var q={Arena:class extends N{create(t){let e=this._width-1,r=this._height-1;for(let n=0;n<=e;n++)for(let i=0;i<=r;i++){t(n,i,n&&i&&n<e&&i<r?0:1)}return this}},Uniform:class extends F{constructor(t,e,r){super(t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(this._options,r),this._map=[],this._dug=0,this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)}create(t){let e=Date.now();for(;;){if(Date.now()-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(let e=0;e<this._width;e++)for(let r=0;r<this._height;r++)t(e,r,this._map[e][r]);return this}_generateRooms(){let t,e=this._width-2,r=this._height-2;do{if(t=this._generateRoom(),this._dug/(e*r)>this._options.roomDugPercentage)break}while(t)}_generateRoom(){let t=0;for(;t<this._roomAttempts;){t++;let e=B.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null}_generateCorridors(){let t=0;for(;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(let t=0;t<this._rooms.length;t++){let e=this._rooms[t];e.clearDoors(),e.create(this._digCallback)}for(this._unconnected=i.a.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){let t=i.a.getItem(this._connected);if(!t)break;let e=this._closestRoom(this._unconnected,t);if(!e)break;let r=this._closestRoom(this._connected,e);if(!r)break;if(!this._connectRooms(e,r))break;if(!this._unconnected.length)return!0}}return!1}_closestRoom(t,e){let r=1/0,n=e.getCenter(),i=null;for(let e=0;e<t.length;e++){let o=t[e],s=o.getCenter(),a=s[0]-n[0],u=s[1]-n[1],l=a*a+u*u;l<r&&(r=l,i=o)}return i}_connectRooms(t,e){let r,n,i,o,s,a,u,l=t.getCenter(),c=e.getCenter(),h=c[0]-l[0],f=c[1]-l[1];if(Math.abs(h)<Math.abs(f)?(o=((i=f>0?2:0)+2)%4,s=e.getLeft(),a=e.getRight(),u=0):(o=((i=h>0?1:3)+2)%4,s=e.getTop(),a=e.getBottom(),u=1),!(r=this._placeInWall(t,i)))return!1;if(r[u]>=s&&r[u]<=a){n=r.slice();let t=0;switch(o){case 0:t=e.getTop()-1;break;case 1:t=e.getRight()+1;break;case 2:t=e.getBottom()+1;break;case 3:t=e.getLeft()-1}n[(u+1)%2]=t,this._digLine([r,n])}else if(r[u]<s-1||r[u]>a+1){let t=r[u]-c[u],i=0;switch(o){case 0:case 1:i=t<0?3:1;break;case 2:case 3:i=t<0?1:3}if(o=(o+i)%4,!(n=this._placeInWall(e,o)))return!1;let s=[0,0];s[u]=r[u];let a=(u+1)%2;s[a]=n[a],this._digLine([r,s,n])}else{let t=(u+1)%2;if(!(n=this._placeInWall(e,o)))return!1;let i=Math.round((n[t]+r[t])/2),s=[0,0],a=[0,0];s[u]=r[u],s[t]=i,a[u]=n[u],a[t]=i,this._digLine([r,s,a,n])}return t.addDoor(r[0],r[1]),e.addDoor(n[0],n[1]),-1!=(u=this._unconnected.indexOf(t))&&(this._unconnected.splice(u,1),this._connected.push(t)),-1!=(u=this._unconnected.indexOf(e))&&(this._unconnected.splice(u,1),this._connected.push(e)),!0}_placeInWall(t,e){let r=[0,0],n=[0,0],o=0;switch(e){case 0:n=[1,0],r=[t.getLeft(),t.getTop()-1],o=t.getRight()-t.getLeft()+1;break;case 1:n=[0,1],r=[t.getRight()+1,t.getTop()],o=t.getBottom()-t.getTop()+1;break;case 2:n=[1,0],r=[t.getLeft(),t.getBottom()+1],o=t.getRight()-t.getLeft()+1;break;case 3:n=[0,1],r=[t.getLeft()-1,t.getTop()],o=t.getBottom()-t.getTop()+1}let s=[],a=-2;for(let t=0;t<o;t++){let e=r[0]+t*n[0],i=r[1]+t*n[1];s.push(null),1==this._map[e][i]?a!=t-1&&(s[t]=[e,i]):(a=t,t&&(s[t-1]=null))}for(let t=s.length-1;t>=0;t--)s[t]||s.splice(t,1);return s.length?i.a.getItem(s):null}_digLine(t){for(let e=1;e<t.length;e++){let r=t[e-1],n=t[e],i=new Y(r[0],r[1],n[0],n[1]);i.create(this._digCallback),this._corridors.push(i)}}_digCallback(t,e,r){this._map[t][e]=r,0==r&&this._dug++}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}},Cellular:class extends N{constructor(t,e,r={}){super(t,e),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},this.setOptions(r),this._dirs=T[this._options.topology],this._map=this._fillMap(0)}randomize(t){for(let e=0;e<this._width;e++)for(let r=0;r<this._height;r++)this._map[e][r]=i.a.getUniform()<t?1:0;return this}setOptions(t){Object.assign(this._options,t)}set(t,e,r){this._map[t][e]=r}create(t){let e=this._fillMap(0),r=this._options.born,n=this._options.survive;for(let t=0;t<this._height;t++){let i=1,o=0;6==this._options.topology&&(i=2,o=t%2);for(let s=o;s<this._width;s+=i){let i=this._map[s][t],o=this._getNeighbors(s,t);i&&-1!=n.indexOf(o)?e[s][t]=1:i||-1==r.indexOf(o)||(e[s][t]=1)}}this._map=e,t&&this._serviceCallback(t)}_serviceCallback(t){for(let e=0;e<this._height;e++){let r=1,n=0;6==this._options.topology&&(r=2,n=e%2);for(let i=n;i<this._width;i+=r)t(i,e,this._map[i][e])}}_getNeighbors(t,e){let r=0;for(let n=0;n<this._dirs.length;n++){let i=this._dirs[n],o=t+i[0],s=e+i[1];o<0||o>=this._width||s<0||s>=this._height||(r+=1==this._map[o][s]?1:0)}return r}connect(t,e,r){e||(e=0);let n=[],o={},s=1,a=[0,0];6==this._options.topology&&(s=2,a=[0,1]);for(let t=0;t<this._height;t++)for(let r=a[t%2];r<this._width;r+=s)if(this._freeSpace(r,t,e)){let e=[r,t];o[this._pointKey(e)]=e,n.push([r,t])}let u=n[i.a.getUniformInt(0,n.length-1)],l=this._pointKey(u),c={};for(c[l]=u,delete o[l],this._findConnected(c,o,[u],!1,e);Object.keys(o).length>0;){let t=this._getFromTo(c,o),n=t[0],i=t[1],s={};s[this._pointKey(n)]=n,this._findConnected(s,o,[n],!0,e),(6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected).call(this,i,n,c,o,e,r);for(let t in s){let r=s[t];this._map[r[0]][r[1]]=e,c[t]=r,delete o[t]}}t&&this._serviceCallback(t)}_getFromTo(t,e){let r,n=[0,0],o=[0,0],s=Object.keys(t),a=Object.keys(e);for(let u=0;u<5;u++){if(s.length<a.length){let r=s;o=t[r[i.a.getUniformInt(0,r.length-1)]],n=this._getClosest(o,e)}else{let r=a;n=e[r[i.a.getUniformInt(0,r.length-1)]],o=this._getClosest(n,t)}if((r=(n[0]-o[0])*(n[0]-o[0])+(n[1]-o[1])*(n[1]-o[1]))<64)break}return[n,o]}_getClosest(t,e){let r=null,n=null;for(let i in e){let o=e[i],s=(o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1]);(null==n||s<n)&&(n=s,r=o)}return r}_findConnected(t,e,r,n,i){for(;r.length>0;){let o,s=r.splice(0,1)[0];o=6==this._options.topology?[[s[0]+2,s[1]],[s[0]+1,s[1]-1],[s[0]-1,s[1]-1],[s[0]-2,s[1]],[s[0]-1,s[1]+1],[s[0]+1,s[1]+1]]:[[s[0]+1,s[1]],[s[0]-1,s[1]],[s[0],s[1]+1],[s[0],s[1]-1]];for(let s=0;s<o.length;s++){let a=this._pointKey(o[s]);null==t[a]&&this._freeSpace(o[s][0],o[s][1],i)&&(t[a]=o[s],n||delete e[a],r.push(o[s]))}}}_tunnelToConnected(t,e,r,n,i,o){let s,a;e[0]<t[0]?(s=e,a=t):(s=t,a=e);for(let t=s[0];t<=a[0];t++){this._map[t][s[1]]=i;let e=[t,s[1]],o=this._pointKey(e);r[o]=e,delete n[o]}o&&s[0]<a[0]&&o(s,[a[0],s[1]]);let u=a[0];e[1]<t[1]?(s=e,a=t):(s=t,a=e);for(let t=s[1];t<a[1];t++){this._map[u][t]=i;let e=[u,t],o=this._pointKey(e);r[o]=e,delete n[o]}o&&s[1]<a[1]&&o([a[0],s[1]],[a[0],a[1]])}_tunnelToConnected6(t,e,r,n,i,o){let s,a;e[0]<t[0]?(s=e,a=t):(s=t,a=e);let u=s[0],l=s[1];for(;u!=a[0]||l!=a[1];){let t=2;l<a[1]?(l++,t=1):l>a[1]&&(l--,t=1),u<a[0]?u+=t:u>a[0]?u-=t:a[1]%2?u-=t:u+=t,this._map[u][l]=i;let e=[u,l],o=this._pointKey(e);r[o]=e,delete n[o]}o&&o(e,t)}_freeSpace(t,e,r){return t>=0&&t<this._width&&e>=0&&e<this._height&&this._map[t][e]==r}_pointKey(t){return t[0]+"."+t[1]}},Digger:class extends F{constructor(t,e,r={}){super(t,e),this._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},r),this._features={room:4,corridor:4},this._map=[],this._featureAttempts=20,this._walls={},this._dug=0,this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)}create(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;let e=(this._width-2)*(this._height-2);this._firstRoom();let r,n=Date.now();do{if(r=0,Date.now()-n>this._options.timeLimit)break;let t=this._findWall();if(!t)break;let e=t.split(","),i=parseInt(e[0]),o=parseInt(e[1]),s=this._getDiggingDirection(i,o);if(!s)continue;let a=0;do{if(a++,this._tryFeature(i,o,s[0],s[1])){this._removeSurroundingWalls(i,o),this._removeSurroundingWalls(i-s[0],o-s[1]);break}}while(a<this._featureAttempts);for(let t in this._walls)this._walls[t]>1&&r++}while(this._dug/e<this._options.dugPercentage||r);if(this._addDoors(),t)for(let e=0;e<this._width;e++)for(let r=0;r<this._height;r++)t(e,r,this._map[e][r]);return this._walls={},this._map=[],this}_digCallback(t,e,r){0==r||2==r?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}_priorityWallCallback(t,e){this._walls[t+","+e]=2}_firstRoom(){let t=Math.floor(this._width/2),e=Math.floor(this._height/2),r=B.createRandomCenter(t,e,this._options);this._rooms.push(r),r.create(this._digCallback)}_findWall(){let t=[],e=[];for(let r in this._walls){2==this._walls[r]?e.push(r):t.push(r)}let r=e.length?e:t;if(!r.length)return null;let n=i.a.getItem(r.sort());return delete this._walls[n],n}_tryFeature(t,e,r,n){let o=i.a.getWeightedValue(this._features),s=$[o].createRandomAt(t,e,r,n,this._options);return!!s.isValid(this._isWallCallback,this._canBeDugCallback)&&(s.create(this._digCallback),s instanceof B&&this._rooms.push(s),s instanceof Y&&(s.createPriorityWalls(this._priorityWallCallback),this._corridors.push(s)),!0)}_removeSurroundingWalls(t,e){let r=T[4];for(let n=0;n<r.length;n++){let i=r[n],o=t+i[0],s=e+i[1];delete this._walls[o+","+s],o=t+2*i[0],s=e+2*i[1],delete this._walls[o+","+s]}}_getDiggingDirection(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;let r=null,n=T[4];for(let i=0;i<n.length;i++){let o=n[i],s=t+o[0],a=e+o[1];if(!this._map[s][a]){if(r)return null;r=o}}return r?[-r[0],-r[1]]:null}_addDoors(){let t=this._map;function e(e,r){return 1==t[e][r]}for(let t=0;t<this._rooms.length;t++){let r=this._rooms[t];r.clearDoors(),r.addDoors(e)}}},EllerMaze:class extends N{create(t){let e,r=this._fillMap(1),n=Math.ceil((this._width-2)/2),o=[],s=[];for(let t=0;t<n;t++)o.push(t),s.push(t);for(o.push(n-1),e=1;e+3<this._height;e+=2)for(let t=0;t<n;t++){let n=2*t+1,a=e;r[n][a]=0,t!=o[t+1]&&i.a.getUniform()>.375&&(H(t,o,s),r[n+1][a]=0),t!=o[t]&&i.a.getUniform()>.375?X(t,o,s):r[n][a+1]=0}for(let t=0;t<n;t++){let n=2*t+1,a=e;r[n][a]=0,t!=o[t+1]&&(t==o[t]||i.a.getUniform()>.375)&&(H(t,o,s),r[n+1][a]=0),X(t,o,s)}for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)t(e,n,r[e][n]);return this}},DividedMaze:class extends N{constructor(){super(...arguments),this._stack=[],this._map=[]}create(t){let e=this._width,r=this._height;this._map=[];for(let t=0;t<e;t++){this._map.push([]);for(let n=0;n<r;n++){let i=0==t||0==n||t+1==e||n+1==r;this._map[t].push(i?1:0)}}this._stack=[[1,1,e-2,r-2]],this._process();for(let n=0;n<e;n++)for(let e=0;e<r;e++)t(n,e,this._map[n][e]);return this._map=[],this}_process(){for(;this._stack.length;){let t=this._stack.shift();this._partitionRoom(t)}}_partitionRoom(t){let e=[],r=[];for(let r=t[0]+1;r<t[2];r++){let n=this._map[r][t[1]-1],i=this._map[r][t[3]+1];!n||!i||r%2||e.push(r)}for(let e=t[1]+1;e<t[3];e++){let n=this._map[t[0]-1][e],i=this._map[t[2]+1][e];!n||!i||e%2||r.push(e)}if(!e.length||!r.length)return;let n=i.a.getItem(e),o=i.a.getItem(r);this._map[n][o]=1;let s=[],a=[];s.push(a);for(let e=t[0];e<n;e++)this._map[e][o]=1,a.push([e,o]);a=[],s.push(a);for(let e=n+1;e<=t[2];e++)this._map[e][o]=1,a.push([e,o]);a=[],s.push(a);for(let e=t[1];e<o;e++)this._map[n][e]=1,a.push([n,e]);a=[],s.push(a);for(let e=o+1;e<=t[3];e++)this._map[n][e]=1,a.push([n,e]);let u=i.a.getItem(s);for(let t=0;t<s.length;t++){let e=s[t];if(e==u)continue;let r=i.a.getItem(e);this._map[r[0]][r[1]]=0}this._stack.push([t[0],t[1],n-1,o-1]),this._stack.push([n+1,t[1],t[2],o-1]),this._stack.push([t[0],o+1,n-1,t[3]]),this._stack.push([n+1,o+1,t[2],t[3]])}},IceyMaze:class extends N{constructor(t,e,r=0){super(t,e),this._regularity=r,this._map=[]}create(t){let e=this._width,r=this._height,n=this._fillMap(1);e-=e%2?1:2,r-=r%2?1:2;let o=0,s=0,a=0,u=0,l=0,c=!1,h=[[0,0],[0,0],[0,0],[0,0]];do{if(o=1+2*Math.floor(i.a.getUniform()*(e-1)/2),s=1+2*Math.floor(i.a.getUniform()*(r-1)/2),l||(n[o][s]=0),!n[o][s]){this._randomize(h);do{0==Math.floor(i.a.getUniform()*(this._regularity+1))&&this._randomize(h),c=!0;for(let t=0;t<4;t++)if(a=o+2*h[t][0],u=s+2*h[t][1],this._isFree(n,a,u,e,r)){n[a][u]=0,n[o+h[t][0]][s+h[t][1]]=0,o=a,s=u,c=!1,l++;break}}while(!c)}}while(l+1<e*r/4);for(let e=0;e<this._width;e++)for(let r=0;r<this._height;r++)t(e,r,n[e][r]);return this._map=[],this}_randomize(t){for(let e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*i.a.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}}_isFree(t,e,r,n,i){return!(e<1||r<1||e>=n||r>=i)&&t[e][r]}},Rogue:class extends N{constructor(t,e,r){super(t,e),this.map=[],this.rooms=[],this.connectedCells=[],(r=Object.assign({cellWidth:3,cellHeight:3},r)).hasOwnProperty("roomWidth")||(r.roomWidth=this._calculateRoomSize(this._width,r.cellWidth)),r.hasOwnProperty("roomHeight")||(r.roomHeight=this._calculateRoomSize(this._height,r.cellHeight)),this._options=r}create(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(let e=0;e<this._width;e++)for(let r=0;r<this._height;r++)t(e,r,this.map[e][r]);return this}_calculateRoomSize(t,e){let r=Math.floor(t/e*.8),n=Math.floor(t/e*.25);return n<2&&(n=2),r<2&&(r=2),[n,r]}_initRooms(){for(let t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(let e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}}_connectRooms(){let t,e,r,n,o,s,a=i.a.getUniformInt(0,this._options.cellWidth-1),u=i.a.getUniformInt(0,this._options.cellHeight-1),l=!1;do{s=[0,2,4,6],s=i.a.shuffle(s);do{if(l=!1,t=s.pop(),e=a+T[8][t][0],r=u+T[8][t][1],!(e<0||e>=this._options.cellWidth||r<0||r>=this._options.cellHeight)){if((n=this.rooms[a][u]).connections.length>0&&n.connections[0][0]==e&&n.connections[0][1]==r)break;0==(o=this.rooms[e][r]).connections.length&&(o.connections.push([a,u]),this.connectedCells.push([e,r]),a=e,u=r,l=!0)}}while(s.length>0&&0==l)}while(s.length>0)}_connectUnconnectedRooms(){let t,e,r,n=this._options.cellWidth,o=this._options.cellHeight;this.connectedCells=i.a.shuffle(this.connectedCells);for(let s=0;s<this._options.cellWidth;s++)for(let a=0;a<this._options.cellHeight;a++)if(0==(t=this.rooms[s][a]).connections.length){let u=[0,2,4,6];u=i.a.shuffle(u),r=!1;do{let t=u.pop(),i=s+T[8][t][0],l=a+T[8][t][1];if(!(i<0||i>=n||l<0||l>=o)){if(r=!0,0==(e=this.rooms[i][l]).connections.length)break;for(let t=0;t<e.connections.length;t++)if(e.connections[t][0]==s&&e.connections[t][1]==a){r=!1;break}if(r)break}}while(u.length);r?t.connections.push([e.cellx,e.celly]):console.log("-- Unable to connect room.")}}_createRandomRoomConnections(){}_createRooms(){let t,e,r,n,o,s=this._width,a=this._height,u=this._options.cellWidth,l=this._options.cellHeight,c=Math.floor(this._width/u),h=Math.floor(this._height/l),f=this._options.roomWidth,d=this._options.roomHeight;for(let p=0;p<u;p++)for(let u=0;u<l;u++){if(0==(r=c*p)&&(r=1),0==(n=h*u)&&(n=1),t=i.a.getUniformInt(f[0],f[1]),e=i.a.getUniformInt(d[0],d[1]),u>0)for(o=this.rooms[p][u-1];n-(o.y+o.height)<3;)n++;if(p>0)for(o=this.rooms[p-1][u];r-(o.x+o.width)<3;)r++;let l=Math.round(i.a.getUniformInt(0,c-t)/2),_=Math.round(i.a.getUniformInt(0,h-e)/2);for(;r+l+t>=s;)l?l--:t--;for(;n+_+e>=a;)_?_--:e--;r+=l,n+=_,this.rooms[p][u].x=r,this.rooms[p][u].y=n,this.rooms[p][u].width=t,this.rooms[p][u].height=e;for(let i=r;i<r+t;i++)for(let t=n;t<n+e;t++)this.map[i][t]=0}}_getWallPosition(t,e){let r,n,o;return 1==e||3==e?(r=i.a.getUniformInt(t.x+1,t.x+t.width-2),o=1==e?(n=t.y-2)+1:(n=t.y+t.height+1)-1,this.map[r][o]=0):(n=i.a.getUniformInt(t.y+1,t.y+t.height-2),o=2==e?(r=t.x+t.width+1)-1:(r=t.x-2)+1,this.map[o][n]=0),[r,n]}_drawCorridor(t,e){let r,n,o,s,a=e[0]-t[0],u=e[1]-t[1],l=t[0],c=t[1],h=[],f=Math.abs(a),d=Math.abs(u),p=i.a.getUniform(),_=p,g=1-p;for(n=a>0?2:6,o=u>0?4:0,f<d?(r=Math.ceil(d*_),h.push([o,r]),h.push([n,f]),r=Math.floor(d*g),h.push([o,r])):(r=Math.ceil(f*_),h.push([n,r]),h.push([o,d]),r=Math.floor(f*g),h.push([n,r])),this.map[l][c]=0;h.length>0;)for(s=h.pop();s[1]>0;)l+=T[8][s[0]][0],c+=T[8][s[0]][1],this.map[l][c]=0,s[1]=s[1]-1}_createCorridors(){let t,e,r,n,i,o=this._options.cellWidth,s=this._options.cellHeight;for(let a=0;a<o;a++)for(let o=0;o<s;o++){t=this.rooms[a][o];for(let o=0;o<t.connections.length;o++)e=t.connections[o],(r=this.rooms[e[0]][e[1]]).cellx>t.cellx?(n=2,i=4):r.cellx<t.cellx?(n=4,i=2):r.celly>t.celly?(n=3,i=1):(n=1,i=3),this._drawCorridor(this._getWallPosition(t,n),this._getWallPosition(r,i))}}}};class G{}const Z=.5*(Math.sqrt(3)-1),Q=(3-Math.sqrt(3))/6;var J={Simplex:class extends G{constructor(t=256){super(),this._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];let e=[];for(let r=0;r<t;r++)e.push(r);e=i.a.shuffle(e),this._perms=[],this._indexes=[];for(let r=0;r<2*t;r++)this._perms.push(e[r%t]),this._indexes.push(this._perms[r]%this._gradients.length)}get(t,e){let r,n,i,o=this._perms,s=this._indexes,u=o.length/2,l=0,c=0,h=0,f=(t+e)*Z,d=Math.floor(t+f),p=Math.floor(e+f),_=(d+p)*Q,g=t-(d-_),m=e-(p-_);g>m?(n=1,i=0):(n=0,i=1);let v=g-n+Q,y=m-i+Q,b=g-1+2*Q,w=m-1+2*Q,x=Object(a.mod)(d,u),S=Object(a.mod)(p,u),E=.5-g*g-m*m;if(E>=0){E*=E,r=s[x+o[S]];let t=this._gradients[r];l=E*E*(t[0]*g+t[1]*m)}let C=.5-v*v-y*y;if(C>=0){C*=C,r=s[x+n+o[S+i]];let t=this._gradients[r];c=C*C*(t[0]*v+t[1]*y)}let O=.5-b*b-w*w;if(O>=0){O*=O,r=s[x+1+o[S+1]];let t=this._gradients[r];h=O*O*(t[0]*b+t[1]*w)}return 70*(l+c+h)}}};class tt{constructor(t,e,r,n={}){this._toX=t,this._toY=e,this._passableCallback=r,this._options=Object.assign({topology:8},n),this._dirs=T[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}_getNeighbors(t,e){let r=[];for(let n=0;n<this._dirs.length;n++){let i=this._dirs[n],o=t+i[0],s=e+i[1];this._passableCallback(o,s)&&r.push([o,s])}return r}}var et={Dijkstra:class extends tt{constructor(t,e,r,n){super(t,e,r,n),this._computed={},this._todo=[],this._add(t,e,null)}compute(t,e,r){let n=t+","+e;if(n in this._computed||this._compute(t,e),!(n in this._computed))return;let i=this._computed[n];for(;i;)r(i.x,i.y),i=i.prev}_compute(t,e){for(;this._todo.length;){let r=this._todo.shift();if(r.x==t&&r.y==e)return;let n=this._getNeighbors(r.x,r.y);for(let t=0;t<n.length;t++){let e=n[t],i=e[0],o=e[1];i+","+o in this._computed||this._add(i,o,r)}}}_add(t,e,r){let n={x:t,y:e,prev:r};this._computed[t+","+e]=n,this._todo.push(n)}},AStar:class extends tt{constructor(t,e,r,n={}){super(t,e,r,n),this._todo=[],this._done={}}compute(t,e,r){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){let r=this._todo.shift(),n=r.x+","+r.y;if(n in this._done)continue;if(this._done[n]=r,r.x==t&&r.y==e)break;let i=this._getNeighbors(r.x,r.y);for(let t=0;t<i.length;t++){let e=i[t],n=e[0],o=e[1];n+","+o in this._done||this._add(n,o,r)}}let n=this._done[t+","+e];if(n)for(;n;)r(n.x,n.y),n=n.prev}_add(t,e,r){let n=this._distance(t,e),i={x:t,y:e,prev:r,g:r?r.g+1:0,h:n},o=i.g+i.h;for(let t=0;t<this._todo.length;t++){let e=this._todo[t],r=e.g+e.h;if(o<r||o==r&&n<e.h)return void this._todo.splice(t,0,i)}this._todo.push(i)}_distance(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:let r=Math.abs(t-this._fromX),n=Math.abs(e-this._fromY);return n+Math.max(0,(r-n)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}}}};class rt{constructor(t){this._scheduler=t,this._lock=1}start(){return this.unlock()}lock(){return this._lock++,this}unlock(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){let t=this._scheduler.next();if(!t)return this.lock();let e=t.act();e&&e.then&&(this.lock(),e.then(this.unlock.bind(this)))}return this}}class nt{constructor(t,e={}){this._reflectivityCallback=t,this._options={},e=Object.assign({passes:1,emissionThreshold:100,range:10},e),this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(e)}setOptions(t){return Object.assign(this._options,t),t&&t.range&&this.reset(),this}setFOV(t){return this._fov=t,this._fovCache={},this}setLight(t,e,r){let n=t+","+e;return r?this._lights[n]="string"==typeof r?h.fromString(r):r:delete this._lights[n],this}clearLights(){this._lights={}}reset(){return this._reflectivityCache={},this._fovCache={},this}compute(t){let e={},r={},n={};for(let t in this._lights){let e=this._lights[t];r[t]=[0,0,0],h.add_(r[t],e)}for(let t=0;t<this._options.passes;t++)this._emitLight(r,n,e),t+1!=this._options.passes&&(r=this._computeEmitters(n,e));for(let e in n){let r=e.split(",");t(parseInt(r[0]),parseInt(r[1]),n[e])}return this}_emitLight(t,e,r){for(let n in t){let i=n.split(","),o=parseInt(i[0]),s=parseInt(i[1]);this._emitLightFromCell(o,s,t[n],e),r[n]=1}return this}_computeEmitters(t,e){let r={};for(let n in t){if(n in e)continue;let i,o=t[n];if(n in this._reflectivityCache)i=this._reflectivityCache[n];else{let t=n.split(","),e=parseInt(t[0]),r=parseInt(t[1]);i=this._reflectivityCallback(e,r),this._reflectivityCache[n]=i}if(0==i)continue;let s=[0,0,0],a=0;for(let t=0;t<3;t++){let e=Math.round(o[t]*i);s[t]=e,a+=e}a>this._options.emissionThreshold&&(r[n]=s)}return r}_emitLightFromCell(t,e,r,n){let i,o=t+","+e;i=o in this._fovCache?this._fovCache[o]:this._updateFOV(t,e);for(let t in i){let e,o=i[t];t in n?e=n[t]:(e=[0,0,0],n[t]=e);for(let t=0;t<3;t++)e[t]+=Math.round(r[t]*o)}return this}_updateFOV(t,e){let r=t+","+e,n={};this._fovCache[r]=n;let i=this._options.range;return this._fov.compute(t,e,i,function(t,e,r,o){let s=o*(1-r/i);0!=s&&(n[t+","+e]=s)}.bind(this)),n}}r.d(e,"Util",(function(){return it})),r.d(e,"Color",(function(){return ot})),r.d(e,"Text",(function(){return st})),r.d(e,"RNG",(function(){return i.a})),r.d(e,"Display",(function(){return I})),r.d(e,"StringGenerator",(function(){return V})),r.d(e,"EventQueue",(function(){return K})),r.d(e,"Scheduler",(function(){return j})),r.d(e,"FOV",(function(){return U})),r.d(e,"Map",(function(){return q})),r.d(e,"Noise",(function(){return J})),r.d(e,"Path",(function(){return et})),r.d(e,"Engine",(function(){return rt})),r.d(e,"Lighting",(function(){return nt})),r.d(e,"DEFAULT_WIDTH",(function(){return k})),r.d(e,"DEFAULT_HEIGHT",(function(){return M})),r.d(e,"DIRS",(function(){return T})),r.d(e,"KEYS",(function(){return A}));const it=a,ot=h,st=n},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return s}));var n=r(6),i=r(2);function o(t){let e=i.fromString(t);return 36*Math.floor(e[0]*(6/256))+6*Math.floor(e[1]*(6/256))+1*Math.floor(e[2]*(6/256))+16}class s extends n.a{constructor(){super(),this._offset=[0,0],this._cursor=[-1,-1],this._lastColor=""}schedule(t){setTimeout(t,1e3/60)}setOptions(t){super.setOptions(t);let e=[t.width,t.height],r=this.computeSize();this._offset=r.map((t,r)=>Math.floor((t-e[r])/2))}clear(){t.stdout.write(`[0;48;5;${o(this._options.bg)}m[2J`)}draw(e,r){let[n,i,s,a,u]=e,l=this._offset[0]+n,c=this._offset[1]+i,h=this.computeSize();if(l<0||l>=h[0])return;if(c<0||c>=h[1])return;if(l===this._cursor[0]&&c===this._cursor[1]||(t.stdout.write(function(t,e){return`[${e+1};${t+1}H`}(l,c)),this._cursor[0]=l,this._cursor[1]=c),r&&(s||(s=" ")),!s)return;let f=function(t,e){return`[0;38;5;${o(t)};48;5;${o(e)}m`}(a,u);f!==this._lastColor&&(t.stdout.write(f),this._lastColor=f);let d=[].concat(s);t.stdout.write(d[0]),this._cursor[0]++,this._cursor[0]>=h[0]&&(this._cursor[0]=0,this._cursor[1]++)}computeFontSize(){throw new Error("Terminal backend has no notion of font size")}eventToPosition(t,e){return[t,e]}computeSize(){return[t.stdout.columns,t.stdout.rows]}}}).call(this,r(31))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(5)),s=i(r(10)),a=i(r(4)),u=r(9),l=a.default.polarization(),c=a.default.direction(),h=s.default.identity([l]),f=s.default.identity([c]),d=function(t){return o.Cx(Math.cos(t),0)},p=function(t){return o.Cx(Math.sin(t),0)},_=function(t,e){return(t%e+e)%e};function g(t,e){var r=[[d(t).mul(d(t)),d(t).mul(p(t))],[d(t).mul(p(t)),p(t).mul(p(t))]];return s.default.fromArray(r,[e])}e.isqrt2=o.Cx(Math.SQRT1_2),e.rotationMatrix=function(t,e){var r=[[d(t),p(-t)],[p(t),d(t)]];return s.default.fromArray(r,[e])},e.projectionMatrix=g,e.phaseShiftForRealEigenvectors=function(t,e,r,n){return s.default.add([g(t,n).mulConstant(o.default.fromPolar(1,e*u.TAU)),g(t+.25*u.TAU,n).mulConstant(o.default.fromPolar(1,r*u.TAU))])},e.reflectPhaseFromLighter=function(){var t=[[o.Cx(-1),o.Cx(0)],[o.Cx(0),o.Cx(1)]];return s.default.fromArray(t,[l],[l])},e.reflectPhaseFromDenser=function(){var t=[[o.Cx(-1),o.Cx(0)],[o.Cx(0),o.Cx(1)]];return s.default.fromArray(t,[l],[l])},e.amplitudeIntensity=function(t,e){return s.default.outer([f,h]).mulConstant(o.default.fromPolar(t,u.TAU*e))},e.reflectFromPlaneDirection=function(t){var e;switch(_(t,180)){case 0:e=[["v","^",o.Cx(1)],["^","v",o.Cx(1)]];break;case 45:e=[["^",">",o.Cx(1)],[">","^",o.Cx(1)],["v","<",o.Cx(1)],["<","v",o.Cx(1)]];break;case 90:e=[["<",">",o.Cx(1)],[">","<",o.Cx(1)]];break;case 135:e=[["v",">",o.Cx(1)],[">","v",o.Cx(1)],["^","<",o.Cx(1)],["<","^",o.Cx(1)]];break;default:throw new Error("Angle "+t+" % 180 isn't in the set [0, 45, 90, 135]")}return s.default.fromSparseCoordNames(e,[c])},e.beamsplitterTransmittionDirections=function(t){switch(_(t,180)){case 0:return s.default.fromSparseCoordNames([["^","^",o.Cx(1)],["v","v",o.Cx(1)]],[c]);case 45:case 135:return f;case 90:return s.default.fromSparseCoordNames([[">",">",o.Cx(1)],["<","<",o.Cx(1)]],[c]);default:throw new Error("Angle "+t+" % 180 isn't in the set [0, 45, 90, 135].")}},e.diodeForDirections=function(t){switch(_(t,360)){case 0:return s.default.fromSparseCoordNames([[">",">",o.Cx(1)]],[c]);case 90:return s.default.fromSparseCoordNames([["^","^",o.Cx(1)]],[c]);case 180:return s.default.fromSparseCoordNames([["<","<",o.Cx(1)]],[c]);case 270:return s.default.fromSparseCoordNames([["v","v",o.Cx(1)]],[c]);default:throw new Error("Angle "+t+" % 360 isn't in the set [0, 90, 180, 270].")}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{static waitForInput(t){return new Promise(e=>{void 0!==n.processInputCallback&&n.stopProcessing(),n.resolve=e,n.processInputCallback=e=>n.processInput(e,t),window.addEventListener("keydown",n.processInputCallback)})}static processInput(t,e){e(t)&&n.stopProcessing()}static stopProcessing(){window.removeEventListener("keydown",n.processInputCallback),n.processInputCallback=()=>{},n.resolve()}}e.default=n},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(24)),o=n(r(25)),s=n(r(34));document.body.onload=()=>{new s.default(o.default.importLevel(i.default),64)}},function(t){t.exports=JSON.parse('{"id":18,"name":"Perpendicular are different","group":"Classic","description":"","grid":{"cols":12,"rows":10,"cells":[{"coord":{"y":1,"x":2},"element":"mirror","rotation":45,"frozen":true,"active":false,"energized":false},{"coord":{"y":1,"x":7},"element":"mirror","rotation":135,"frozen":true,"active":false,"energized":false},{"coord":{"y":3,"x":2},"element":"phasedec","rotation":0,"frozen":true,"active":false,"energized":false},{"coord":{"y":5,"x":0},"element":"mine","rotation":0,"frozen":true,"active":false,"energized":false},{"coord":{"y":5,"x":2},"element":"beamsplitter","rotation":45,"frozen":true,"active":false,"energized":false},{"coord":{"y":5,"x":4},"element":"mirror","rotation":135,"frozen":true,"active":false,"energized":false},{"coord":{"y":5,"x":5},"element":"mirror","rotation":45,"frozen":true,"active":false,"energized":false},{"coord":{"y":5,"x":7},"element":"polarsplitter","rotation":0,"frozen":true,"active":false,"energized":false},{"coord":{"y":5,"x":9},"element":"sugar","rotation":0,"frozen":false,"active":false,"energized":false},{"coord":{"y":5,"x":11},"element":"laser","rotation":180,"frozen":true,"active":true,"energized":false},{"coord":{"y":6,"x":4},"element":"sugar","rotation":0,"frozen":false,"active":false,"energized":false},{"coord":{"y":7,"x":4},"element":"sugar","rotation":0,"frozen":false,"active":false,"energized":false},{"coord":{"y":9,"x":2},"element":"detector","rotation":90,"frozen":true,"active":false,"energized":false},{"coord":{"y":9,"x":4},"element":"mirror","rotation":135,"frozen":true,"active":false,"energized":false},{"coord":{"y":9,"x":5},"element":"mirror","rotation":45,"frozen":true,"active":false,"energized":false}]},"hints":[],"goals":[]}')},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(8),o=n(r(29)),s=n(r(32)),a=n(r(33));class u{constructor(t,e,r,n,s=new o.default(8,8),a,u,l){this.id=t,this.group=r,this.name=e,this.description=n,this.grid=s,this.goals=a,this.hints=u,this.completed=l,this.state=new i.Photons(s.cols,s.rows)}toString(){return`LEVEL: ${this.name} [${this.grid.cols}x${this.grid.rows}]\nDESC: ${this.description}\nGROUP: ${this.group}\n${this.grid.toString()}\nGOALS: ${this.goals.map(t=>t.toString())}\nGOALS: ${this.completed?"COMPLETE":"IN PROGRESS"}\nHINTS: ${this.hints.map(t=>t.toString())}\n\n`}exportLevel(){return{id:this.id,name:this.name,group:this.group,description:this.description,grid:this.grid.exportGrid(),hints:this.hints.flatMap(t=>t.exportHint()),goals:this.goals.flatMap(t=>t.exportGoal())}}static importLevel(t){const e=new o.default(t.grid.rows,t.grid.cols);e.importGrid(t.grid.cells);const r=a.default.importGoal(t.goals),n=s.default.importHint(t.hints);return new u(t.id,t.name,t.group,t.description,e,r,n,!1)}}e.default=u},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){"use strict";var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)n[i]=o[s];return n},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(r(7)),s=i(r(13)),a=i(r(10)),u=i(r(4)),l=r(5),c=function(){function t(t,e){this.sizeX=t,this.sizeY=e,this.vector=new s.default([],[]),this.nPhotons=0,this.dimX=u.default.position(t,"x"),this.dimY=u.default.position(e,"y")}return t.prototype.createPhoton=function(t,e,r,n){var i=[this.dimX,this.dimY,u.default.direction(),u.default.polarization()],o=[t.toString(),e.toString(),r,n];return s.default.indicator(i,o)},t.prototype.addPhotonIndicator=function(t,e,r,n){var i=this.createPhoton(t,e,r,n),o=this.vector;if(this.nPhotons+=1,1===this.nPhotons)this.vector=i;else{if(2!==this.nPhotons)throw"Adding 3 or more particles not yet implemented";if(!i.dot(this.vector).isZero)throw"Adding photons not yet implemented for non-ortogonal states. Old photon:\n"+this.vector+"\nand new photon:\n"+i;this.vector=s.default.add([o.outer(i),i.outer(o)]).mulConstant(l.Cx(Math.SQRT1_2))}},t.prototype.createPhotonPropagator=function(t){void 0===t&&(t=!0);var e=u.default.direction(),r=this.dimX,n=this.dimY,i=t?1:-1;return a.default.add([a.default.outer([a.default.shift(r,1),a.default.identity([n]),a.default.indicator([e],[">"])]),a.default.outer([a.default.shift(r,-1),a.default.identity([n]),a.default.indicator([e],["<"])]),a.default.outer([a.default.identity([r]),a.default.shift(n,+i),a.default.indicator([e],["v"])]),a.default.outer([a.default.identity([r]),a.default.shift(n,-i),a.default.indicator([e],["^"])])])},t.prototype.propagatePhotons=function(t){if(void 0===t&&(t=!0),1!==this.nPhotons)throw"Right now implemented only for 1 photon. Here we have "+this.nPhotons+" photons.";var e=this.createPhotonPropagator(t);this.vector=e.outer(a.default.identity([u.default.polarization()])).mulVec(this.vector)},t.prototype.createLocalizedOperator=function(t,e,r){return a.default.outer([a.default.indicator([this.dimX,this.dimY],[""+e,""+r]),t])},t.prototype.createSinglePhotonInteraction=function(t){var e=this,r=t.map((function(t){var r=t[0],n=t[1],i=t[2].sub(a.default.identity([u.default.direction(),u.default.polarization()]));return e.createLocalizedOperator(i,r,n)}));return a.default.add(n([a.default.identity([this.dimX,this.dimY,u.default.direction(),u.default.polarization()])],r))},t.prototype.actOnSinglePhotons=function(t){if(1!==this.nPhotons)throw"Right now implemented only for 1 photon. Here we have "+this.nPhotons+" photons.";var e=this.createSinglePhotonInteraction(t);this.vector=e.mulVec(this.vector)},t.prototype.aggregatePolarization=function(){if(1!==this.nPhotons)throw"Right now implemented only for 1 photon. Here we have "+this.nPhotons+" photons.";return o.default.chain(this.vector.cells).groupBy((function(t){return o.default.at(t.coord,[0,1,2])})).values().map((function(t){var e=t[0].coord,r=e[0],n=e[1],i=e[2],o=(e[3],[l.Cx(0),l.Cx(0)]);return t.forEach((function(t){o[t.coord[3]]=t.value})),{x:r,y:n,direction:90*i,are:o[0].re,aim:o[0].im,bre:o[1].re,bim:o[1].im}})).value()},t.prototype.totalIntensityPerTile=function(){if(1!==this.nPhotons)throw"Right now implemented only for 1 photon. Here we have "+this.nPhotons+" photons.";return o.default.chain(this.vector.cells).groupBy((function(t){return o.default.at(t.coord,[0,1])})).values().map((function(t){var e=t[0].coord,r=e[0],n=e[1];e[2],e[3];return{x:r,y:n,probability:t.map((function(t){return t.value.abs2()})).reduce((function(t,e){return t+e}))}})).value()},t}();e.default=c},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(7)),s=r(5),a=n(r(4)),u=n(r(10)),l=r(9),c=i(r(21)),h=a.default.polarization(),f=a.default.direction(),d=u.default.identity([h]),p=u.default.identity([f]),_=u.default.indicator([h],"H"),g=u.default.indicator([h],"V"),m=function(t,e){return(t%e+e)%e};function v(t,e){return u.default.add([u.default.outer([c.diodeForDirections(t),c.projectionMatrix(e*l.TAU,h)]),u.default.outer([c.diodeForDirections(t+180),c.projectionMatrix(-e*l.TAU,h)])])}function y(t,e,r){return void 0===r&&(r=.25),u.default.add([u.default.outer([c.diodeForDirections(t),c.phaseShiftForRealEigenvectors(e*l.TAU,0,r,h)]),u.default.outer([c.diodeForDirections(t+180),c.phaseShiftForRealEigenvectors(-e*l.TAU,0,r,h)])])}e.sugarSolution=function(t){return void 0===t&&(t=.125),u.default.outer([p,c.rotationMatrix(t*l.TAU,h)])},e.attenuator=function(t){return void 0===t&&(t=Math.SQRT1_2),c.amplitudeIntensity(t,0)},e.vacuumJar=function(){return c.amplitudeIntensity(1,-.25)},e.glassSlab=function(){return c.amplitudeIntensity(1,.25)},e.mirror=function(t){return u.default.outer([c.reflectFromPlaneDirection(t),c.reflectPhaseFromDenser()])},e.beamSplitter=function(t){return u.default.outer([c.reflectFromPlaneDirection(t),c.reflectPhaseFromDenser()]).mulConstant(s.Cx(0,1)).add(c.beamsplitterTransmittionDirections(t).outer(d)).mulConstant(c.isqrt2)},e.cornerCube=function(){return u.default.outer([u.default.fromSparseCoordNames([["<",">",s.Cx(1)],["v","^",s.Cx(1)],[">","<",s.Cx(1)],["^","v",s.Cx(1)]],[f]),d])},e.polarizingBeamsplitter=function(t){if(!o.default.includes([45,135],m(t,180)))throw new Error("polarizingBeamsplitter: angle "+t+" mod 180 not in [45, 135].");return u.default.add([p.outer(_),c.reflectFromPlaneDirection(t).outer(g)])},e.faradayRotator=function(t,e){return void 0===e&&(e=.125),u.default.add([u.default.outer([c.diodeForDirections(t),c.rotationMatrix(e*l.TAU,h)]),u.default.outer([c.diodeForDirections(t+180),c.rotationMatrix(-e*l.TAU,h)])])},e.polarizer=v,e.polarizerWE=function(t){return v(0,t/360)},e.PolarizerNS=function(t){return v(90,t/360)},e.phasePlate=y,e.quarterWavePlateWE=function(t){return y(0,t/360)},e.quarterWavePlateNS=function(t){return y(90,t/360)}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(3)),o=n(r(15)),s=n(r(30)),a=n(r(11));e.default=class{constructor(t,e,r){if(this.rows=t,this.cols=e,this.clusters=[],r)this.matrix=r;else{this.matrix=new Array(this.rows).fill(0).map(()=>new Array(this.cols).fill(0));for(let r=0;r<t;r++)for(let t=0;t<e;t++){const e=i.default.importCoord({y:r,x:t});this.set(new s.default(e,o.default.fromName("void")))}}this.paths=this.computePaths()}get center(){return i.default.importCoord({y:Math.floor(this.cols/2),x:Math.floor(this.rows/2)})}get operatorList(){return this.unvoid.map(t=>[t.coord.x,t.coord.y,t.element.transition(t.rotation)])}filteredBy(t){return this.cells.filter(e=>e.element.name===t)}filteredByNot(t){return this.cells.filter(e=>e.element.name!==t)}includes(t){return t.y>=0&&t.y<this.rows&&t.x>=0&&t.x<this.cols}set(t){return!!this.includes(t.coord)&&(this.matrix[t.coord.y][t.coord.x]=t,!0)}get(t){return this.matrix[t.y][t.x]}move(t,e){const r=this.get(t),n=this.get(e);return r.frozen||n.frozen?(console.error(`Couldn't move ${r.element} because of frozen ${e.toString()}`),!1):(this.set(new s.default(t,n.element,n.rotation)),this.set(new s.default(e,r.element,r.rotation)),console.log(`Moved ${r.element} from ${t.toString()} to ${e.toString()}`),!0)}moveAll(t){this.cells.map(e=>{switch(t){case"top":e.coord=e.coord.top;break;case"bottom":e.coord=e.coord.bottom;break;case"left":e.coord=e.coord.left;break;case"right":e.coord=e.coord.right;break;default:throw new Error("Wrong direction given: [top, bottom, left, right]")}this.set(e)})}fireLasers(){return this.activeLasers.map(t=>t.fire())}coordIntensitySum(t){let e=0;return this.paths.filter(e=>t.equal(e.coord)).map(t=>{e+=t.intensity}),e}laserPath(t,e=50){let r=[t];const n=[];for(let t=0;t<e;t++)r.forEach(t=>{t.next(),this.includes(t.coord)||(t.intensity=0),this.absorbers.forEach(e=>{t.on(e)&&(t.intensity-=t.intensity*e.element.absorption)}),this.mirrors.forEach(e=>{t.on(e)&&(t.direction=(2*e.rotation-t.direction+360)%360)}),this.polarsplitters.forEach(e=>{if(t.on(e)){if(0===e.rotation){const n=(2*(e.rotation-45)-t.direction+360)%360;r.push(new a.default(t.coord,n,t.intensity))}if(180===e.rotation){const n=(2*(e.rotation+45)-t.direction+360)%360;r.push(new a.default(t.coord,n,t.intensity))}}}),this.beamsplitters.forEach(e=>{if(t.on(e)){t.intensity/=2;const n=(2*e.rotation-t.direction+360)%360;r.push(new a.default(t.coord,n,t.intensity))}}),this.phaseshifters.forEach(e=>{t.on(e)&&(t.phase=(t.phase+e.element.phase)%1)})}),r.forEach(t=>{t.alive||n.push(t)}),r=r.filter(t=>t.alive);const i=[];return(r=n.concat(r)).forEach(t=>{i.push(t.pathParticle)}),[...new Set(i.flat())]}computePaths(){const t=[],e=[];return this.activeLasers.map(t=>{e.push(t.fire())}),e.forEach(e=>{this.laserPath(e,40).forEach(e=>{e.coord.isIncludedIn(this.coords)&&t.push(e)})}),t}energizeCells(t){const e=t.map(t=>t.coord);this.cells.forEach(t=>{t.coord.isIncludedIn(e)&&"void"!==t.element.name?t.energized=!0:t.energized=!1})}activateCells(){this.unvoid.forEach(t=>{"laser"!==t.element.name&&(t.active=!1),this.adjacentCells(t.coord).filter(t=>t.energized&&"detector"===t.element.name).length>0&&(console.log(`Cell ${t.toString()} has 1+ active detectors as adjacent cell.`),t.active=!0)})}adjacentCells(t){const e=[];return t.adjacent.forEach(t=>{this.includes(t)&&e.push(this.get(t))}),e}get ascii(){let t="";for(let e=0;e<this.rows;e++){for(let r=0;r<this.cols;r++){const n=i.default.importCoord({y:e,x:r});t+=this.get(n).ascii}t+="\n"}return t}compress(){const t=this.unvoid,e=Math.min(...t.map(t=>t.coord.x)),r=Math.min(...t.map(t=>t.coord.y)),n=Math.max(...t.map(t=>t.coord.x)),i=Math.max(...t.map(t=>t.coord.y)),o=n-e,s=i-r;return console.log(`The most compressed version is: X:${o} Y: ${s}`),t.forEach(t=>{t.coord.x-=e,t.coord.y-=r}),t}importGrid(t){t.forEach(t=>{const e=s.default.importCell(t);this.set(e)})}exportGrid(){const t=[];return this.unvoid.forEach(e=>{t.push(e.exportCell())}),{cols:this.cols,rows:this.rows,cells:t}}get cells(){return this.matrix.reduce((t,e)=>t.concat(e),[])}get coords(){return this.cells.flatMap(t=>t.coord)}get void(){return this.filteredBy("void")}get unvoid(){return this.filteredByNot("void")}get activeCells(){return this.cells.filter(t=>t.active)}get lasers(){return this.filteredBy("laser")}get activeLasers(){return this.filteredBy("laser").filter(t=>!0===t.active)}get mirrors(){return this.filteredBy("mirror")}get beamsplitters(){return this.filteredBy("beamsplitter")}get coatedsplitters(){return this.filteredBy("coatedsplitter")}get polarsplitters(){return this.filteredBy("polarsplitter")}get reflectors(){return this.mirrors.concat(this.beamsplitters,this.coatedsplitters,this.polarsplitters)}get detectors(){return this.filteredBy("detector")}get energizedDetectors(){return this.detectors.filter(t=>t.energized)}get unenergizedDetectors(){return this.detectors.filter(t=>!t.energized)}get mines(){return this.filteredBy("mine")}get rocks(){return this.filteredBy("rock")}get omnidetectors(){return this.filteredBy("omnidetector")}get filters(){return this.filteredBy("filter")}get walls(){return this.filteredBy("wall")}get closedGates(){return this.filteredBy("gate").filter(t=>!t.active)}get openedGates(){return this.filteredBy("gate").filter(t=>t.active)}get absorbers(){return this.detectors.concat(this.mines,this.rocks,this.omnidetectors,this.filters,this.walls,this.closedGates)}get absorbPolarizers(){return this.filteredBy("absorb-polarizer")}get waveplates(){return this.filteredBy("waveplate")}get sugars(){return this.filteredBy("sugar")}get faradays(){return this.filteredBy("faraday")}get polarizers(){return this.absorbPolarizers.concat(this.waveplates,this.sugars,this.faradays)}get phaseincs(){return this.filteredBy("phaseinc")}get phasedecs(){return this.filteredBy("phasedec")}get phaseshifters(){return this.phasedecs.concat(this.phaseincs)}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(3)),o=n(r(15)),s=n(r(11)),a=r(12);class u{constructor(t,e,r=0,n=!1,i=!1,o=!1){this.coord=t,this.element=e,this.rotation=r,this.frozen=n,this.active=i,this.energized=o}get ascii(){return this.element.ascii[this.rotation/this.element.rotationAngle]}get rotationAscii(){return a.angleToSymbol(this.element.rotationAngle)}get foregroundColor(){return this.element.glyph.foregroundColor}get backgroundColor(){return this.element.glyph.backgroundColor}rotate(t=this.element.rotationAngle){if(this.frozen)console.log("This cell is frozen, you can't rotate it.");else{if(Math.abs(t)%this.element.rotationAngle!=0)throw new Error("Error in the supplied angle compared to the element rotation angle.");this.rotation=((this.rotation+t)%360+360)%360}}toggleFreeze(){this.frozen=!this.frozen}toggleActive(){this.active=!this.active}toggleEnergized(){this.energized=!this.energized}fire(){if(this.active)return new s.default(this.coord,this.rotation,1,0);throw Error("Laser is inactive...")}toString(){return`Cell @ ${this.coord.toString()} is ${this.frozen?"frozen":"unfrozen"} ${this.active?"active":"inactive"} and ${this.energized?"powered":"unpowered"} ${this.element.toString()} rotated ${this.rotation}°`}exportCell(){return{coord:this.coord.exportCoord(),element:this.element.name,rotation:this.rotation,frozen:this.frozen,active:this.active,energized:this.energized}}static importCell(t){const e=i.default.importCoord(t.coord),r=o.default.fromName(t.element);return new u(e,r,t.rotation,t.frozen,t.active,t.energized)}}e.default=u},function(t,e){var r,n,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(t){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,l=[],c=!1,h=-1;function f(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&d())}function d(){if(!c){var t=a(f);c=!0;for(var e=l.length;e;){for(u=l,l=[];++h<e;)u&&u[h].run();h=-1,e=l.length}u=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function _(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];l.push(new p(t,e)),1!==l.length||c||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(3));class o{constructor(t,e,r=5,n="left",i=!0){this.coord=t,this.width=r,this.text=e,this.direction=n,this.active=i}toString(){return`{#HINT ${this.text} @ ${this.coord.toString()}}`}exportHint(){return{coord:this.coord.exportCoord(),text:this.text}}static importHint(t){return t.map(t=>{const e=i.default.importCoord(t.coord);return new o(e,t.text)})}}e.default=o},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(3));class o extends i.default{constructor(t,e,r=0){super(t.y,t.x),this.coord=t,this.threshold=e,this.value=r}get completed(){return this.value>=this.threshold}get percentage(){return this.value/this.threshold*100}toString(){return`{#Goal ${this.completed?"completed ":" "}@ ${this.coord.toString()} is ${this.value} / ${this.threshold}} (${this.percentage}%)`}exportGoal(){return{coord:this.coord.exportCoord(),threshold:this.threshold,value:this.value}}static importGoal(t){return t.map(t=>{const e=t.coord;return new o(i.default.importCoord(e),t.threshold)})}}e.default=o},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(18),o=r(12),s=n(r(3)),a=n(r(17)),u=n(r(35)),l=n(r(22)),c=n(r(36)),h=n(r(38)),f=n(r(11));e.default=class{constructor(t,e=32){this.tilesize=32,this.level=t,this.gameState=new u.default,this.frames=[],this.frames.push(new h.default(t)),this.frameNumber=0,this.tilesize=e;const r=document.createElement("img");r.src=`./tiles/tilemap_${this.tilesize}.png`;const n=a.default.processTileMap(this.tilesize);this.display=new i.Display({layout:"tile-gl",bg:"transparent",width:t.grid.cols,height:t.grid.rows,fontSize:20,tileWidth:this.tilesize,tileHeight:this.tilesize,tileSet:r,tileMap:n}),document.getElementById("grid").appendChild(this.display.getContainer()),this.initializeGame(),this.mainLoop()}get playerCell(){return this.player.cell}get playerCoord(){return this.player.coord}get grid(){return this.level.grid}get lastFrame(){return this.frames[this.frames.length-1]}get firstFrame(){return this.frames[0]}get currentFrame(){return this.frames[this.frameNumber]}get maxFrameNumber(){return this.frames.length}initializeGame(){this.display.clear(),!this.gameState.isGameOver()||this.gameState.doRestartGame()?console.log("Starting game..."):alert("Victory!"),this.gameState.reset(),this.player=new c.default(this.level,this.grid.center),this.scheduler=new i.Scheduler.Simple,this.scheduler.add(this.player,!0),o.displayText("title",this.level.id+" - "+this.level.name),o.displayText("description",this.level.description),this.drawGame()}async mainLoop(){let t;for(;t=this.scheduler.next();)await t.act(),await l.default.waitForInput(this.handleInput.bind(this))}drawGame(){this.display.clear(),this.grid.paths=this.grid.computePaths(),this.displayDebug(),this.drawFrame()}displayDebug(){o.displayText("cell",this.player.cell.toString()),o.displayText("player",`Turns: ${this.frameNumber}/${this.maxFrameNumber} | player: ${this.playerCoord.toString()}`),o.displayText("laser",`Active particles: ${f.default.manyToString(this.currentFrame.particles)}`)}drawFrame(t=this.currentFrame){console.log(`--- Displaying frame ${this.frameNumber} ---`),o.displayText("laser",`Active particles: ${f.default.manyToString(t.particles)}`),this.drawGrid()}drawGrid(){this.display.clear(),console.log("Rendering WebGL game grid...");for(let t=0;t<this.grid.rows;t++)for(let e=0;e<this.grid.cols;e++){const r=s.default.importCoord({y:t,x:e});this.drawCoord(r)}}drawCoord(t){const e=this.grid.get(t),r=[e.ascii],n=["white"],i=["purple"];this.player.coord.equal(t)&&r.push("@"),e.frozen&&i.push("turquoise"),e.energized&&i.push("red");const o=this.grid.coordIntensitySum(t);o>0&&i.push(`rgba(255, 0, 0, ${o/3})`),this.currentFrame.quantum.forEach(e=>{e&&e.coord.equal(t)&&e.isVertical&&e.opacity>.1&&r.push("P"),e&&e.coord.equal(t)&&!e.isVertical&&e.opacity>.1&&r.push("d")}),this.display.draw(t.x,t.y,r,n[n.length-1],i[i.length-1])}handleInput(t){const e=t.keyCode;if(e===i.KEYS.VK_SUBTRACT||e===i.KEYS.VK_ADD){switch(e){case i.KEYS.VK_SUBTRACT:this.frameNumber-=1;break;case i.KEYS.VK_ADD:this.frameNumber+=1}if(this.frameNumber<=0&&(this.frameNumber=0),this.frameNumber>=this.frames.length-1){this.frameNumber=this.frames.length-1;const t=this.lastFrame.next();this.frames.push(t)}}else this.player.handleInput(t);this.drawGame()}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.reset()}reset(){this.achievedGoals=!1,this.noParticles=!1,this.notEnoughIntensity=!1}doStartNextRound(){return!this.noParticles}doRestartGame(){return this.noParticles||this.notEnoughIntensity}isGameOver(){return this.achievedGoals||this.noParticles||this.notEnoughIntensity}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(18),o=n(r(17)),s=n(r(22)),a=n(r(15)),u=r(37),l=r(16);e.default=class{constructor(t,e){this.glyph=new o.default("@",[0,0]),this.type=0,this.level=t,this.coord=e}get cell(){return this.level.grid.get(this.coord)}get element(){return this.cell.element}act(){return s.default.waitForInput(this.handleInput.bind(this))}cycleNext(t){const e=l.jsonGroups[t];if(!this.cell.frozen)if(t===this.element.group){const t=(e.indexOf(this.element.name)+1)%e.length;this.cell.element=a.default.fromName(e[t])}else this.cell.rotation=0,this.cell.element=a.default.fromName(e[0])}handleInput(t){let e=!1,r=this.coord;switch(t.keyCode){case i.KEYS.VK_Z:case i.KEYS.VK_UP:r=this.coord.top;break;case i.KEYS.VK_D:case i.KEYS.VK_RIGHT:r=this.coord.right;break;case i.KEYS.VK_S:case i.KEYS.VK_DOWN:r=this.coord.bottom;break;case i.KEYS.VK_Q:case i.KEYS.VK_LEFT:r=this.coord.left;break;case i.KEYS.VK_A:this.cell.rotate(-this.cell.element.rotationAngle);break;case i.KEYS.VK_E:case i.KEYS.VK_R:this.cell.rotate(this.cell.element.rotationAngle);break;case i.KEYS.VK_F:this.cell.toggleFreeze();break;case i.KEYS.VK_CONTROL:this.cell.toggleActive();break;case i.KEYS.VK_F1:const t=this.level.exportLevel(),e=new Blob([JSON.stringify(t)],{type:"text/plain;charset=utf-8"});u.saveAs(e,"level.json");break;case i.KEYS.VK_NUMPAD8:this.level.grid.moveAll("top");break;case i.KEYS.VK_NUMPAD2:this.level.grid.moveAll("bottom");break;case i.KEYS.VK_NUMPAD4:this.level.grid.moveAll("left");break;case i.KEYS.VK_NUMPAD6:this.level.grid.moveAll("right");break;case i.KEYS.VK_QUOTE:case i.KEYS.VK_0:this.cycleNext("Basic");break;case i.KEYS.VK_1:this.cycleNext("Emitter");break;case i.KEYS.VK_2:this.cycleNext("Direction");break;case i.KEYS.VK_3:this.cycleNext("Absorption");break;case i.KEYS.VK_4:this.cycleNext("Polarization");break;case i.KEYS.VK_5:this.cycleNext("Phase");break;case i.KEYS.VK_DELETE:this.cell.element=a.default.fromName("void"),this.cell.frozen=!1,this.cell.active=!1}return this.level.grid.includes(r)&&(this.coord=r,e=!0),e}toString(){return`Player ${this.coord.toString()}`}}},function(t,e,r){(function(r){var n,i,o;i=[],void 0===(o="function"==typeof(n=function(){"use strict";function e(t,e,r){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){s(n.response,e,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function i(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(r){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r&&r.global===r?r:void 0,s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype?function(t,r,s){var a=o.URL||o.webkitURL,u=document.createElement("a");r=r||t.name||"download",u.download=r,u.rel="noopener","string"==typeof t?(u.href=t,u.origin===location.origin?i(u):n(u.href)?e(t,r,s):i(u,u.target="_blank")):(u.href=a.createObjectURL(t),setTimeout((function(){a.revokeObjectURL(u.href)}),4e4),setTimeout((function(){i(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,r,o){if(r=r||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),r);else if(n(t))e(t,r,o);else{var s=document.createElement("a");s.href=t,s.target="_blank",setTimeout((function(){i(s)}))}}:function(t,r,n,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return e(t,r,n);var s="application/octet-stream"===t.type,a=/constructor/i.test(o.HTMLElement)||o.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||s&&a)&&"object"==typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=u?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},l.readAsDataURL(t)}else{var c=o.URL||o.webkitURL,h=c.createObjectURL(t);i?i.location=h:location.href=h,i=null,setTimeout((function(){c.revokeObjectURL(h)}),4e4)}});o.saveAs=s.saveAs=s,t.exports=s})?n.apply(e,i):n)||(t.exports=o)}).call(this,r(20))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(11)),s=r(12),a=i(r(8)),u=n(r(3));class l{constructor(t,e=0,r=[],n=[],i=!1){this.level=t,this.step=e,this.particles=r,this.quantum=n,this.end=i,0===e&&this.activeLasers.forEach(e=>{e.active&&(this.particles.push(e.fire()),t.state.addPhotonIndicator(e.coord.x,e.coord.y,e.ascii,"V"),s.displayText("quantum",t.state.vector.toString()))})}get grid(){return this.level.grid}get cells(){return this.grid.cells}get lasers(){return this.grid.lasers}get activeLasers(){return this.grid.activeLasers}get goals(){return this.level.goals}get hints(){return this.level.hints}get completedGoals(){return this.level.goals.filter(t=>t.completed)}get victory(){return this.completedGoals.length===this.goals.length}nextQuantum(){this.level.state.propagatePhotons(),s.displayText("quantum",this.level.state.vector.toString());const t=this.grid.operatorList;return this.level.state.actOnSinglePhotons(t),console.log(this.level.state.vector.toString()),this.level.state.aggregatePolarization().map(t=>{const e=t.x,r=t.y,n=t.direction,i=a.Cx(t.are,t.aim),s=a.Cx(t.bre,t.bim),l=new u.default(r,e);return new o.default(l,n,0,0,i,s)})}next(){this.quantum=this.nextQuantum();const t=this.grid.detectors,e=this.grid.rocks,r=this.grid.mines,n=this.grid.absorbers,i=t.concat(e,r,n),s=this.grid.mirrors,a=this.grid.beamsplitters,u=this.grid.phaseincs,c=this.grid.phasedecs,h=u.concat(c);return this.particles.forEach(t=>{t.next(),this.grid.includes(t.coord)||(t.intensity=0),i.forEach(e=>{t.on(e)&&(t.intensity*=e.element.absorption)}),s.forEach(e=>{t.on(e)&&(t.direction=(2*e.rotation-t.direction+360)%360)}),a.forEach(e=>{if(t.on(e)){t.intensity/=2;const r=(2*e.rotation-t.direction+360)%360;this.particles.push(new o.default(t.coord,r,t.intensity))}}),h.forEach(e=>{t.on(e)&&(t.phase=(t.phase+e.element.phase)%1)}),this.goals.forEach(e=>{e.coord.equal(t.coord)&&(e.value+=100*t.intensity,t.intensity=0)})}),this.particles=this.particles.filter(t=>t.intensity>0),this.victory&&(this.level.completed=!0,this.end=!0),0===this.particles.length&&(this.level.completed=!1,this.end=!0),new l(this.level,this.step+1,this.particles,this.quantum,this.end)}toString(){let t=`\n--- ${this.victory?"VICTORY":"IN PROGRESS"} --- Step #${this.step} with ${this.particles.length} active particles.\n`;return t+="\nClassical: ",t+=o.default.manyToString(this.particles),t+="\nQuantum: ",t+=o.default.manyToString(this.quantum),t+="\n",t+=`${this.level.goals.length} active goals...\n`,this.level.goals.map(e=>{t+=`- ${e.toString()}\n`}),t}exportFrame(){return{level:this.level.exportLevel(),end:this.end,step:this.step,particles:this.particles.map(t=>t.exportParticle()),quantum:this.particles.map(t=>t.exportParticle())}}}e.default=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,